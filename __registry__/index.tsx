/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const index: Record<string, any> = {
  "index": {
    name: "index",
    description: "",
    type: "registry:style",
    dependencies: ["tailwindcss-animate","class-variance-authority","lucide-react"],
    registryDependencies: ["utils"],
    files: [],
    component: null,
    command: 'https://animate-ui.com/r/index',
    meta: undefined,
  },
  "liquid-button": {
    name: "liquid-button",
    description: "A liquid button component",
    type: "registry:ui",
    dependencies: ["motion"],
    registryDependencies: undefined,
    files: [
  {
    "path": "registry/buttons/liquid-button.tsx",
    "type": "registry:ui",
    "target": "components/animate-ui/liquid-button.tsx",
    "content": "'use client';\n\nimport * as React from 'react';\nimport { motion, HTMLMotionProps } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\nexport type LiquidButtonProps = HTMLMotionProps<'button'>;\n\nexport const LiquidButton = React.forwardRef<\n  HTMLButtonElement,\n  LiquidButtonProps\n>(({ className, ...props }, ref) => {\n  return (\n    <motion.button\n      whileTap={{ scale: 0.95 }}\n      whileHover={{ scale: 1.05 }}\n      className={cn(\n        'relative px-6 py-3 text-base font-semibold text-primary hover:text-primary-foreground !bg-muted [--liquid-button-color:var(--primary)] rounded-lg cursor-pointer overflow-hidden [background:_linear-gradient(var(--liquid-button-color)_0_0)_no-repeat_calc(200%-var(--liquid-button-fill,0%))_100%/200%_var(--liquid-button-fill,0.2em)] hover:[--liquid-button-fill:100%] hover:[--liquid-button-delay:0.3s] [transition:_background_0.3s_var(--liquid-button-delay,0s),_color_0.3s_var(--liquid-button-delay,0s),_background-position_0.3s_calc(0.3s_-_var(--liquid-button-delay,0s))]',\n        className,\n      )}\n      {...props}\n      ref={ref}\n    />\n  );\n});\n\nLiquidButton.displayName = 'LiquidButton';"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/buttons/liquid-button.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/liquid-button',
    meta: undefined,
  },
  "liquid-button-demo": {
    name: "liquid-button-demo",
    description: "Demo showing an animated button with liquid effect.",
    type: "registry:example",
    dependencies: undefined,
    registryDependencies: ["https://animate-ui.com/r/liquid-button"],
    files: [
  {
    "path": "registry/demo/buttons/liquid-button-demo.tsx",
    "type": "registry:example",
    "target": "components/animate-ui/liquid-button-demo.tsx",
    "content": "import { LiquidButton } from '@/registry/buttons/liquid-button';\n\nexport const LiquidButtonDemo = () => {\n  return <LiquidButton>Liquid Button</LiquidButton>;\n};"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/demo/buttons/liquid-button-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/liquid-button-demo',
    meta: undefined,
  },
  "radix-tabs": {
    name: "radix-tabs",
    description: "Radix UI tabs component",
    type: "registry:ui",
    dependencies: ["motion","@radix-ui/react-tabs"],
    registryDependencies: undefined,
    files: [
  {
    "path": "registry/radix/tabs.tsx",
    "type": "registry:ui",
    "target": "components/animate-ui/radix-tabs.tsx",
    "content": "'use client';\n\nimport * as React from 'react';\nimport * as TabsPrimitive from '@radix-ui/react-tabs';\nimport {\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n  useCallback,\n} from 'react';\nimport { motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ntype TabsProps = React.ComponentProps<typeof TabsPrimitive.Root>;\n\nconst Tabs = React.forwardRef<\n  React.ComponentRef<typeof TabsPrimitive.Root>,\n  TabsProps\n>(({ className, ...props }, ref) => {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      ref={ref}\n      className={cn('flex flex-col gap-2', className)}\n      {...props}\n    />\n  );\n});\nTabs.displayName = 'Tabs';\n\ntype TabsListProps = React.ComponentProps<typeof TabsPrimitive.List> & {\n  activeClassName?: string;\n};\n\nconst TabsList = React.forwardRef<HTMLDivElement, TabsListProps>(\n  ({ className, activeClassName, ...props }, ref) => {\n    const localRef = useRef<HTMLDivElement | null>(null);\n    React.useImperativeHandle(ref, () => localRef.current as HTMLDivElement);\n\n    const [indicatorStyle, setIndicatorStyle] = useState({\n      left: 0,\n      top: 0,\n      width: 0,\n      height: 0,\n    });\n\n    const updateIndicator = useCallback(() => {\n      if (!localRef.current) return;\n\n      const activeTab = localRef.current.querySelector<HTMLElement>(\n        '[data-state=\"active\"]',\n      );\n      if (!activeTab) return;\n\n      const activeRect = activeTab.getBoundingClientRect();\n      const tabsRect = localRef.current.getBoundingClientRect();\n\n      setIndicatorStyle({\n        left: activeRect.left - tabsRect.left,\n        top: activeRect.top - tabsRect.top,\n        width: activeRect.width,\n        height: activeRect.height,\n      });\n    }, []);\n\n    useEffect(() => {\n      updateIndicator();\n      window.addEventListener('resize', updateIndicator);\n      const observer = new MutationObserver(updateIndicator);\n\n      if (localRef.current) {\n        observer.observe(localRef.current, {\n          attributes: true,\n          childList: true,\n          subtree: true,\n        });\n      }\n\n      return () => {\n        window.removeEventListener('resize', updateIndicator);\n        observer.disconnect();\n      };\n    }, [updateIndicator]);\n\n    return (\n      <div className=\"relative\" ref={localRef}>\n        <TabsPrimitive.List\n          data-slot=\"tabs-list\"\n          className={cn(\n            'bg-muted text-muted-foreground inline-flex h-10 w-fit items-center justify-center rounded-lg p-[4px]',\n            className,\n          )}\n          {...props}\n        />\n        <motion.div\n          className={cn(\n            'absolute rounded-sm bg-background shadow-sm',\n            activeClassName,\n          )}\n          animate={{\n            left: indicatorStyle.left,\n            top: indicatorStyle.top,\n            width: indicatorStyle.width,\n            height: indicatorStyle.height,\n          }}\n          transition={{\n            type: 'spring',\n            bounce: 0,\n            stiffness: 300,\n            damping: 30,\n          }}\n        />\n      </div>\n    );\n  },\n);\nTabsList.displayName = 'TabsList';\n\ntype TabsTriggerProps = React.ComponentProps<typeof TabsPrimitive.Trigger>;\n\nconst TabsTrigger = React.forwardRef<\n  React.ComponentRef<typeof TabsPrimitive.Trigger>,\n  TabsTriggerProps\n>(({ className, ...props }, ref) => {\n  return (\n    <TabsPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        'inline-flex items-center h-full justify-center whitespace-nowrap rounded-sm px-2 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:text-foreground z-10',\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nTabsTrigger.displayName = 'TabsTrigger';\n\ntype TabsContentProps = React.ComponentProps<typeof TabsPrimitive.Content>;\n\nconst TabsContent = React.forwardRef<HTMLDivElement, TabsContentProps>(\n  ({ className, children, ...props }, ref) => {\n    return (\n      <TabsPrimitive.Content\n        asChild\n        data-slot=\"tabs-content\"\n        className={cn('flex-1 outline-none', className)}\n        {...props}\n      >\n        <motion.div\n          ref={ref}\n          layout\n          initial={{ opacity: 0, y: 10, filter: 'blur(4px)' }}\n          animate={{ opacity: 1, y: 0, filter: 'blur(0px)' }}\n          exit={{ opacity: 0, y: 10, filter: 'blur(4px)' }}\n          transition={{\n            duration: 0.4,\n            ease: 'easeInOut',\n          }}\n        >\n          {children}\n        </motion.div>\n      </TabsPrimitive.Content>\n    );\n  },\n);\nTabsContent.displayName = 'TabsContent';\n\ntype TabsContentsProps = {\n  children: React.ReactNode;\n  className?: string;\n};\n\nconst TabsContents = React.forwardRef<HTMLDivElement, TabsContentsProps>(\n  ({ children, className }, ref) => {\n    const containerRef = useRef<HTMLDivElement | null>(null);\n    React.useImperativeHandle(\n      ref,\n      () => containerRef.current as HTMLDivElement,\n    );\n\n    const [height, setHeight] = useState(0);\n\n    useEffect(() => {\n      if (!containerRef.current) return;\n\n      const resizeObserver = new ResizeObserver((entries) => {\n        const newHeight = entries[0].contentRect.height;\n        requestAnimationFrame(() => {\n          setHeight(newHeight);\n        });\n      });\n\n      resizeObserver.observe(containerRef.current);\n\n      return () => {\n        resizeObserver.disconnect();\n      };\n    }, [children]);\n\n    useLayoutEffect(() => {\n      if (containerRef.current) {\n        const initialHeight =\n          containerRef.current.getBoundingClientRect().height;\n        setHeight(initialHeight);\n      }\n    }, [children]);\n\n    return (\n      <motion.div\n        layout\n        animate={{ height: height }}\n        transition={{ type: 'spring', stiffness: 280, damping: 30 }}\n        className={className}\n      >\n        <div ref={containerRef}>{children}</div>\n      </motion.div>\n    );\n  },\n);\nTabsContents.displayName = 'TabsContents';\n\nexport {\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  TabsContent,\n  TabsContents,\n  type TabsProps,\n  type TabsListProps,\n  type TabsTriggerProps,\n  type TabsContentProps,\n  type TabsContentsProps,\n};"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/radix/tabs.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/radix-tabs',
    meta: undefined,
  },
  "radix-tabs-demo": {
    name: "radix-tabs-demo",
    description: "Demo showing an animated Radix UI tabs.",
    type: "registry:example",
    dependencies: undefined,
    registryDependencies: ["https://animate-ui.com/r/radix-tabs"],
    files: [
  {
    "path": "registry/demo/radix/tabs-demo.tsx",
    "type": "registry:example",
    "target": "components/animate-ui/radix-tabs-demo.tsx",
    "content": "import {\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  TabsContent,\n  TabsContents,\n} from '@/registry/radix/tabs';\n\nexport const TabsDemo = () => {\n  return (\n    <Tabs\n      defaultValue=\"tab1\"\n      className=\"w-[400px] bg-neutral-100 dark:bg-neutral-800 rounded-lg p-0.5\"\n    >\n      <TabsList className=\"grid w-full grid-cols-3\">\n        <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n        <TabsTrigger value=\"tab2\">Tab 2</TabsTrigger>\n        <TabsTrigger value=\"tab3\">Tab 3</TabsTrigger>\n      </TabsList>\n\n      <TabsContents className=\"mx-1 mb-1 -mt-1.5 rounded-sm bg-background h-full overflow-y-hidden\">\n        <TabsContent value=\"tab1\" className=\"grid grid-cols-2 gap-1.5 p-1.5\">\n          <div className=\"h-20 w-full bg-muted rounded-sm\" />\n          <div className=\"h-20 w-full bg-muted rounded-sm\" />\n        </TabsContent>\n        <TabsContent value=\"tab2\" className=\"grid grid-cols-2 gap-1.5 p-1.5\">\n          <div className=\"h-20 w-full bg-muted rounded-sm\" />\n          <div className=\"h-20 w-full bg-muted rounded-sm\" />\n          <div className=\"h-20 w-full bg-muted rounded-sm\" />\n          <div className=\"h-20 w-full bg-muted rounded-sm\" />\n        </TabsContent>\n        <TabsContent value=\"tab3\" className=\"grid grid-cols-2 gap-1.5 p-1.5\">\n          <div className=\"h-20 w-full bg-muted rounded-sm\" />\n          <div className=\"h-20 w-full bg-muted rounded-sm\" />\n        </TabsContent>\n      </TabsContents>\n    </Tabs>\n  );\n};"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/demo/radix/tabs-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/radix-tabs-demo',
    meta: undefined,
  },
  "tabs": {
    name: "tabs",
    description: "Tabs component",
    type: "registry:ui",
    dependencies: ["motion"],
    registryDependencies: undefined,
    files: [
  {
    "path": "registry/components/tabs.tsx",
    "type": "registry:ui",
    "target": "components/animate-ui/tabs.tsx",
    "content": "'use client';\n\nimport * as React from 'react';\nimport { motion } from 'motion/react';\nimport { cn } from '@/lib/utils';\n\ninterface TabsContextProps {\n  activeValue: string;\n  handleValueChange: (value: string) => void;\n  registerTrigger: (value: string, node: HTMLElement | null) => void;\n  getTrigger: (value: string) => HTMLElement | null;\n}\n\nconst TabsContext = React.createContext<TabsContextProps | undefined>(\n  undefined,\n);\n\ntype TabsProps =\n  | {\n      defaultValue?: string;\n      children: React.ReactNode;\n      className?: string;\n      value?: never;\n      onValueChange?: never;\n    }\n  | {\n      value: string;\n      onValueChange?: (value: string) => void;\n      children: React.ReactNode;\n      className?: string;\n      defaultValue?: never;\n    };\n\nconst Tabs = React.forwardRef<HTMLDivElement, TabsProps>(\n  (\n    { defaultValue, value, onValueChange, children, className },\n    forwardedRef,\n  ) => {\n    const [activeValue, setActiveValue] = React.useState(defaultValue);\n    const triggersRef = React.useRef(new Map<string, HTMLElement>());\n\n    React.useEffect(() => {\n      if (activeValue === undefined && triggersRef.current.size > 0) {\n        const firstTab = Array.from(triggersRef.current.keys())[0];\n        setActiveValue(firstTab);\n      }\n    }, [activeValue]);\n\n    const registerTrigger = (value: string, node: HTMLElement | null) => {\n      if (node) {\n        triggersRef.current.set(value, node);\n      } else {\n        triggersRef.current.delete(value);\n      }\n    };\n\n    const getTrigger = (value: string): HTMLElement | null => {\n      return triggersRef.current.get(value) || null;\n    };\n\n    const handleValueChange = (val: string) => {\n      if (value === undefined) {\n        setActiveValue(val);\n      } else {\n        onValueChange?.(val);\n      }\n    };\n\n    const setRef = (node: HTMLDivElement | null) => {\n      if (forwardedRef) {\n        if (typeof forwardedRef === 'function') {\n          forwardedRef(node);\n        } else {\n          (forwardedRef as React.RefObject<HTMLDivElement | null>).current =\n            node;\n        }\n      }\n    };\n\n    return (\n      <TabsContext.Provider\n        value={{\n          activeValue: (value ?? activeValue)!,\n          handleValueChange,\n          registerTrigger,\n          getTrigger,\n        }}\n      >\n        <div ref={setRef} className={cn('flex flex-col gap-2', className)}>\n          {children}\n        </div>\n      </TabsContext.Provider>\n    );\n  },\n);\nTabs.displayName = 'Tabs';\n\ninterface TabsListProps {\n  children: React.ReactNode;\n  className?: string;\n  activeClassName?: string;\n}\n\nconst TabsList = React.forwardRef<HTMLDivElement, TabsListProps>(\n  ({ children, className, activeClassName }, forwardedRef) => {\n    const containerRef = React.useRef<HTMLDivElement>(null);\n    const { activeValue, getTrigger } = React.useContext(TabsContext)!;\n    const [indicatorStyle, setIndicatorStyle] = React.useState({\n      left: 0,\n      top: 0,\n      width: 0,\n      height: 0,\n    });\n\n    const updateIndicator = React.useCallback(() => {\n      if (!containerRef.current) return;\n\n      const trigger = getTrigger(activeValue);\n      if (!trigger) return;\n\n      const containerRect = containerRef.current.getBoundingClientRect();\n      const triggerRect = trigger.getBoundingClientRect();\n\n      setIndicatorStyle({\n        left: triggerRect.left - containerRect.left,\n        top: triggerRect.top - containerRect.top,\n        width: triggerRect.width,\n        height: triggerRect.height,\n      });\n    }, [activeValue, getTrigger]);\n\n    React.useEffect(() => {\n      updateIndicator();\n      window.addEventListener('resize', updateIndicator);\n      return () => window.removeEventListener('resize', updateIndicator);\n    }, [updateIndicator, children]);\n\n    const setRef = (node: HTMLDivElement | null) => {\n      containerRef.current = node;\n      if (forwardedRef) {\n        if (typeof forwardedRef === 'function') {\n          forwardedRef(node);\n        } else {\n          (forwardedRef as React.RefObject<HTMLDivElement | null>).current =\n            node;\n        }\n      }\n    };\n\n    return (\n      <div ref={setRef} className=\"relative\">\n        <div\n          role=\"tablist\"\n          className={cn(\n            'bg-muted text-muted-foreground inline-flex h-10 w-fit items-center justify-center rounded-lg p-[4px]',\n            className,\n          )}\n        >\n          {children}\n        </div>\n        <motion.div\n          className={cn(\n            'absolute rounded-sm bg-background shadow-sm',\n            activeClassName,\n          )}\n          animate={{\n            left: indicatorStyle.left,\n            width: indicatorStyle.width,\n            top: indicatorStyle.top,\n            height: indicatorStyle.height,\n          }}\n          transition={{\n            type: 'spring',\n            bounce: 0,\n            stiffness: 300,\n            damping: 30,\n          }}\n        />\n      </div>\n    );\n  },\n);\nTabsList.displayName = 'TabsList';\n\ninterface TabsTriggerProps {\n  value: string;\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst TabsTrigger = React.forwardRef<HTMLButtonElement, TabsTriggerProps>(\n  ({ value, children, className }, forwardedRef) => {\n    const { activeValue, handleValueChange, registerTrigger } =\n      React.useContext(TabsContext)!;\n\n    const setRef = (node: HTMLButtonElement | null) => {\n      registerTrigger(value, node);\n      if (forwardedRef) {\n        if (typeof forwardedRef === 'function') {\n          forwardedRef(node);\n        } else {\n          (forwardedRef as React.RefObject<HTMLButtonElement | null>).current =\n            node;\n        }\n      }\n    };\n\n    return (\n      <motion.button\n        role=\"tab\"\n        whileTap={{ scale: 0.95 }}\n        ref={setRef}\n        onClick={() => handleValueChange(value)}\n        data-state={activeValue === value ? 'active' : 'inactive'}\n        className={cn(\n          'inline-flex items-center h-full justify-center whitespace-nowrap rounded-sm px-2 py-1 text-sm font-medium ring-offset-background transition-transform focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:text-foreground z-10',\n          className,\n        )}\n      >\n        {children}\n      </motion.button>\n    );\n  },\n);\nTabsTrigger.displayName = 'TabsTrigger';\n\ninterface TabsContentsProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst TabsContents = React.forwardRef<HTMLDivElement, TabsContentsProps>(\n  ({ children, className }, forwardedRef) => {\n    const { activeValue } = React.useContext(TabsContext)!;\n    const childrenArray = React.Children.toArray(children);\n    const activeIndex = childrenArray.findIndex(\n      (child): child is React.ReactElement<{ value: string }> =>\n        React.isValidElement(child) &&\n        typeof child.props === 'object' &&\n        child.props !== null &&\n        'value' in child.props &&\n        child.props.value === activeValue,\n    );\n\n    const setRef = (node: HTMLDivElement | null) => {\n      if (forwardedRef) {\n        if (typeof forwardedRef === 'function') {\n          forwardedRef(node);\n        } else {\n          (forwardedRef as React.RefObject<HTMLDivElement | null>).current =\n            node;\n        }\n      }\n    };\n\n    return (\n      <div ref={setRef} className={cn('overflow-hidden', className)}>\n        <motion.div\n          className=\"flex\"\n          animate={{ x: activeIndex * -100 + '%' }}\n          transition={{ duration: 0.3, ease: 'easeInOut' }}\n        >\n          {childrenArray.map((child, index) => (\n            <div key={index} className=\"w-full flex-shrink-0\">\n              {child}\n            </div>\n          ))}\n        </motion.div>\n      </div>\n    );\n  },\n);\nTabsContents.displayName = 'TabsContents';\n\ninterface TabsContentProps {\n  value: string;\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst TabsContent = React.forwardRef<HTMLDivElement, TabsContentProps>(\n  ({ children, className }, forwardedRef) => {\n    return (\n      <div role=\"tabpanel\" ref={forwardedRef} className={className}>\n        {children}\n      </div>\n    );\n  },\n);\nTabsContent.displayName = 'TabsContent';\n\nexport {\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  TabsContents,\n  TabsContent,\n  type TabsProps,\n  type TabsListProps,\n  type TabsTriggerProps,\n  type TabsContentsProps,\n  type TabsContentProps,\n};"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/tabs.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/tabs',
    meta: undefined,
  },
  "tabs-demo": {
    name: "tabs-demo",
    description: "Demo showing an animated tabs.",
    type: "registry:example",
    dependencies: undefined,
    registryDependencies: ["https://animate-ui.com/r/tabs"],
    files: [
  {
    "path": "registry/demo/components/tabs-demo.tsx",
    "type": "registry:example",
    "target": "components/animate-ui/tabs-demo.tsx",
    "content": "import {\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  TabsContent,\n  TabsContents,\n} from '@/registry/components/tabs';\n\nexport const TabsDemo = () => {\n  return (\n    <Tabs\n      defaultValue=\"tab1\"\n      className=\"w-[400px] bg-neutral-100 dark:bg-neutral-800 rounded-lg p-0.5\"\n    >\n      <TabsList className=\"grid w-full grid-cols-3\">\n        <TabsTrigger value=\"tab1\">Tab 1</TabsTrigger>\n        <TabsTrigger value=\"tab2\">Tab 2</TabsTrigger>\n        <TabsTrigger value=\"tab3\">Tab 3</TabsTrigger>\n      </TabsList>\n\n      <TabsContents className=\"mx-1 mb-1 -mt-1.5 rounded-sm bg-background h-full\">\n        <TabsContent value=\"tab1\" className=\"grid grid-cols-2 gap-1.5 p-1.5\">\n          <div className=\"h-20 w-full bg-muted rounded-sm\" />\n          <div className=\"h-20 w-full bg-muted rounded-sm\" />\n        </TabsContent>\n        <TabsContent value=\"tab2\" className=\"grid grid-cols-2 gap-1.5 p-1.5\">\n          <div className=\"h-20 w-full bg-muted rounded-sm\" />\n          <div className=\"h-20 w-full bg-muted rounded-sm\" />\n          <div className=\"h-20 w-full bg-muted rounded-sm\" />\n          <div className=\"h-20 w-full bg-muted rounded-sm\" />\n        </TabsContent>\n        <TabsContent value=\"tab3\" className=\"grid grid-cols-2 gap-1.5 p-1.5\">\n          <div className=\"h-20 w-full bg-muted rounded-sm\" />\n          <div className=\"h-20 w-full bg-muted rounded-sm\" />\n        </TabsContent>\n      </TabsContents>\n    </Tabs>\n  );\n};"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/demo/components/tabs-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/tabs-demo',
    meta: undefined,
  },
  "typing-text": {
    name: "typing-text",
    description: "Typing text component",
    type: "registry:ui",
    dependencies: ["motion"],
    registryDependencies: undefined,
    files: [
  {
    "path": "registry/text/typing-text.tsx",
    "type": "registry:ui",
    "target": "components/animate-ui/typing-text.tsx",
    "content": "'use client';\n\nimport * as React from 'react';\nimport { motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\nconst CursorBlinker = ({ className }: { className?: string }) => {\n  return (\n    <motion.span\n      variants={{\n        blinking: {\n          opacity: [0, 0, 1, 1],\n          transition: {\n            duration: 1,\n            repeat: Infinity,\n            repeatDelay: 0,\n            ease: 'linear',\n            times: [0, 0.5, 0.5, 1],\n          },\n        },\n      }}\n      animate=\"blinking\"\n      className={cn(\n        'inline-block h-5 w-[1px] translate-y-1 bg-black dark:bg-white',\n        className,\n      )}\n    />\n  );\n};\n\ninterface TypingTextProps\n  extends Omit<React.HTMLAttributes<HTMLSpanElement>, 'children'> {\n  duration?: number;\n  delay?: number;\n  startOnView?: boolean;\n  cursor?: boolean;\n  loop?: boolean;\n  holdDelay?: number;\n  text: string | string[];\n  cursorClassName?: string;\n}\n\nconst TypingText = React.forwardRef<HTMLSpanElement, TypingTextProps>(\n  (\n    {\n      className,\n      duration = 100,\n      delay = 0,\n      startOnView = false,\n      cursor = false,\n      loop = false,\n      holdDelay = 1000,\n      text,\n      cursorClassName,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    const localRef = React.useRef<HTMLElement | null>(null);\n\n    const setRef = (node: HTMLElement | null) => {\n      localRef.current = node;\n      if (forwardedRef) {\n        if (typeof forwardedRef === 'function') {\n          forwardedRef(node);\n        } else {\n          (forwardedRef as React.RefObject<HTMLElement | null>).current = node;\n        }\n      }\n    };\n\n    const [displayedText, setDisplayedText] = React.useState<string>('');\n    const [started, setStarted] = React.useState(false);\n\n    React.useEffect(() => {\n      if (!startOnView) {\n        const timeoutId = setTimeout(() => {\n          setStarted(true);\n        }, delay);\n        return () => clearTimeout(timeoutId);\n      }\n      const observerCallback = ([entry]: IntersectionObserverEntry[]) => {\n        if (entry.isIntersecting) {\n          setTimeout(() => {\n            setStarted(true);\n          }, delay);\n          observer.disconnect();\n        }\n      };\n      const observer = new IntersectionObserver(observerCallback, {\n        threshold: 0.1,\n      });\n      if (localRef.current) observer.observe(localRef.current);\n      return () => observer.disconnect();\n    }, [delay, startOnView]);\n\n    React.useEffect(() => {\n      if (!started) return;\n      const timeoutIds: Array<ReturnType<typeof setTimeout>> = [];\n      const texts: string[] = typeof text === 'string' ? [text] : text;\n\n      const typeText = (str: string, onComplete: () => void) => {\n        let currentIndex = 0;\n        const type = () => {\n          if (currentIndex <= str.length) {\n            setDisplayedText(str.substring(0, currentIndex));\n            currentIndex++;\n            const id = setTimeout(type, duration);\n            timeoutIds.push(id);\n          } else {\n            onComplete();\n          }\n        };\n        type();\n      };\n\n      const eraseText = (str: string, onComplete: () => void) => {\n        let currentIndex = str.length;\n        const erase = () => {\n          if (currentIndex >= 0) {\n            setDisplayedText(str.substring(0, currentIndex));\n            currentIndex--;\n            const id = setTimeout(erase, duration);\n            timeoutIds.push(id);\n          } else {\n            onComplete();\n          }\n        };\n        erase();\n      };\n\n      const animateTexts = (index: number) => {\n        typeText(texts[index], () => {\n          const isLast = index === texts.length - 1;\n          if (isLast && !loop) {\n            return;\n          }\n          const id = setTimeout(() => {\n            eraseText(texts[index], () => {\n              const nextIndex = isLast ? 0 : index + 1;\n              animateTexts(nextIndex);\n            });\n          }, holdDelay);\n          timeoutIds.push(id);\n        });\n      };\n\n      animateTexts(0);\n\n      return () => {\n        timeoutIds.forEach(clearTimeout);\n      };\n    }, [text, duration, started, loop, holdDelay]);\n\n    return (\n      <span ref={setRef} className={className} {...props}>\n        <motion.span>{displayedText}</motion.span>\n        {cursor && <CursorBlinker className={cursorClassName} />}\n      </span>\n    );\n  },\n);\nTypingText.displayName = 'TypingText';\n\nexport { TypingText, type TypingTextProps };"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/text/typing-text.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/typing-text',
    meta: undefined,
  },
  "typing-text-demo": {
    name: "typing-text-demo",
    description: "Demo showing an animated typing text.",
    type: "registry:example",
    dependencies: undefined,
    registryDependencies: ["https://animate-ui.com/r/typing-text"],
    files: [
  {
    "path": "registry/demo/text/typing-text-demo.tsx",
    "type": "registry:example",
    "target": "components/animate-ui/typing-text-demo.tsx",
    "content": "import { TypingText } from '@/registry/text/typing-text';\n\nexport const TypingTextDemo = () => {\n  return (\n    <TypingText\n      className=\"text-2xl\"\n      text=\"Typing Text\"\n      cursor\n      cursorClassName=\"h-7\"\n    />\n  );\n};"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/demo/text/typing-text-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/typing-text-demo',
    meta: undefined,
  },
  "radix-checkbox": {
    name: "radix-checkbox",
    description: "Checkbox component",
    type: "registry:ui",
    dependencies: ["motion","@radix-ui/react-checkbox"],
    registryDependencies: undefined,
    files: [
  {
    "path": "registry/radix/checkbox.tsx",
    "type": "registry:ui",
    "target": "components/animate-ui/radix-checkbox.tsx",
    "content": "'use client';\n\nimport * as React from 'react';\nimport * as CheckboxPrimitive from '@radix-ui/react-checkbox';\nimport { motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ninterface CheckboxProps\n  extends React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root> {}\n\nconst Checkbox = React.forwardRef<\n  React.ComponentRef<typeof CheckboxPrimitive.Root>,\n  CheckboxProps\n>(({ className, ...props }, ref) => {\n  const buttonRef = React.useRef<HTMLButtonElement>(null);\n\n  React.useImperativeHandle(ref, () => buttonRef.current as HTMLButtonElement);\n\n  const [observedChecked, setObservedChecked] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!buttonRef.current) return;\n\n    const observer = new MutationObserver((mutationsList) => {\n      mutationsList.forEach((mutation) => {\n        if (mutation.attributeName === 'data-state') {\n          const currentState = buttonRef.current?.getAttribute('data-state');\n          setObservedChecked(currentState === 'checked');\n        }\n      });\n    });\n\n    observer.observe(buttonRef.current, {\n      attributes: true,\n      attributeFilter: ['data-state'],\n    });\n\n    const initialState = buttonRef.current.getAttribute('data-state');\n    setObservedChecked(initialState === 'checked');\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  const isChecked =\n    typeof props.checked !== 'undefined' ? props.checked : observedChecked;\n\n  return (\n    <CheckboxPrimitive.Root\n      ref={ref}\n      {...props}\n      className={cn(\n        'peer h-6 w-6 flex items-center justify-center shrink-0 rounded-sm bg-muted transition-colors duration-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',\n        className,\n      )}\n      asChild\n    >\n      <motion.button\n        ref={buttonRef}\n        whileTap={{ scale: 0.95 }}\n        whileHover={{ scale: 1.05 }}\n      >\n        <CheckboxPrimitive.Indicator forceMount asChild>\n          <motion.svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            strokeWidth=\"3.5\"\n            stroke=\"currentColor\"\n            className=\"h-4 w-4\"\n            initial=\"unchecked\"\n            animate={isChecked ? 'checked' : 'unchecked'}\n          >\n            <motion.path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              d=\"M4.5 12.75l6 6 9-13.5\"\n              variants={{\n                checked: {\n                  pathLength: 1,\n                  opacity: 1,\n                  transition: {\n                    duration: 0.2,\n                    delay: 0.2,\n                  },\n                },\n                unchecked: {\n                  pathLength: 0,\n                  opacity: 0,\n                  transition: {\n                    duration: 0.2,\n                  },\n                },\n              }}\n            />\n          </motion.svg>\n        </CheckboxPrimitive.Indicator>\n      </motion.button>\n    </CheckboxPrimitive.Root>\n  );\n});\n\nCheckbox.displayName = CheckboxPrimitive.Root.displayName;\n\nexport { Checkbox, type CheckboxProps };"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/radix/checkbox.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/radix-checkbox',
    meta: undefined,
  },
  "radix-checkbox-demo": {
    name: "radix-checkbox-demo",
    description: "Demo showing an animated checkbox.",
    type: "registry:example",
    dependencies: undefined,
    registryDependencies: ["https://animate-ui.com/r/radix-checkbox"],
    files: [
  {
    "path": "registry/demo/radix/checkbox-demo.tsx",
    "type": "registry:example",
    "target": "components/animate-ui/radix-checkbox-demo.tsx",
    "content": "import { Checkbox } from '@/registry/radix/checkbox';\n\nexport const CheckboxDemo = () => {\n  return <Checkbox defaultChecked />;\n};"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/demo/radix/checkbox-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/radix-checkbox-demo',
    meta: undefined,
  },
  "stars-background": {
    name: "stars-background",
    description: "Stars background component",
    type: "registry:ui",
    dependencies: ["motion"],
    registryDependencies: undefined,
    files: [
  {
    "path": "registry/backgrounds/stars.tsx",
    "type": "registry:ui",
    "target": "components/animate-ui/stars-background.tsx",
    "content": "'use client';\n\nimport * as React from 'react';\nimport { motion, useMotionValue, useSpring } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ninterface StarLayerProps {\n  count: number;\n  size: number;\n  duration: number;\n}\n\nconst StarLayer = ({ count, size, duration }: StarLayerProps) => {\n  const boxShadow = React.useMemo(() => {\n    const shadows: string[] = [];\n    for (let i = 0; i < count; i++) {\n      const x = Math.floor(Math.random() * 4000) - 2000;\n      const y = Math.floor(Math.random() * 4000) - 2000;\n      shadows.push(`${x}px ${y}px #FFF`);\n    }\n    return shadows.join(', ');\n  }, [count]);\n\n  return (\n    <motion.div\n      animate={{ y: [0, -2000] }}\n      transition={{ repeat: Infinity, duration: duration, ease: 'linear' }}\n      className=\"absolute top-0 left-0 w-full h-[2000px]\"\n    >\n      <div\n        className=\"absolute bg-transparent rounded-full\"\n        style={{\n          width: `${size}px`,\n          height: `${size}px`,\n          boxShadow: boxShadow,\n        }}\n      />\n      <div\n        className=\"absolute bg-transparent rounded-full top-[2000px]\"\n        style={{\n          width: `${size}px`,\n          height: `${size}px`,\n          boxShadow: boxShadow,\n        }}\n      />\n    </motion.div>\n  );\n};\n\ninterface StarsBackgroundProps extends React.HTMLAttributes<HTMLDivElement> {\n  factor?: number;\n  speed?: number;\n  stiffness?: number;\n  damping?: number;\n}\n\nconst StarsBackground = React.forwardRef<HTMLDivElement, StarsBackgroundProps>(\n  (\n    {\n      children,\n      className,\n      factor = 0.05,\n      speed = 50,\n      stiffness = 50,\n      damping = 20,\n      ...props\n    },\n    ref,\n  ) => {\n    const offsetX = useMotionValue(1);\n    const offsetY = useMotionValue(1);\n\n    const springX = useSpring(offsetX, { stiffness, damping });\n    const springY = useSpring(offsetY, { stiffness, damping });\n\n    const handleMouseMove = React.useCallback(\n      (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        const centerX = window.innerWidth / 2;\n        const centerY = window.innerHeight / 2;\n        const newOffsetX = -(e.clientX - centerX) * factor;\n        const newOffsetY = -(e.clientY - centerY) * factor;\n        offsetX.set(newOffsetX);\n        offsetY.set(newOffsetY);\n      },\n      [offsetX, offsetY, factor],\n    );\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'relative overflow-hidden bg-[radial-gradient(ellipse_at_bottom,_#262626_0%,_#000_100%)]',\n          className,\n        )}\n        onMouseMove={handleMouseMove}\n        {...props}\n      >\n        <motion.div style={{ x: springX, y: springY }}>\n          <StarLayer count={1000} size={1} duration={speed} />\n          <StarLayer count={400} size={2} duration={speed * 2} />\n          <StarLayer count={200} size={3} duration={speed * 3} />\n        </motion.div>\n        {children}\n      </div>\n    );\n  },\n);\n\nStarsBackground.displayName = 'StarsBackground';\n\nexport { StarsBackground, type StarsBackgroundProps };"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/backgrounds/stars.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/stars-background',
    meta: undefined,
  },
  "stars-background-demo": {
    name: "stars-background-demo",
    description: "Demo showing an animated stars background.",
    type: "registry:example",
    dependencies: undefined,
    registryDependencies: ["https://animate-ui.com/r/stars-background"],
    files: [
  {
    "path": "registry/demo/backgrounds/stars-background-demo.tsx",
    "type": "registry:example",
    "target": "components/animate-ui/stars-background-demo.tsx",
    "content": "import { StarsBackground } from '@/registry/backgrounds/stars';\n\nexport const StarsBackgroundDemo = () => {\n  return (\n    <StarsBackground className=\"absolute inset-0 flex items-center justify-center rounded-xl\">\n      <h1 className=\"text-3xl font-bold text-white\">Stars Background</h1>\n    </StarsBackground>\n  );\n};"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/demo/backgrounds/stars-background-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/stars-background-demo',
    meta: undefined,
  },
  "gradient-background": {
    name: "gradient-background",
    description: "Gradient background component",
    type: "registry:ui",
    dependencies: ["motion"],
    registryDependencies: undefined,
    files: [
  {
    "path": "registry/backgrounds/gradient.tsx",
    "type": "registry:ui",
    "target": "components/animate-ui/gradient-background.tsx",
    "content": "'use client';\n\nimport * as React from 'react';\nimport { HTMLMotionProps, motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ninterface GradientBackgroundProps extends HTMLMotionProps<'div'> {\n  duration?: number;\n}\n\nconst GradientBackground = React.forwardRef<\n  HTMLDivElement,\n  GradientBackgroundProps\n>(({ className, duration = 15, ...props }, ref) => {\n  return (\n    <motion.div\n      ref={ref}\n      className={cn(\n        'w-full h-full bg-gradient-to-br from-blue-500 via-purple-500 to-pink-500 bg-[length:400%_400%]',\n        className,\n      )}\n      animate={{\n        backgroundPosition: ['0% 50%', '100% 50%', '0% 50%'],\n      }}\n      transition={{\n        duration: 15,\n        ease: 'easeInOut',\n        repeat: Infinity,\n      }}\n      {...props}\n    />\n  );\n});\n\nGradientBackground.displayName = 'GradientBackground';\n\nexport { GradientBackground, type GradientBackgroundProps };"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/backgrounds/gradient.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/gradient-background',
    meta: undefined,
  },
  "gradient-background-demo": {
    name: "gradient-background-demo",
    description: "Demo showing an animated gradient background.",
    type: "registry:example",
    dependencies: undefined,
    registryDependencies: ["https://animate-ui.com/r/gradient-background"],
    files: [
  {
    "path": "registry/demo/backgrounds/gradient-background-demo.tsx",
    "type": "registry:example",
    "target": "components/animate-ui/gradient-background-demo.tsx",
    "content": "import { GradientBackground } from '../../backgrounds/gradient';\n\nexport const GradientBackgroundDemo = () => {\n  return (\n    <GradientBackground className=\"absolute inset-0 flex items-center justify-center rounded-xl\">\n      <h1 className=\"text-3xl font-bold text-white\">Gradient Background</h1>\n    </GradientBackground>\n  );\n};"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/demo/backgrounds/gradient-background-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/gradient-background-demo',
    meta: undefined,
  },
  "highlight-text": {
    name: "highlight-text",
    description: "Highlight text component",
    type: "registry:ui",
    dependencies: ["motion"],
    registryDependencies: undefined,
    files: [
  {
    "path": "registry/text/highlight-text.tsx",
    "type": "registry:ui",
    "target": "components/animate-ui/highlight-text.tsx",
    "content": "'use client';\n\nimport * as React from 'react';\nimport { motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ntype HighlightTextProps = {\n  children: React.ReactNode;\n  className?: string;\n  startOnView?: boolean;\n  duration?: number;\n  delay?: number;\n};\n\nconst animation = { backgroundSize: '100% 100%' };\n\nconst HighlightText = ({\n  children,\n  className,\n  startOnView,\n  duration = 2,\n  delay = 0,\n}: HighlightTextProps) => {\n  return (\n    <motion.span\n      initial={{\n        backgroundSize: '0% 100%',\n      }}\n      {...(startOnView ? { whileInView: animation } : { animate: animation })}\n      transition={{\n        type: 'keyframes',\n        duration,\n        ease: 'easeInOut',\n        delay,\n      }}\n      style={{\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'left center',\n        display: 'inline',\n      }}\n      className={cn(\n        `relative inline-block px-2 py-1 rounded-lg bg-gradient-to-r from-blue-300 via-purple-300 to-pink-300 dark:from-blue-500 dark:via-purple-500 dark:to-pink-500`,\n        className,\n      )}\n    >\n      {children}\n    </motion.span>\n  );\n};\n\nexport { HighlightText, type HighlightTextProps };"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/text/highlight-text.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/highlight-text',
    meta: undefined,
  },
  "highlight-text-demo": {
    name: "highlight-text-demo",
    description: "Demo showing an animated highlight text.",
    type: "registry:example",
    dependencies: undefined,
    registryDependencies: ["https://animate-ui.com/r/highlight-text"],
    files: [
  {
    "path": "registry/demo/text/highlight-text-demo.tsx",
    "type": "registry:example",
    "target": "components/animate-ui/highlight-text-demo.tsx",
    "content": "import { HighlightText } from '@/registry/text/highlight-text';\n\nexport const HighlightTextDemo = () => {\n  return <HighlightText className=\"text-2xl\">Highlight Text</HighlightText>;\n};"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/demo/text/highlight-text-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/highlight-text-demo',
    meta: undefined,
  },
  "radix-switch": {
    name: "radix-switch",
    description: "Radix UI switch component",
    type: "registry:ui",
    dependencies: ["motion","@radix-ui/react-switch"],
    registryDependencies: undefined,
    files: [
  {
    "path": "registry/radix/switch.tsx",
    "type": "registry:ui",
    "target": "components/animate-ui/radix-switch.tsx",
    "content": "'use client';\n\nimport * as React from 'react';\nimport * as SwitchPrimitives from '@radix-ui/react-switch';\nimport { motion, type HTMLMotionProps } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\n// Create motion-enabled components for the switch and thumb\nconst MotionSwitch = motion.create(SwitchPrimitives.Root);\nconst MotionThumb = motion.create(SwitchPrimitives.Thumb);\n\n// Define the Switch component props with optional icons\ntype SwitchProps = React.ComponentPropsWithoutRef<\n  typeof SwitchPrimitives.Root\n> &\n  HTMLMotionProps<'button'> & {\n    leftIcon?: React.ElementType;\n    rightIcon?: React.ElementType;\n    thumbIcon?: React.ElementType;\n  };\n\nconst Switch = React.forwardRef<\n  React.ComponentRef<typeof SwitchPrimitives.Root>,\n  SwitchProps\n>(\n  (\n    {\n      className,\n      leftIcon: LeftIcon,\n      rightIcon: RightIcon,\n      thumbIcon: ThumbIcon,\n      ...props\n    },\n    ref,\n  ) => {\n    const switchRef = React.useRef<HTMLButtonElement>(null);\n    React.useImperativeHandle(\n      ref,\n      () => switchRef.current as HTMLButtonElement,\n    );\n\n    const [isChecked, setIsChecked] = React.useState(false);\n\n    React.useEffect(() => {\n      if (!switchRef.current) return;\n\n      if (props.checked !== undefined) {\n        setIsChecked(props.checked);\n      }\n\n      const observer = new MutationObserver((mutationsList) => {\n        mutationsList.forEach((mutation) => {\n          if (mutation.attributeName === 'data-state') {\n            const currentState = switchRef.current?.getAttribute('data-state');\n            setIsChecked(currentState === 'checked');\n          }\n        });\n      });\n\n      observer.observe(switchRef.current, {\n        attributes: true,\n        attributeFilter: ['data-state'],\n      });\n\n      const initialState = switchRef.current.getAttribute('data-state');\n      setIsChecked(initialState === 'checked');\n\n      return () => {\n        observer.disconnect();\n      };\n    }, [props.checked]);\n\n    const thumbVariants = React.useMemo(\n      () => ({\n        tap: {\n          width: '25px',\n          translateX: isChecked ? '20px' : '3px',\n          transition: { duration: 0.1 },\n        },\n        checked: {\n          translateX: '23px',\n          transition: { ease: 'circInOut' },\n        },\n        unchecked: {\n          translateX: '3px',\n          transition: { ease: 'circInOut' },\n        },\n      }),\n      [isChecked],\n    );\n\n    return (\n      <MotionSwitch\n        ref={switchRef}\n        className={cn(\n          'inline-flex items-center h-7 w-12 shrink-0 cursor-pointer bg-neutral-100 dark:bg-neutral-800 rounded-full relative data-[state=checked]:bg-neutral-950 dark:data-[state=checked]:bg-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50',\n          className,\n        )}\n        whileTap=\"tap\"\n        animate={isChecked ? 'checked' : 'unchecked'}\n        {...props}\n      >\n        {LeftIcon && (\n          <motion.div\n            animate={\n              isChecked ? { scale: 1, opacity: 1 } : { scale: 0, opacity: 0 }\n            }\n            transition={{ type: 'spring', bounce: 0 }}\n            className=\"absolute top-1/2 -translate-y-1/2 left-1.5 dark:text-neutral-500 text-neutral-400\"\n          >\n            <LeftIcon className=\"size-[14px]\" />\n          </motion.div>\n        )}\n\n        {RightIcon && (\n          <motion.div\n            animate={\n              isChecked ? { scale: 0, opacity: 0 } : { scale: 1, opacity: 1 }\n            }\n            transition={{ type: 'spring', bounce: 0 }}\n            className=\"absolute top-1/2 -translate-y-1/2 right-1.5 dark:text-neutral-400 text-neutral-500\"\n          >\n            <RightIcon className=\"size-[14px]\" />\n          </motion.div>\n        )}\n\n        <MotionThumb\n          initial={{ translateX: '2px' }}\n          className=\"size-[22px] bg-white dark:bg-neutral-950 text-neutral-500 dark:text-neutral-400 rounded-full shadow-sm flex items-center justify-center\"\n          variants={thumbVariants}\n        >\n          {ThumbIcon && <ThumbIcon className=\"size-[14px]\" />}\n        </MotionThumb>\n      </MotionSwitch>\n    );\n  },\n);\nSwitch.displayName = SwitchPrimitives.Root.displayName;\n\nexport { Switch, type SwitchProps };"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/radix/switch.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/radix-switch',
    meta: undefined,
  },
  "radix-switch-demo": {
    name: "radix-switch-demo",
    description: "Demo showing an animated radix switch.",
    type: "registry:example",
    dependencies: undefined,
    registryDependencies: ["https://animate-ui.com/r/radix-switch"],
    files: [
  {
    "path": "registry/demo/radix/switch-demo.tsx",
    "type": "registry:example",
    "target": "components/animate-ui/radix-switch-demo.tsx",
    "content": "import { Switch } from '@/registry/radix/switch';\n\nexport const SwitchDemo = () => {\n  return <Switch defaultChecked />;\n};"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/demo/radix/switch-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/radix-switch-demo',
    meta: undefined,
  },
  "rolling-text": {
    name: "rolling-text",
    description: "Rolling text component",
    type: "registry:ui",
    dependencies: ["motion"],
    registryDependencies: undefined,
    files: [
  {
    "path": "registry/text/rolling-text.tsx",
    "type": "registry:ui",
    "target": "components/animate-ui/rolling-text.tsx",
    "content": "'use client';\n\nimport * as React from 'react';\nimport { motion } from 'motion/react';\n\nconst entryAnimation = {\n  initial: { rotateX: 0 },\n  animate: { rotateX: 90 },\n};\n\nconst exitAnimation = {\n  initial: { rotateX: 90 },\n  animate: { rotateX: 0 },\n};\n\nconst formatCharacter = (char: string): string => {\n  return char === ' ' ? '\\u00A0' : char;\n};\n\ninterface RollingTextProps\n  extends Omit<React.HTMLAttributes<HTMLSpanElement>, 'children'> {\n  duration?: number;\n  delay?: number;\n  startOnView?: boolean;\n  text: string;\n}\n\nconst RollingText = React.forwardRef<HTMLSpanElement, RollingTextProps>(\n  (\n    { duration = 0.5, delay = 0.1, startOnView = false, text, ...props },\n    ref,\n  ) => {\n    const characters = React.useMemo(() => text.split(''), [text]);\n\n    return (\n      <span {...props} ref={ref}>\n        {characters.map((char, idx) => (\n          <span\n            key={idx}\n            className=\"relative inline-block perspective-[9999999px] transform-3d w-auto\"\n            aria-hidden=\"true\"\n          >\n            <motion.span\n              className=\"absolute inline-block backface-hidden origin-[50%_25%]\"\n              initial={entryAnimation.initial}\n              animate={entryAnimation.animate}\n              {...(startOnView\n                ? { whileInView: entryAnimation.animate }\n                : { animate: entryAnimation.animate })}\n              transition={{\n                ease: 'easeOut',\n                duration,\n                delay: idx * delay,\n              }}\n            >\n              {formatCharacter(char)}\n            </motion.span>\n            <motion.span\n              className=\"absolute inline-block backface-hidden origin-[50%_100%]\"\n              initial={exitAnimation.initial}\n              {...(startOnView\n                ? { whileInView: exitAnimation.animate }\n                : { animate: exitAnimation.animate })}\n              transition={{\n                ease: 'easeOut',\n                duration,\n                delay: idx * delay + 0.3,\n              }}\n            >\n              {formatCharacter(char)}\n            </motion.span>\n            <span className=\"invisible\">{formatCharacter(char)}</span>\n          </span>\n        ))}\n\n        <span className=\"sr-only\">{text}</span>\n      </span>\n    );\n  },\n);\n\nexport { RollingText, type RollingTextProps };"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/text/rolling-text.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/rolling-text',
    meta: undefined,
  },
  "rolling-text-demo": {
    name: "rolling-text-demo",
    description: "Demo showing an animated rolling text.",
    type: "registry:example",
    dependencies: undefined,
    registryDependencies: ["https://animate-ui.com/r/rolling-text"],
    files: [
  {
    "path": "registry/demo/text/rolling-text-demo.tsx",
    "type": "registry:example",
    "target": "components/animate-ui/rolling-text-demo.tsx",
    "content": "import { RollingText } from '@/registry/text/rolling-text';\n\nexport const RollingTextDemo = () => {\n  return <RollingText className=\"text-2xl\" text=\"Rolling Text\" />;\n};"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/demo/text/rolling-text-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/rolling-text-demo',
    meta: undefined,
  },
  "bubble-background": {
    name: "bubble-background",
    description: "Bubble background component",
    type: "registry:ui",
    dependencies: ["motion"],
    registryDependencies: undefined,
    files: [
  {
    "path": "registry/backgrounds/bubble.tsx",
    "type": "registry:ui",
    "target": "components/animate-ui/bubble-background.tsx",
    "content": "'use client';\n\nimport * as React from 'react';\nimport { motion, useMotionValue, useSpring } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ninterface BubbleBackgroundProps extends React.HTMLAttributes<HTMLDivElement> {\n  interactive?: boolean;\n  stiffness?: number;\n  damping?: number;\n  colors?: {\n    first: string;\n    second: string;\n    third: string;\n    fourth: string;\n    fifth: string;\n    sixth: string;\n  };\n}\n\nconst BubbleBackground = React.forwardRef<\n  HTMLDivElement,\n  BubbleBackgroundProps\n>(\n  (\n    {\n      className,\n      children,\n      interactive = false,\n      stiffness = 100,\n      damping = 20,\n      colors = {\n        first: '18,113,255',\n        second: '221,74,255',\n        third: '0,220,255',\n        fourth: '200,50,50',\n        fifth: '180,180,50',\n        sixth: '140,100,255',\n      },\n      ...props\n    },\n    ref,\n  ) => {\n    const containerRef = React.useRef<HTMLDivElement>(null);\n    React.useImperativeHandle(\n      ref,\n      () => containerRef.current as HTMLDivElement,\n    );\n\n    const mouseX = useMotionValue(0);\n    const mouseY = useMotionValue(0);\n    const springX = useSpring(mouseX, { stiffness, damping });\n    const springY = useSpring(mouseY, { stiffness, damping });\n\n    React.useEffect(() => {\n      if (!interactive) return;\n\n      const handleMouseMove = (e: MouseEvent) => {\n        if (!containerRef.current) return;\n        const rect = containerRef.current.getBoundingClientRect();\n        const centerX = rect.left + rect.width / 2;\n        const centerY = rect.top + rect.height / 2;\n        mouseX.set(e.clientX - centerX);\n        mouseY.set(e.clientY - centerY);\n      };\n\n      containerRef.current?.addEventListener('mousemove', handleMouseMove);\n      return () =>\n        containerRef.current?.removeEventListener('mousemove', handleMouseMove);\n    }, [interactive, mouseX, mouseY]);\n\n    return (\n      <div\n        ref={containerRef}\n        className={cn(\n          'relative w-full h-full overflow-hidden bg-gradient-to-br from-violet-900 to-blue-900',\n          className,\n        )}\n        {...props}\n      >\n        <style>\n          {`\n            :root {\n              --first-color: ${colors.first};\n              --second-color: ${colors.second};\n              --third-color: ${colors.third};\n              --fourth-color: ${colors.fourth};\n              --fifth-color: ${colors.fifth};\n              --sixth-color: ${colors.sixth};\n            }\n          `}\n        </style>\n\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className=\"absolute top-0 left-0 w-0 h-0\"\n        >\n          <defs>\n            <filter id=\"goo\">\n              <feGaussianBlur\n                in=\"SourceGraphic\"\n                stdDeviation=\"10\"\n                result=\"blur\"\n              />\n              <feColorMatrix\n                in=\"blur\"\n                mode=\"matrix\"\n                values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -8\"\n                result=\"goo\"\n              />\n              <feBlend in=\"SourceGraphic\" in2=\"goo\" />\n            </filter>\n          </defs>\n        </svg>\n\n        <div\n          className=\"absolute inset-0\"\n          style={{ filter: 'url(#goo) blur(40px)' }}\n        >\n          <motion.div\n            className=\"absolute rounded-full size-[80%] top-[10%] left-[10%] mix-blend-hard-light bg-[radial-gradient(circle_at_center,rgba(var(--first-color),0.8)_0%,rgba(var(--first-color),0)_50%)]\"\n            animate={{ y: [-50, 50, -50] }}\n            transition={{ duration: 30, ease: 'easeInOut', repeat: Infinity }}\n          />\n\n          <motion.div\n            className=\"absolute inset-0 flex justify-center items-center origin-[calc(50%-400px)]\"\n            animate={{ rotate: 360 }}\n            transition={{\n              duration: 20,\n              ease: 'linear',\n              repeat: Infinity,\n              repeatType: 'loop',\n              reverse: true,\n            }}\n          >\n            <div className=\"rounded-full size-[80%] top-[10%] left-[10%] mix-blend-hard-light bg-[radial-gradient(circle_at_center,rgba(var(--second-color),0.8)_0%,rgba(var(--second-color),0)_50%)]\" />\n          </motion.div>\n\n          <motion.div\n            className=\"absolute inset-0 flex justify-center items-center origin-[calc(50%+400px)]\"\n            animate={{ rotate: 360 }}\n            transition={{ duration: 40, ease: 'linear', repeat: Infinity }}\n          >\n            <div className=\"absolute rounded-full size-[80%] bg-[radial-gradient(circle_at_center,rgba(var(--third-color),0.8)_0%,rgba(var(--third-color),0)_50%)] mix-blend-hard-light top-[calc(50%+200px)] left-[calc(50%-500px)]\" />\n          </motion.div>\n\n          <motion.div\n            className=\"absolute rounded-full size-[80%] top-[10%] left-[10%] mix-blend-hard-light bg-[radial-gradient(circle_at_center,rgba(var(--fourth-color),0.8)_0%,rgba(var(--fourth-color),0)_50%)] opacity-70\"\n            animate={{ x: [-50, 50, -50] }}\n            transition={{ duration: 40, ease: 'easeInOut', repeat: Infinity }}\n          />\n\n          <motion.div\n            className=\"absolute inset-0 flex justify-center items-center origin-[calc(50%_-_800px)_calc(50%_+_200px)]\"\n            animate={{ rotate: 360 }}\n            transition={{ duration: 20, ease: 'linear', repeat: Infinity }}\n          >\n            <div className=\"absolute rounded-full size-[160%] mix-blend-hard-light bg-[radial-gradient(circle_at_center,rgba(var(--fifth-color),0.8)_0%,rgba(var(--fifth-color),0)_50%)] top-[calc(50%-80%)] left-[calc(50%-80%)]\" />\n          </motion.div>\n\n          {interactive && (\n            <motion.div\n              className=\"absolute rounded-full size-full mix-blend-hard-light bg-[radial-gradient(circle_at_center,rgba(var(--sixth-color),0.8)_0%,rgba(var(--sixth-color),0)_50%)] opacity-70\"\n              style={{\n                x: springX,\n                y: springY,\n              }}\n            />\n          )}\n        </div>\n\n        {children}\n      </div>\n    );\n  },\n);\n\nBubbleBackground.displayName = 'BubbleBackground';\n\nexport { BubbleBackground, type BubbleBackgroundProps };"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/backgrounds/bubble.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/bubble-background',
    meta: undefined,
  },
  "bubble-background-demo": {
    name: "bubble-background-demo",
    description: "Demo showing an animated bubble background.",
    type: "registry:example",
    dependencies: undefined,
    registryDependencies: ["https://animate-ui.com/r/bubble-background"],
    files: [
  {
    "path": "registry/demo/backgrounds/bubble-background-demo.tsx",
    "type": "registry:example",
    "target": "components/animate-ui/bubble-background-demo.tsx",
    "content": "import { BubbleBackground } from '@/registry/backgrounds/bubble';\n\nexport const GradientBackgroundDemo = () => {\n  return (\n    <BubbleBackground\n      interactive\n      className=\"absolute inset-0 flex items-center justify-center rounded-xl\"\n    >\n      <h1 className=\"text-3xl font-bold text-white z-10\">\n        Gradient Background\n      </h1>\n    </BubbleBackground>\n  );\n};"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/demo/backgrounds/bubble-background-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/bubble-background-demo',
    meta: undefined,
  },
  "writing-text": {
    name: "writing-text",
    description: "Writing text component",
    type: "registry:ui",
    dependencies: ["motion"],
    registryDependencies: undefined,
    files: [
  {
    "path": "registry/text/writing-text.tsx",
    "type": "registry:ui",
    "target": "components/animate-ui/writing-text.tsx",
    "content": "'use client';\n\nimport * as React from 'react';\nimport { motion } from 'motion/react';\n\ninterface WritingTextProps\n  extends Omit<React.HTMLAttributes<HTMLSpanElement>, 'children'> {\n  duration?: number;\n  delay?: number;\n  startOnView?: boolean;\n  text: string;\n}\n\nconst WritingText = React.forwardRef<HTMLSpanElement, WritingTextProps>(\n  ({ startOnView = false, delay = 0.5, duration = 2, text, ...props }, ref) => {\n    const words = React.useMemo(() => text.split(' '), [text]);\n\n    return (\n      <span ref={ref} {...props}>\n        {words.map((word, index) => (\n          <motion.span\n            key={index}\n            className=\"inline-block mr-1 will-change-transform will-change-opacity\"\n            initial={{ opacity: 0, y: 10 }}\n            {...(startOnView\n              ? {\n                  whileInView: { opacity: 1, y: 0 },\n                }\n              : {\n                  animate: { opacity: 1, y: 0 },\n                })}\n            transition={{\n              type: 'spring',\n              duration,\n              bounce: 0,\n              delay: index * delay,\n            }}\n          >\n            {word}{' '}\n          </motion.span>\n        ))}\n      </span>\n    );\n  },\n);\nWritingText.displayName = 'WritingText';\n\nexport { WritingText, type WritingTextProps };"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/text/writing-text.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/writing-text',
    meta: undefined,
  },
  "writing-text-demo": {
    name: "writing-text-demo",
    description: "Demo showing an animated writing text.",
    type: "registry:example",
    dependencies: undefined,
    registryDependencies: ["https://animate-ui.com/r/writing-text"],
    files: [
  {
    "path": "registry/demo/text/writing-text-demo.tsx",
    "type": "registry:example",
    "target": "components/animate-ui/writing-text-demo.tsx",
    "content": "import { WritingText } from '@/registry/text/writing-text';\n\nexport const WritingTextDemo = () => {\n  return <WritingText className=\"text-2xl\" text=\"Writing Text With Effect\" />;\n};"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/demo/text/writing-text-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/writing-text-demo',
    meta: undefined,
  },
  "sliding-number": {
    name: "sliding-number",
    description: "Sliding number component",
    type: "registry:ui",
    dependencies: ["motion","react-use-measure"],
    registryDependencies: undefined,
    files: [
  {
    "path": "registry/text/sliding-number.tsx",
    "type": "registry:ui",
    "target": "components/animate-ui/sliding-number.tsx",
    "content": "'use client';\n\nimport * as React from 'react';\nimport {\n  useSpring,\n  useTransform,\n  type MotionValue,\n  motion,\n} from 'motion/react';\nimport useMeasure from 'react-use-measure';\nimport { cn } from '@/lib/utils';\n\nfunction useInView(\n  ref: React.RefObject<Element | null>,\n  options?: IntersectionObserverInit,\n): boolean {\n  const [inView, setInView] = React.useState(false);\n  React.useEffect(() => {\n    if (!ref.current) return;\n    const observer = new IntersectionObserver(\n      ([entry]) => setInView(entry.isIntersecting),\n      { threshold: 0.1, ...options },\n    );\n    observer.observe(ref.current);\n    return () => observer.disconnect();\n  }, [ref, options]);\n  return inView;\n}\n\ninterface DigitProps {\n  prevValue: number;\n  value: number;\n  place: number;\n  transition?: {\n    type: 'spring';\n    stiffness: number;\n    damping: number;\n    mass: number;\n  };\n}\n\nconst Digit = ({ prevValue, value, place, transition }: DigitProps) => {\n  const startDigit = Math.floor(prevValue / place) % 10;\n  const targetDigit = Math.floor(value / place) % 10;\n  const animatedValue = useSpring(startDigit, transition);\n  React.useEffect(() => {\n    animatedValue.set(targetDigit);\n  }, [targetDigit, animatedValue]);\n  return (\n    <div className=\"relative inline-block w-[1ch] overflow-x-visible overflow-y-clip leading-none tabular-nums\">\n      <div className=\"invisible\">0</div>\n      {Array.from({ length: 10 }, (_, i) => (\n        <AnimatedDigit\n          key={i}\n          motionValue={animatedValue}\n          digit={i}\n          transition={transition}\n        />\n      ))}\n    </div>\n  );\n};\n\ninterface AnimatedDigitProps {\n  motionValue: MotionValue<number>;\n  digit: number;\n  transition?: {\n    type: 'spring';\n    stiffness: number;\n    damping: number;\n    mass: number;\n  };\n}\n\nconst AnimatedDigit = ({\n  motionValue,\n  digit,\n  transition,\n}: AnimatedDigitProps) => {\n  const [ref, bounds] = useMeasure();\n  const y = useTransform(motionValue, (latest) => {\n    if (!bounds.height) return 0;\n    const currentDigit = latest % 10;\n    const offset = (10 + digit - currentDigit) % 10;\n    let translateY = offset * bounds.height;\n    if (offset > 5) translateY -= 10 * bounds.height;\n    return translateY;\n  });\n  if (!bounds.height)\n    return (\n      <span ref={ref} className=\"invisible absolute\">\n        {digit}\n      </span>\n    );\n  return (\n    <motion.span\n      ref={ref}\n      style={{ y }}\n      className=\"absolute inset-0 flex items-center justify-center\"\n      transition={transition}\n    >\n      {digit}\n    </motion.span>\n  );\n};\n\ninterface SlidingNumberProps extends React.HTMLAttributes<HTMLSpanElement> {\n  number: number;\n  stiffness?: number;\n  damping?: number;\n  mass?: number;\n  startOnView?: boolean;\n}\n\nconst SlidingNumber = ({\n  number,\n  className,\n  stiffness = 180,\n  damping = 20,\n  mass = 0.4,\n  startOnView = false,\n  ...props\n}: SlidingNumberProps) => {\n  const containerRef = React.useRef<HTMLSpanElement>(null);\n  const inView = useInView(containerRef);\n  const effectiveNumber = startOnView && !inView ? 0 : Math.abs(number);\n  const prevNumberRef = React.useRef<number>(0);\n  const newStr = effectiveNumber.toString();\n  const [newIntStr, newDecStr] = newStr.split('.');\n  const prevStr = prevNumberRef.current.toString();\n  const [prevIntStr = '', prevDecStr = ''] = prevStr.split('.');\n  const adjustedPrevInt =\n    prevIntStr.length > newIntStr.length\n      ? prevIntStr.slice(-newIntStr.length)\n      : prevIntStr.padStart(newIntStr.length, '0');\n  const adjustedPrevDec = newDecStr\n    ? prevDecStr.length > newDecStr.length\n      ? prevDecStr.slice(0, newDecStr.length)\n      : prevDecStr.padEnd(newDecStr.length, '0')\n    : '';\n  React.useEffect(() => {\n    if (!startOnView || inView) {\n      prevNumberRef.current = effectiveNumber;\n    }\n  }, [effectiveNumber, newStr, inView, startOnView]);\n  const intDigitCount = newIntStr.length;\n  const intPlaces = Array.from({ length: intDigitCount }, (_, i) =>\n    Math.pow(10, intDigitCount - i - 1),\n  );\n  const decPlaces = newDecStr\n    ? Array.from({ length: newDecStr.length }, (_, i) =>\n        Math.pow(10, newDecStr.length - i - 1),\n      )\n    : [];\n  const newDecValue = newDecStr ? parseInt(newDecStr, 10) : 0;\n  const prevDecValue = adjustedPrevDec ? parseInt(adjustedPrevDec, 10) : 0;\n  return (\n    <span\n      ref={containerRef}\n      className={cn('flex items-center', className)}\n      {...props}\n    >\n      {!(startOnView && !inView) && number < 0 && (\n        <span className=\"mr-1\">-</span>\n      )}\n      {intPlaces.map((place) => (\n        <Digit\n          key={`int-${place}`}\n          prevValue={parseInt(adjustedPrevInt, 10)}\n          value={parseInt(newIntStr, 10)}\n          place={place}\n          transition={{ type: 'spring', stiffness, damping, mass }}\n        />\n      ))}\n      {newDecStr && (\n        <>\n          <span>.</span>\n          {decPlaces.map((place) => (\n            <Digit\n              key={`dec-${place}`}\n              prevValue={prevDecValue}\n              value={newDecValue}\n              place={place}\n              transition={{ type: 'spring', stiffness, damping, mass }}\n            />\n          ))}\n        </>\n      )}\n    </span>\n  );\n};\n\nexport { SlidingNumber, type SlidingNumberProps };"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/text/sliding-number.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/sliding-number',
    meta: undefined,
  },
  "sliding-number-demo": {
    name: "sliding-number-demo",
    description: "Demo showing an animated sliding number.",
    type: "registry:example",
    dependencies: undefined,
    registryDependencies: ["https://animate-ui.com/r/sliding-number"],
    files: [
  {
    "path": "registry/demo/text/sliding-number-demo.tsx",
    "type": "registry:example",
    "target": "components/animate-ui/sliding-number-demo.tsx",
    "content": "import { SlidingNumber } from '@/registry/text/sliding-number';\n\nexport const SlidingNumberDemo = () => {\n  return <SlidingNumber number={18937932} className=\"text-2xl\" />;\n};"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/demo/text/sliding-number-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/sliding-number-demo',
    meta: undefined,
  },
  "radix-tooltip": {
    name: "radix-tooltip",
    description: "Radix UI tooltip component",
    type: "registry:ui",
    dependencies: ["motion","@radix-ui/react-tooltip"],
    registryDependencies: undefined,
    files: [
  {
    "path": "registry/radix/tooltip.tsx",
    "type": "registry:ui",
    "target": "components/animate-ui/radix-tooltip.tsx",
    "content": "'use client';\n\nimport * as React from 'react';\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip';\nimport { AnimatePresence, motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\nconst TooltipProvider = TooltipPrimitive.Provider;\n\nconst TooltipContext = React.createContext<{ isOpen: boolean }>({\n  isOpen: false,\n});\n\nconst Tooltip: React.FC<\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Root>\n> = ({ children, ...props }) => {\n  const [isOpen, setIsOpen] = React.useState(\n    props?.open ?? props?.defaultOpen ?? false,\n  );\n\n  const handleOpenChange = React.useCallback(\n    (open: boolean) => {\n      setIsOpen(open);\n      props.onOpenChange?.(open);\n    },\n    [props.onOpenChange],\n  );\n\n  return (\n    <TooltipContext.Provider value={{ isOpen }}>\n      <TooltipPrimitive.Root onOpenChange={handleOpenChange} {...props}>\n        {children}\n      </TooltipPrimitive.Root>\n    </TooltipContext.Provider>\n  );\n};\n\nconst TooltipTrigger = TooltipPrimitive.Trigger;\n\nconst TooltipContent = React.forwardRef<\n  React.ComponentRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, children, ...props }, ref) => {\n  const { isOpen } = React.useContext(TooltipContext);\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <TooltipPrimitive.Portal forceMount>\n          <TooltipPrimitive.Content\n            forceMount\n            sideOffset={sideOffset}\n            className=\"z-50\"\n            {...props}\n            ref={ref}\n          >\n            <motion.div\n              key=\"tooltip\"\n              initial={{ opacity: 0, scale: 0, y: 25 }}\n              animate={{ opacity: 1, scale: 1, y: 0 }}\n              exit={{ opacity: 0, scale: 0, y: 25 }}\n              transition={{ type: 'spring', stiffness: 300, damping: 20 }}\n              className={cn(\n                'relative overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md',\n                className,\n              )}\n            >\n              {children}\n            </motion.div>\n          </TooltipPrimitive.Content>\n        </TooltipPrimitive.Portal>\n      )}\n    </AnimatePresence>\n  );\n});\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/radix/tooltip.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/radix-tooltip',
    meta: undefined,
  },
  "radix-tooltip-demo": {
    name: "radix-tooltip-demo",
    description: "Demo showing an animated radix tooltip.",
    type: "registry:example",
    dependencies: undefined,
    registryDependencies: ["https://animate-ui.com/r/radix-tooltip"],
    files: [
  {
    "path": "registry/demo/radix/tooltip-demo.tsx",
    "type": "registry:example",
    "target": "components/animate-ui/radix-tooltip-demo.tsx",
    "content": "import { Button } from '@/components/ui/button';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/registry/radix/tooltip';\n\nexport const TooltipDemo = () => {\n  return (\n    <TooltipProvider>\n      <Tooltip defaultOpen>\n        <TooltipTrigger asChild>\n          <Button variant=\"neutral\">Hover</Button>\n        </TooltipTrigger>\n        <TooltipContent>\n          <p>Add to library</p>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n};"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/demo/radix/tooltip-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/radix-tooltip-demo',
    meta: undefined,
  },
  "counter": {
    name: "counter",
    description: "Counter component",
    type: "registry:ui",
    dependencies: ["motion"],
    registryDependencies: ["button","https://animate-ui.com/r/sliding-number"],
    files: [
  {
    "path": "registry/components/counter.tsx",
    "type": "registry:ui",
    "target": "components/animate-ui/counter.tsx",
    "content": "'use client';\n\nimport * as React from 'react';\nimport { type HTMLMotionProps, motion } from 'motion/react';\n\nimport {\n  SlidingNumber,\n  type SlidingNumberProps,\n} from '@/components/animate-ui/sliding-number';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\ninterface CounterProps extends HTMLMotionProps<'div'> {\n  number: number;\n  setNumber: (number: number) => void;\n  slidingNumberProps?: Omit<SlidingNumberProps, 'number'>;\n  buttonProps?: Omit<React.ComponentProps<typeof Button>, 'onClick'>;\n}\n\nconst Counter = React.forwardRef<HTMLDivElement, CounterProps>(\n  (\n    { number, setNumber, className, slidingNumberProps, buttonProps, ...props },\n    ref,\n  ) => {\n    return (\n      <motion.div\n        ref={ref}\n        layout\n        transition={{\n          type: 'spring',\n          bounce: 0,\n          stiffness: 300,\n          damping: 30,\n        }}\n        className={cn(\n          'flex items-center gap-x-2 p-1 rounded-lg bg-neutral-100 dark:bg-neutral-800',\n          className,\n        )}\n        {...props}\n      >\n        <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n          <Button\n            size=\"icon\"\n            {...buttonProps}\n            onClick={() => setNumber(number - 1)}\n            className={cn(\n              'bg-white dark:bg-neutral-950 hover:bg-white/70 dark:hover:bg-neutral-950/70 text-neutral-950 dark:text-white text-2xl font-light pb-[3px]',\n              buttonProps?.className,\n            )}\n          >\n            -\n          </Button>\n        </motion.div>\n\n        <SlidingNumber\n          number={number}\n          {...slidingNumberProps}\n          className={cn('text-lg', slidingNumberProps?.className)}\n        />\n\n        <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n          <Button\n            size=\"icon\"\n            {...buttonProps}\n            onClick={() => setNumber(number + 1)}\n            className={cn(\n              'bg-white dark:bg-neutral-950 hover:bg-white/70 dark:hover:bg-neutral-950/70 text-neutral-950 dark:text-white text-2xl font-light pb-[3px]',\n              buttonProps?.className,\n            )}\n          >\n            +\n          </Button>\n        </motion.div>\n      </motion.div>\n    );\n  },\n);\nCounter.displayName = 'Counter';\n\nexport { Counter, type CounterProps };"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/components/counter.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/counter',
    meta: undefined,
  },
  "counter-demo": {
    name: "counter-demo",
    description: "Demo showing an animated counter.",
    type: "registry:example",
    dependencies: undefined,
    registryDependencies: ["https://animate-ui.com/r/counter"],
    files: [
  {
    "path": "registry/demo/components/counter-demo.tsx",
    "type": "registry:example",
    "target": "components/animate-ui/counter-demo.tsx",
    "content": "'use client';\n\nimport * as React from 'react';\n\nimport { Counter } from '@/registry/components/counter';\n\nexport const CounterDemo = () => {\n  const [number, setNumber] = React.useState(100);\n\n  return <Counter number={number} setNumber={setNumber} />;\n};"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/demo/components/counter-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/counter-demo',
    meta: undefined,
  },
  "radix-accordion": {
    name: "radix-accordion",
    description: "Radix UI accordion component",
    type: "registry:ui",
    dependencies: ["motion","@radix-ui/react-accordion"],
    registryDependencies: undefined,
    files: [
  {
    "path": "registry/radix/accordion.tsx",
    "type": "registry:ui",
    "target": "components/animate-ui/radix-accordion.tsx",
    "content": "'use client';\n\nimport * as React from 'react';\nimport * as AccordionPrimitive from '@radix-ui/react-accordion';\nimport { ChevronDown } from 'lucide-react';\nimport { motion, AnimatePresence } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ninterface AccordionItemContextValue {\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n}\n\nconst AccordionItemContext = React.createContext<\n  AccordionItemContextValue | undefined\n>(undefined);\n\nconst Accordion = AccordionPrimitive.Root;\n\nconst AccordionItem = React.forwardRef<\n  React.ComponentRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item> & {\n    children: React.ReactNode;\n  }\n>(({ className, children, ...props }, ref) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  return (\n    <AccordionPrimitive.Item\n      ref={ref}\n      className={cn('border-b', className)}\n      {...props}\n    >\n      <AccordionItemContext.Provider value={{ isOpen, setIsOpen }}>\n        {children}\n      </AccordionItemContext.Provider>\n    </AccordionPrimitive.Item>\n  );\n});\nAccordionItem.displayName = 'AccordionItem';\n\nconst AccordionTrigger = React.forwardRef<\n  React.ComponentRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => {\n  const triggerRef = React.useRef<HTMLButtonElement | null>(null);\n  const context = React.useContext(AccordionItemContext);\n\n  if (!context) {\n    throw new Error('AccordionTrigger must be used within an AccordionItem');\n  }\n\n  React.useEffect(() => {\n    const node = triggerRef.current;\n    if (!node) return;\n\n    const observer = new MutationObserver((mutationsList) => {\n      mutationsList.forEach((mutation) => {\n        if (mutation.attributeName === 'data-state') {\n          const currentState = node.getAttribute('data-state');\n          context.setIsOpen(currentState === 'open');\n        }\n      });\n    });\n    observer.observe(node, {\n      attributes: true,\n      attributeFilter: ['data-state'],\n    });\n    const initialState = node.getAttribute('data-state');\n    context.setIsOpen(initialState === 'open');\n    return () => {\n      observer.disconnect();\n    };\n  }, [context]);\n\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        ref={(node) => {\n          triggerRef.current = node;\n          if (typeof ref === 'function') {\n            ref(node);\n          } else if (ref) {\n            (ref as React.RefObject<HTMLButtonElement | null>).current = node;\n          }\n        }}\n        className={cn(\n          'flex flex-1 items-center justify-between py-4 font-medium hover:underline',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <motion.div\n          animate={{ rotate: context.isOpen ? 180 : 0 }}\n          transition={{ type: 'spring', stiffness: 150, damping: 17 }}\n        >\n          <ChevronDown className=\"size-5 shrink-0\" />\n        </motion.div>\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  );\n});\nAccordionTrigger.displayName = 'AccordionTrigger';\n\nconst AccordionContent = React.forwardRef<\n  React.ComponentRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => {\n  const context = React.useContext(AccordionItemContext);\n\n  if (!context) {\n    throw new Error('AccordionContent must be used within an AccordionItem');\n  }\n\n  return (\n    <AnimatePresence>\n      {context.isOpen && (\n        <AccordionPrimitive.Content forceMount {...props}>\n          <motion.div\n            key=\"accordion-content\"\n            initial={{ height: 0, opacity: 0, '--mask-stop': '0%' }}\n            animate={{ height: 'auto', opacity: 1, '--mask-stop': '100%' }}\n            exit={{ height: 0, opacity: 0, '--mask-stop': '0%' }}\n            transition={{ type: 'spring', stiffness: 150, damping: 17 }}\n            style={{\n              maskImage:\n                'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n              WebkitMaskImage:\n                'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n            }}\n            className={cn('overflow-hidden text-sm', className)}\n            ref={ref}\n          >\n            <div className=\"pb-4 pt-0\">{children}</div>\n          </motion.div>\n        </AccordionPrimitive.Content>\n      )}\n    </AnimatePresence>\n  );\n});\nAccordionContent.displayName = 'AccordionContent';\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/radix/accordion.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/radix-accordion',
    meta: undefined,
  },
  "radix-accordion-demo": {
    name: "radix-accordion-demo",
    description: "Demo showing an animated radix accordion.",
    type: "registry:example",
    dependencies: undefined,
    registryDependencies: ["https://animate-ui.com/r/radix-accordion"],
    files: [
  {
    "path": "registry/demo/radix/accordion-demo.tsx",
    "type": "registry:example",
    "target": "components/animate-ui/radix-accordion-demo.tsx",
    "content": "import { Button } from '@/components/ui/button';\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionTrigger,\n  AccordionContent,\n} from '@/registry/radix/accordion';\n\nexport const AccordionDemo = () => {\n  return (\n    <Accordion\n      type=\"single\"\n      defaultValue=\"item-1\"\n      collapsible\n      className=\"w-[400px]\"\n    >\n      <AccordionItem value=\"item-1\">\n        <AccordionTrigger>What is Animate UI?</AccordionTrigger>\n        <AccordionContent>\n          Animate UI is an open-source distribution of React components built\n          with TypeScript, Tailwind CSS, and Motion.\n        </AccordionContent>\n      </AccordionItem>\n\n      <AccordionItem value=\"item-2\">\n        <AccordionTrigger>\n          How is it different from other libraries?\n        </AccordionTrigger>\n        <AccordionContent>\n          Instead of installing via NPM, you copy and paste the components\n          directly. This gives you full control to modify or customize them as\n          needed.\n        </AccordionContent>\n      </AccordionItem>\n\n      <AccordionItem value=\"item-3\">\n        <AccordionTrigger>Is Animate UI free to use?</AccordionTrigger>\n        <AccordionContent>\n          Absolutely! Animate UI is fully open-source. You can use, modify, and\n          adapt it to fit your needs.\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n  );\n};"
  }
],
    component: React.lazy(async () => {
      const mod = await import("@/registry/demo/radix/accordion-demo.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    command: 'https://animate-ui.com/r/radix-accordion-demo',
    meta: undefined,
  },
  }