/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from 'react';

export const index: Record<string, any> = {
  index: {
    name: 'index',
    description: '',
    type: 'registry:style',
    dependencies: [
      'tailwindcss-animate',
      'class-variance-authority',
      'lucide-react',
    ],
    devDependencies: undefined,
    registryDependencies: ['utils'],
    files: [],
    component: null,
    command: 'https://animate-ui.com/r/index',
  },
  'bubble-background': {
    name: 'bubble-background',
    description: 'Bubble background component',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/backgrounds/bubble-background/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/bubble-background.tsx',
        content:
          '\'use client\';\n\nimport * as React from \'react\';\nimport {\n  motion,\n  type SpringOptions,\n  useMotionValue,\n  useSpring,\n} from \'motion/react\';\n\nimport { cn } from \'@/lib/utils\';\n\ninterface BubbleBackgroundProps extends React.HTMLAttributes<HTMLDivElement> {\n  interactive?: boolean;\n  transition?: SpringOptions;\n  colors?: {\n    first: string;\n    second: string;\n    third: string;\n    fourth: string;\n    fifth: string;\n    sixth: string;\n  };\n}\n\nconst BubbleBackground = React.forwardRef<\n  HTMLDivElement,\n  BubbleBackgroundProps\n>(\n  (\n    {\n      className,\n      children,\n      interactive = false,\n      transition = { stiffness: 100, damping: 20 },\n      colors = {\n        first: \'18,113,255\',\n        second: \'221,74,255\',\n        third: \'0,220,255\',\n        fourth: \'200,50,50\',\n        fifth: \'180,180,50\',\n        sixth: \'140,100,255\',\n      },\n      ...props\n    },\n    ref,\n  ) => {\n    const containerRef = React.useRef<HTMLDivElement>(null);\n    React.useImperativeHandle(\n      ref,\n      () => containerRef.current as HTMLDivElement,\n    );\n\n    const mouseX = useMotionValue(0);\n    const mouseY = useMotionValue(0);\n    const springX = useSpring(mouseX, transition);\n    const springY = useSpring(mouseY, transition);\n\n    React.useEffect(() => {\n      if (!interactive) return;\n\n      const currentContainer = containerRef.current;\n      if (!currentContainer) return;\n\n      const handleMouseMove = (e: MouseEvent) => {\n        const rect = currentContainer.getBoundingClientRect();\n        const centerX = rect.left + rect.width / 2;\n        const centerY = rect.top + rect.height / 2;\n        mouseX.set(e.clientX - centerX);\n        mouseY.set(e.clientY - centerY);\n      };\n\n      currentContainer?.addEventListener(\'mousemove\', handleMouseMove);\n      return () =>\n        currentContainer?.removeEventListener(\'mousemove\', handleMouseMove);\n    }, [interactive, mouseX, mouseY]);\n\n    return (\n      <div\n        ref={containerRef}\n        className={cn(\n          \'relative w-full h-full overflow-hidden bg-gradient-to-br from-violet-900 to-blue-900\',\n          className,\n        )}\n        {...props}\n      >\n        <style>\n          {`\n            :root {\n              --first-color: ${colors.first};\n              --second-color: ${colors.second};\n              --third-color: ${colors.third};\n              --fourth-color: ${colors.fourth};\n              --fifth-color: ${colors.fifth};\n              --sixth-color: ${colors.sixth};\n            }\n          `}\n        </style>\n\n        <svg\n          xmlns="http://www.w3.org/2000/svg"\n          className="absolute top-0 left-0 w-0 h-0"\n        >\n          <defs>\n            <filter id="goo">\n              <feGaussianBlur\n                in="SourceGraphic"\n                stdDeviation="10"\n                result="blur"\n              />\n              <feColorMatrix\n                in="blur"\n                mode="matrix"\n                values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -8"\n                result="goo"\n              />\n              <feBlend in="SourceGraphic" in2="goo" />\n            </filter>\n          </defs>\n        </svg>\n\n        <div\n          className="absolute inset-0"\n          style={{ filter: \'url(#goo) blur(40px)\' }}\n        >\n          <motion.div\n            className="absolute rounded-full size-[80%] top-[10%] left-[10%] mix-blend-hard-light bg-[radial-gradient(circle_at_center,rgba(var(--first-color),0.8)_0%,rgba(var(--first-color),0)_50%)]"\n            animate={{ y: [-50, 50, -50] }}\n            transition={{ duration: 30, ease: \'easeInOut\', repeat: Infinity }}\n          />\n\n          <motion.div\n            className="absolute inset-0 flex justify-center items-center origin-[calc(50%-400px)]"\n            animate={{ rotate: 360 }}\n            transition={{\n              duration: 20,\n              ease: \'linear\',\n              repeat: Infinity,\n              repeatType: \'loop\',\n              reverse: true,\n            }}\n          >\n            <div className="rounded-full size-[80%] top-[10%] left-[10%] mix-blend-hard-light bg-[radial-gradient(circle_at_center,rgba(var(--second-color),0.8)_0%,rgba(var(--second-color),0)_50%)]" />\n          </motion.div>\n\n          <motion.div\n            className="absolute inset-0 flex justify-center items-center origin-[calc(50%+400px)]"\n            animate={{ rotate: 360 }}\n            transition={{ duration: 40, ease: \'linear\', repeat: Infinity }}\n          >\n            <div className="absolute rounded-full size-[80%] bg-[radial-gradient(circle_at_center,rgba(var(--third-color),0.8)_0%,rgba(var(--third-color),0)_50%)] mix-blend-hard-light top-[calc(50%+200px)] left-[calc(50%-500px)]" />\n          </motion.div>\n\n          <motion.div\n            className="absolute rounded-full size-[80%] top-[10%] left-[10%] mix-blend-hard-light bg-[radial-gradient(circle_at_center,rgba(var(--fourth-color),0.8)_0%,rgba(var(--fourth-color),0)_50%)] opacity-70"\n            animate={{ x: [-50, 50, -50] }}\n            transition={{ duration: 40, ease: \'easeInOut\', repeat: Infinity }}\n          />\n\n          <motion.div\n            className="absolute inset-0 flex justify-center items-center origin-[calc(50%_-_800px)_calc(50%_+_200px)]"\n            animate={{ rotate: 360 }}\n            transition={{ duration: 20, ease: \'linear\', repeat: Infinity }}\n          >\n            <div className="absolute rounded-full size-[160%] mix-blend-hard-light bg-[radial-gradient(circle_at_center,rgba(var(--fifth-color),0.8)_0%,rgba(var(--fifth-color),0)_50%)] top-[calc(50%-80%)] left-[calc(50%-80%)]" />\n          </motion.div>\n\n          {interactive && (\n            <motion.div\n              className="absolute rounded-full size-full mix-blend-hard-light bg-[radial-gradient(circle_at_center,rgba(var(--sixth-color),0.8)_0%,rgba(var(--sixth-color),0)_50%)] opacity-70"\n              style={{\n                x: springX,\n                y: springY,\n              }}\n            />\n          )}\n        </div>\n\n        {children}\n      </div>\n    );\n  },\n);\n\nBubbleBackground.displayName = \'BubbleBackground\';\n\nexport { BubbleBackground, type BubbleBackgroundProps };',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/backgrounds/bubble-background/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/bubble-background',
  },
  'gradient-background': {
    name: 'gradient-background',
    description: 'Gradient background component',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/backgrounds/gradient-background/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/gradient-background.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { HTMLMotionProps, motion, type Transition } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ninterface GradientBackgroundProps extends HTMLMotionProps<'div'> {\n  transition?: Transition;\n}\n\nconst GradientBackground = React.forwardRef<\n  HTMLDivElement,\n  GradientBackgroundProps\n>(\n  (\n    {\n      className,\n      transition = { duration: 15, ease: 'easeInOut', repeat: Infinity },\n      ...props\n    },\n    ref,\n  ) => {\n    return (\n      <motion.div\n        ref={ref}\n        className={cn(\n          'w-full h-full bg-gradient-to-br from-blue-500 via-purple-500 to-pink-500 bg-[length:400%_400%]',\n          className,\n        )}\n        animate={{\n          backgroundPosition: ['0% 50%', '100% 50%', '0% 50%'],\n        }}\n        transition={transition}\n        {...props}\n      />\n    );\n  },\n);\n\nGradientBackground.displayName = 'GradientBackground';\n\nexport { GradientBackground, type GradientBackgroundProps };",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/backgrounds/gradient-background/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/gradient-background',
  },
  'stars-background': {
    name: 'stars-background',
    description: 'Stars background component',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/backgrounds/stars-background/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/stars-background.tsx',
        content:
          "'use client';\n\nimport { motion, SpringOptions, useMotionValue, useSpring } from 'motion/react';\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\ninterface StarLayerProps {\n  count: number;\n  size: number;\n  duration: number;\n}\n\nconst seededRandom = (seed: number) => {\n  const x = Math.sin(seed++) * 10000;\n  return x - Math.floor(x);\n};\n\nconst generateStars = (count: number, size: number, seed: number) => {\n  const shadows: string[] = [];\n  for (let i = 0; i < count; i++) {\n    const x = Math.floor(seededRandom(seed + i) * 4000) - 2000;\n    const y = Math.floor(seededRandom(seed + i + 1000) * 4000) - 2000;\n    shadows.push(`${x}px ${y}px #000`);\n  }\n  return shadows.join(', ');\n};\n\nconst StarLayer = ({ count, size, duration }: StarLayerProps) => {\n  const boxShadow = React.useMemo(\n    () => generateStars(count, size, 0),\n    [count, size],\n  );\n\n  return (\n    <motion.div\n      animate={{ y: [0, -2000] }}\n      transition={{ repeat: Infinity, duration: duration, ease: 'linear' }}\n      className=\"absolute top-0 left-0 w-full h-[2000px]\"\n    >\n      <div\n        className=\"absolute bg-transparent rounded-full\"\n        style={{\n          width: `${size}px`,\n          height: `${size}px`,\n          boxShadow: boxShadow,\n        }}\n      />\n      <div\n        className=\"absolute bg-transparent rounded-full top-[2000px]\"\n        style={{\n          width: `${size}px`,\n          height: `${size}px`,\n          boxShadow: boxShadow,\n        }}\n      />\n    </motion.div>\n  );\n};\n\ninterface StarsBackgroundProps extends React.HTMLAttributes<HTMLDivElement> {\n  factor?: number;\n  speed?: number;\n  transition?: SpringOptions;\n}\n\nconst StarsBackground = React.forwardRef<HTMLDivElement, StarsBackgroundProps>(\n  (\n    {\n      children,\n      className,\n      factor = 0.05,\n      speed = 50,\n      transition = { stiffness: 50, damping: 20 },\n      ...props\n    },\n    ref,\n  ) => {\n    const offsetX = useMotionValue(1);\n    const offsetY = useMotionValue(1);\n\n    const springX = useSpring(offsetX, transition);\n    const springY = useSpring(offsetY, transition);\n\n    const handleMouseMove = React.useCallback(\n      (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        const centerX = window.innerWidth / 2;\n        const centerY = window.innerHeight / 2;\n        const newOffsetX = -(e.clientX - centerX) * factor;\n        const newOffsetY = -(e.clientY - centerY) * factor;\n        offsetX.set(newOffsetX);\n        offsetY.set(newOffsetY);\n      },\n      [offsetX, offsetY, factor],\n    );\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'relative overflow-hidden bg-[radial-gradient(ellipse_at_bottom,_#262626_0%,_#000_100%)]',\n          className,\n        )}\n        onMouseMove={handleMouseMove}\n        {...props}\n      >\n        <motion.div style={{ x: springX, y: springY }}>\n          <StarLayer count={1000} size={1} duration={speed} />\n          <StarLayer count={400} size={2} duration={speed * 2} />\n          <StarLayer count={200} size={3} duration={speed * 3} />\n        </motion.div>\n        {children}\n      </div>\n    );\n  },\n);\n\nStarsBackground.displayName = 'StarsBackground';\n\nexport { StarsBackground, type StarsBackgroundProps };",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/backgrounds/stars-background/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/stars-background',
  },
  'flip-button': {
    name: 'flip-button',
    description: 'A flip button component',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/buttons/flip-button/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/flip-button.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport {\n  type HTMLMotionProps,\n  type Transition,\n  type Variant,\n  motion,\n} from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ntype FlipDirection = 'top' | 'bottom' | 'left' | 'right';\n\ninterface FlipButtonProps extends HTMLMotionProps<'button'> {\n  frontText: string;\n  backText: string;\n  transition?: Transition;\n  frontClassName?: string;\n  backClassName?: string;\n  from?: FlipDirection;\n}\n\nconst defaultSpanClassName =\n  'absolute inset-0 flex items-center justify-center rounded-lg';\n\nconst FlipButton = React.forwardRef<HTMLButtonElement, FlipButtonProps>(\n  (\n    {\n      frontText,\n      backText,\n      transition = { type: 'spring', stiffness: 280, damping: 20 },\n      className,\n      frontClassName,\n      backClassName,\n      from = 'top',\n      ...props\n    },\n    ref,\n  ) => {\n    const isVertical = from === 'top' || from === 'bottom';\n    const rotateAxis = isVertical ? 'rotateX' : 'rotateY';\n\n    const frontOffset = from === 'top' || from === 'left' ? '50%' : '-50%';\n    const backOffset = from === 'top' || from === 'left' ? '-50%' : '50%';\n\n    const buildVariant = (\n      opacity: number,\n      rotation: number,\n      offset: string | null = null,\n    ): Variant => ({\n      opacity,\n      [rotateAxis]: rotation,\n      ...(isVertical && offset !== null ? { y: offset } : {}),\n      ...(!isVertical && offset !== null ? { x: offset } : {}),\n    });\n\n    const frontVariants = {\n      initial: buildVariant(1, 0, '0%'),\n      hover: buildVariant(0, 90, frontOffset),\n    };\n\n    const backVariants = {\n      initial: buildVariant(0, 90, backOffset),\n      hover: buildVariant(1, 0, '0%'),\n    };\n\n    return (\n      <motion.button\n        ref={ref}\n        initial=\"initial\"\n        whileHover=\"hover\"\n        whileTap={{ scale: 0.95 }}\n        className={cn(\n          'relative inline-block h-10 px-4 py-2 text-sm font-medium cursor-pointer perspective-[1000px] focus:outline-none',\n          className,\n        )}\n        {...props}\n      >\n        <motion.span\n          variants={frontVariants}\n          transition={transition}\n          className={cn(\n            defaultSpanClassName,\n            'bg-neutral-100 text-neutral-800 dark:bg-neutral-800 dark:text-white',\n            frontClassName,\n          )}\n        >\n          {frontText}\n        </motion.span>\n        <motion.span\n          variants={backVariants}\n          transition={transition}\n          className={cn(\n            defaultSpanClassName,\n            'bg-neutral-800 text-white dark:bg-white dark:text-neutral-800',\n            backClassName,\n          )}\n        >\n          {backText}\n        </motion.span>\n        <span className=\"invisible\">{frontText}</span>\n      </motion.button>\n    );\n  },\n);\n\nFlipButton.displayName = 'FlipButton';\n\nexport { FlipButton, type FlipButtonProps, type FlipDirection };",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/buttons/flip-button/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/flip-button',
  },
  'liquid-button': {
    name: 'liquid-button',
    description: 'A liquid button component',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/buttons/liquid-button/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/liquid-button.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, HTMLMotionProps } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ntype LiquidButtonProps = HTMLMotionProps<'button'>;\n\nconst LiquidButton = React.forwardRef<HTMLButtonElement, LiquidButtonProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <motion.button\n        whileTap={{ scale: 0.95 }}\n        whileHover={{ scale: 1.05 }}\n        className={cn(\n          'relative h-10 px-4 py-2 text-sm font-medium text-primary hover:text-primary-foreground !bg-muted [--liquid-button-color:var(--primary)] rounded-lg cursor-pointer overflow-hidden [background:_linear-gradient(var(--liquid-button-color)_0_0)_no-repeat_calc(200%-var(--liquid-button-fill,0%))_100%/200%_var(--liquid-button-fill,0.2em)] hover:[--liquid-button-fill:100%] hover:[--liquid-button-delay:0.3s] [transition:_background_0.3s_var(--liquid-button-delay,0s),_color_0.3s_var(--liquid-button-delay,0s),_background-position_0.3s_calc(0.3s_-_var(--liquid-button-delay,0s))] focus:outline-none',\n          className,\n        )}\n        {...props}\n        ref={ref}\n      />\n    );\n  },\n);\n\nLiquidButton.displayName = 'LiquidButton';\n\nexport { LiquidButton, type LiquidButtonProps };",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/buttons/liquid-button/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/liquid-button',
  },
  'ripple-button': {
    name: 'ripple-button',
    description: 'A ripple button component',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/buttons/ripple-button/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/ripple-button.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { type HTMLMotionProps, motion, type Transition } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ninterface Ripple {\n  id: number;\n  x: number;\n  y: number;\n}\n\ninterface RippleButtonProps extends HTMLMotionProps<'button'> {\n  children: React.ReactNode;\n  rippleClassName?: string;\n  scale?: number;\n  transition?: Transition;\n}\n\nconst RippleButton = React.forwardRef<HTMLButtonElement, RippleButtonProps>(\n  (\n    {\n      children,\n      onClick,\n      className,\n      rippleClassName,\n      scale = 10,\n      transition = { duration: 0.6, ease: 'easeOut' },\n      ...props\n    },\n    ref,\n  ) => {\n    const [ripples, setRipples] = React.useState<Ripple[]>([]);\n    const buttonRef = React.useRef<HTMLButtonElement>(null);\n    React.useImperativeHandle(\n      ref,\n      () => buttonRef.current as HTMLButtonElement,\n    );\n\n    const createRipple = React.useCallback(\n      (event: React.MouseEvent<HTMLButtonElement>) => {\n        const button = buttonRef.current;\n        if (!button) return;\n\n        const rect = button.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n\n        const newRipple: Ripple = {\n          id: Date.now(),\n          x,\n          y,\n        };\n\n        setRipples((prev) => [...prev, newRipple]);\n\n        setTimeout(() => {\n          setRipples((prev) => prev.filter((r) => r.id !== newRipple.id));\n        }, 600);\n      },\n      [],\n    );\n\n    const handleClick = React.useCallback(\n      (event: React.MouseEvent<HTMLButtonElement>) => {\n        createRipple(event);\n        if (onClick) {\n          onClick(event);\n        }\n      },\n      [createRipple, onClick],\n    );\n\n    return (\n      <motion.button\n        ref={buttonRef}\n        onClick={handleClick}\n        whileTap={{ scale: 0.95 }}\n        whileHover={{ scale: 1.05 }}\n        className={cn(\n          'relative h-10 px-4 py-2 text-sm font-medium text-primary-foreground overflow-hidden bg-primary cursor-pointer rounded-lg focus:outline-none',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        {ripples.map((ripple) => (\n          <motion.span\n            key={ripple.id}\n            initial={{ scale: 0, opacity: 0.5 }}\n            animate={{ scale, opacity: 0 }}\n            transition={transition}\n            className={cn(\n              'absolute bg-white dark:bg-neutral-800 rounded-full size-5 pointer-events-none',\n              rippleClassName,\n            )}\n            style={{\n              top: ripple.y - 10,\n              left: ripple.x - 10,\n            }}\n          />\n        ))}\n      </motion.button>\n    );\n  },\n);\n\nRippleButton.displayName = 'RippleButton';\n\nexport { RippleButton, type RippleButtonProps };",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/buttons/ripple-button/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/ripple-button',
  },
  'cards-hover': {
    name: 'cards-hover',
    description: 'Cards hover component',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/components/cards-hover/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/cards-hover.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { AnimatePresence, motion, Transition } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\nconst EXIT_DELAY = 0.3;\n\ninterface CardsHoverContextValue {\n  activeValue: string | null;\n  setActiveValue: (value: string | null) => void;\n  scheduleReset: () => void;\n  clearReset: () => void;\n}\n\nconst CardsHoverContext = React.createContext<\n  CardsHoverContextValue | undefined\n>(undefined);\n\ninterface CardsHoverProps\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'value' | 'defaultValue'> {\n  value?: string | null;\n  defaultValue?: string | null;\n  onValueChange?: (value: string | null) => void;\n}\n\nconst CardsHover = React.forwardRef<HTMLDivElement, CardsHoverProps>(\n  ({ value, defaultValue, onValueChange, className, ...props }, ref) => {\n    const [activeValue, setActiveValueState] = React.useState<string | null>(\n      value ?? defaultValue ?? null,\n    );\n\n    const exitTimeoutRef = React.useRef<ReturnType<typeof setTimeout> | null>(\n      null,\n    );\n\n    const scheduleReset = React.useCallback(() => {\n      if (exitTimeoutRef.current) {\n        clearTimeout(exitTimeoutRef.current);\n      }\n      exitTimeoutRef.current = setTimeout(() => {\n        setActiveValueState(null);\n        exitTimeoutRef.current = null;\n        onValueChange?.(null);\n      }, EXIT_DELAY * 1000);\n    }, [onValueChange]);\n\n    const clearReset = React.useCallback(() => {\n      if (exitTimeoutRef.current) {\n        clearTimeout(exitTimeoutRef.current);\n        exitTimeoutRef.current = null;\n      }\n    }, []);\n\n    React.useEffect(() => {\n      return () => {\n        if (exitTimeoutRef.current) {\n          clearTimeout(exitTimeoutRef.current);\n        }\n      };\n    }, []);\n\n    React.useEffect(() => {\n      if (value !== undefined) {\n        setActiveValueState(value);\n      }\n    }, [value]);\n\n    const setActiveValue = (val: string | null) => {\n      clearReset();\n      setActiveValueState(val);\n      onValueChange?.(val);\n    };\n\n    const contextValue = {\n      activeValue,\n      setActiveValue,\n      scheduleReset,\n      clearReset,\n    };\n\n    return (\n      <CardsHoverContext.Provider value={contextValue}>\n        <div\n          ref={ref}\n          className={cn(\n            'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4',\n            className,\n          )}\n          {...props}\n        />\n      </CardsHoverContext.Provider>\n    );\n  },\n);\n\ninterface CardHoverProps extends React.HTMLAttributes<HTMLDivElement> {\n  value: string;\n  transition?: Transition;\n}\n\nconst CardHover = React.forwardRef<HTMLDivElement, CardHoverProps>(\n  (\n    {\n      value,\n      className,\n      transition = { type: 'spring', stiffness: 200, damping: 20 },\n      ...props\n    },\n    ref,\n  ) => {\n    const { activeValue, setActiveValue, scheduleReset, clearReset } =\n      React.useContext(CardsHoverContext)!;\n\n    const handleMouseEnter = (e: React.MouseEvent<HTMLDivElement>) => {\n      clearReset();\n      setActiveValue(value);\n      props.onMouseEnter?.(e);\n    };\n\n    const handleMouseLeave = (e: React.MouseEvent<HTMLDivElement>) => {\n      scheduleReset();\n      props.onMouseLeave?.(e);\n    };\n\n    return (\n      <div\n        key={value}\n        className=\"relative block h-full w-full\"\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n      >\n        <AnimatePresence>\n          {activeValue === value && (\n            <motion.div\n              className=\"absolute inset-0 h-full w-full bg-neutral-100 dark:bg-neutral-900 rounded-lg\"\n              layoutId=\"hoverBackground\"\n              initial={{ opacity: 0 }}\n              animate={{\n                opacity: 1,\n                transition,\n              }}\n              exit={{\n                opacity: 0,\n                transition: {\n                  ...transition,\n                  delay: EXIT_DELAY + (transition?.delay ?? 0),\n                },\n              }}\n            />\n          )}\n        </AnimatePresence>\n        <div\n          ref={ref}\n          className={cn(\n            'h-full w-full p-4 overflow-hidden rounded-lg border relative z-20',\n            className,\n          )}\n          {...props}\n        />\n      </div>\n    );\n  },\n);\n\nexport { CardsHover, CardHover };",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/components/cards-hover/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/cards-hover',
  },
  'code-editor': {
    name: 'code-editor',
    description: 'Code editor component',
    type: 'registry:ui',
    dependencies: ['motion', 'react-syntax-highlighter'],
    devDependencies: ['@types/react-syntax-highlighter'],
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/components/code-editor/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/code-editor.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { motion, useInView } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ninterface CodeEditorProps extends React.HTMLAttributes<HTMLDivElement> {\n  code: string;\n  lang: string; // \"javascript\", \"tsx\", etc.\n  theme?: string; // \"vsc-dark-plus\", \"atom-dark\", etc.\n  duration?: number;\n  delay?: number;\n  showLineNumbers?: boolean;\n  header?: boolean;\n  cursor?: boolean;\n  startOnView?: boolean;\n}\n\nconst CodeEditor = React.forwardRef<HTMLDivElement, CodeEditorProps>(\n  (\n    {\n      code,\n      lang,\n      theme = 'atom-dark',\n      duration = 5,\n      delay = 0,\n      className,\n      showLineNumbers = false,\n      header = true,\n      cursor = false,\n      startOnView = false,\n      ...props\n    },\n    ref,\n  ) => {\n    const editorRef = React.useRef<HTMLDivElement>(null);\n    const [visibleCode, setVisibleCode] = React.useState('');\n    const [importsReady, setImportsReady] = React.useState(false);\n    const [highlighterTheme, setHighlighterTheme] = React.useState<\n      Record<string, React.CSSProperties>\n    >({});\n    const [isDone, setIsDone] = React.useState(false);\n\n    const inView = useInView(editorRef, { once: true });\n\n    React.useEffect(() => {\n      const loadLanguageAndTheme = async () => {\n        try {\n          const themeMod = await import(\n            `react-syntax-highlighter/dist/esm/styles/prism/${theme}`\n          );\n          setHighlighterTheme(themeMod.default);\n          const mod = await import(\n            `react-syntax-highlighter/dist/esm/languages/prism/${lang}`\n          );\n          SyntaxHighlighter.registerLanguage(lang, mod.default);\n          setHighlighterTheme(themeMod.default);\n          setImportsReady(true);\n        } catch (e) {\n          console.error(`Language \"${lang}\" could not be loaded.`, e);\n        }\n      };\n\n      loadLanguageAndTheme();\n    }, [lang, theme]);\n\n    React.useEffect(() => {\n      if (!importsReady || !code.length) return;\n      if (startOnView && !inView) return;\n\n      const characters = Array.from(code);\n      let index = 0;\n      const totalDuration = duration * 1000;\n      const interval = totalDuration / characters.length;\n      let intervalId: NodeJS.Timeout;\n\n      const timeout = setTimeout(() => {\n        intervalId = setInterval(() => {\n          if (index < characters.length) {\n            setVisibleCode((prev) => {\n              const currentIndex = index;\n              index += 1;\n              return prev + characters[currentIndex];\n            });\n            editorRef.current?.scrollTo({\n              top: editorRef.current?.scrollHeight,\n              behavior: 'smooth',\n            });\n          } else {\n            clearInterval(intervalId);\n            setIsDone(true);\n          }\n        }, interval);\n      }, delay * 1000);\n\n      return () => {\n        clearTimeout(timeout);\n        clearInterval(intervalId);\n      };\n    }, [code, duration, delay, importsReady, startOnView, inView]);\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'bg-neutral-900 w-[600px] h-[400px] border border-neutral-800 text-white overflow-hidden flex flex-col rounded-xl',\n          className,\n        )}\n        {...props}\n      >\n        {header && (\n          <div className=\"flex flex-col gap-y-2 p-4 border-b border-neutral-800\">\n            <div className=\"flex flex-row gap-x-2\">\n              <div className=\"size-2.5 rounded-full bg-red-500\"></div>\n              <div className=\"size-2.5 rounded-full bg-yellow-500\"></div>\n              <div className=\"size-2.5 rounded-full bg-green-500\"></div>\n            </div>\n          </div>\n        )}\n        <div\n          ref={editorRef}\n          className=\"size-full text-sm p-4 font-mono relative overflow-auto flex-1\"\n        >\n          {importsReady && (\n            <SyntaxHighlighter\n              showLineNumbers={showLineNumbers}\n              lineNumberStyle={{\n                minWidth: `${2 + String(code.split('\\n').length).length}ch`,\n              }}\n              codeTagProps={{ className: 'bg-transparent' }}\n              wrapLines\n              language={lang}\n              style={highlighterTheme}\n              customStyle={{\n                background: 'transparent',\n                padding: 0,\n                margin: 0,\n                border: 'none',\n                overflow: 'unset',\n              }}\n              CodeTag={(props) => (\n                <code {...props}>\n                  {props.children}\n                  {cursor && !isDone && (\n                    <motion.span\n                      className=\"inline-block w-[1ch] -translate-px\"\n                      initial={{ opacity: 1 }}\n                      animate={{ opacity: [1, 0] }}\n                      transition={{ duration: 0.7, repeat: Infinity }}\n                    >\n                      |\n                    </motion.span>\n                  )}\n                </code>\n              )}\n            >\n              {visibleCode}\n            </SyntaxHighlighter>\n          )}\n        </div>\n      </div>\n    );\n  },\n);\n\nCodeEditor.displayName = 'CodeEditor';\n\nexport { CodeEditor, type CodeEditorProps };",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/components/code-editor/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/code-editor',
  },
  counter: {
    name: 'counter',
    description: 'Counter component',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: ['button', 'https://animate-ui.com/r/sliding-number'],
    files: [
      {
        path: 'registry/components/counter/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/counter.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { type HTMLMotionProps, type Transition, motion } from 'motion/react';\n\nimport {\n  SlidingNumber,\n  type SlidingNumberProps,\n} from '@/components/animate-ui/sliding-number';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\ninterface CounterProps extends HTMLMotionProps<'div'> {\n  number: number;\n  setNumber: (number: number) => void;\n  slidingNumberProps?: Omit<SlidingNumberProps, 'number'>;\n  buttonProps?: Omit<React.ComponentProps<typeof Button>, 'onClick'>;\n  transition?: Transition;\n}\n\nconst Counter = React.forwardRef<HTMLDivElement, CounterProps>(\n  (\n    {\n      number,\n      setNumber,\n      className,\n      slidingNumberProps,\n      buttonProps,\n      transition = { type: 'spring', bounce: 0, stiffness: 300, damping: 30 },\n      ...props\n    },\n    ref,\n  ) => {\n    return (\n      <motion.div\n        ref={ref}\n        layout\n        transition={transition}\n        className={cn(\n          'flex items-center gap-x-2 p-1 rounded-lg bg-neutral-100 dark:bg-neutral-800',\n          className,\n        )}\n        {...props}\n      >\n        <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n          <Button\n            size=\"icon\"\n            {...buttonProps}\n            onClick={() => setNumber(number - 1)}\n            className={cn(\n              'bg-white dark:bg-neutral-950 hover:bg-white/70 dark:hover:bg-neutral-950/70 text-neutral-950 dark:text-white text-2xl font-light pb-[3px]',\n              buttonProps?.className,\n            )}\n          >\n            -\n          </Button>\n        </motion.div>\n\n        <SlidingNumber\n          number={number}\n          {...slidingNumberProps}\n          className={cn('text-lg', slidingNumberProps?.className)}\n        />\n\n        <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\n          <Button\n            size=\"icon\"\n            {...buttonProps}\n            onClick={() => setNumber(number + 1)}\n            className={cn(\n              'bg-white dark:bg-neutral-950 hover:bg-white/70 dark:hover:bg-neutral-950/70 text-neutral-950 dark:text-white text-2xl font-light pb-[3px]',\n              buttonProps?.className,\n            )}\n          >\n            +\n          </Button>\n        </motion.div>\n      </motion.div>\n    );\n  },\n);\nCounter.displayName = 'Counter';\n\nexport { Counter, type CounterProps };",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/components/counter/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/counter',
  },
  'install-tabs': {
    name: 'install-tabs',
    description: 'Install tabs component',
    type: 'registry:ui',
    dependencies: ['motion', 'shiki', 'next-themes', 'lucide-react'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/tabs'],
    files: [
      {
        path: 'registry/components/install-tabs/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/install-tabs.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { useTheme } from 'next-themes';\nimport { AnimatePresence, motion } from 'motion/react';\nimport { CheckIcon, CopyIcon } from 'lucide-react';\n\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n  TabsContents,\n  type TabsProps,\n} from '@/components/animate-ui/tabs';\nimport { cn } from '@/lib/utils';\n\ntype InstallTabsProps = {\n  commands: Record<string, string>;\n  lang?: string;\n  themes?: {\n    light: string;\n    dark: string;\n  };\n} & Omit<TabsProps, 'children'>;\n\nconst InstallTabs = React.forwardRef<HTMLDivElement, InstallTabsProps>(\n  (\n    {\n      commands,\n      lang = 'bash',\n      themes = {\n        light: 'github-light',\n        dark: 'github-dark',\n      },\n      className,\n      defaultValue,\n      value,\n      onValueChange,\n      ...props\n    },\n    ref,\n  ) => {\n    const { resolvedTheme } = useTheme();\n\n    const [highlightedCommands, setHighlightedCommands] = React.useState<\n      Record<string, string>\n    >({});\n    const [selectedCommand, setSelectedCommand] = React.useState<string>(\n      value ?? defaultValue ?? Object.keys(commands)[0],\n    );\n    const [isCopied, setIsCopied] = React.useState(false);\n\n    React.useEffect(() => {\n      async function loadHighlightedCode() {\n        try {\n          const { codeToHtml } = await import('shiki');\n          const newHighlightedCommands: Record<string, string> = {};\n\n          for (const [command, val] of Object.entries(commands)) {\n            const highlighted = await codeToHtml(val, {\n              lang,\n              themes: {\n                light: themes.light,\n                dark: themes.dark,\n              },\n              defaultColor: resolvedTheme === 'dark' ? 'dark' : 'light',\n            });\n\n            newHighlightedCommands[command] = highlighted;\n          }\n\n          setHighlightedCommands(newHighlightedCommands);\n        } catch (error) {\n          console.error('Error highlighting commands', error);\n          setHighlightedCommands(commands);\n        }\n      }\n      loadHighlightedCode();\n    }, [commands, resolvedTheme, lang, themes.light, themes.dark]);\n\n    return (\n      <Tabs\n        ref={ref}\n        className={cn(\n          'w-full gap-0 dark:bg-neutral-800 bg-neutral-200 rounded-lg border border-neutral-200 dark:border-neutral-800',\n          className,\n        )}\n        {...(props as Omit<\n          TabsProps,\n          'value' | 'defaultValue' | 'onValueChange'\n        >)}\n        value={selectedCommand}\n        onValueChange={(val) => {\n          setSelectedCommand(val);\n          onValueChange?.(val);\n        }}\n      >\n        <TabsList\n          className=\"w-full relative justify-between rounded-b-none h-9 dark:text-white text-black dark:bg-neutral-800 bg-neutral-200 py-0 px-4\"\n          activeClassName=\"rounded-none shadow-none bg-transparent after:content-[''] after:absolute after:inset-x-0 after:h-0.5 after:bottom-0 dark:after:bg-white after:bg-black after:rounded-t-full\"\n        >\n          <div className=\"flex gap-x-3 h-full\">\n            {Object.keys(highlightedCommands).map((command) => (\n              <TabsTrigger\n                key={command}\n                value={command}\n                className=\"dark:text-neutral-400 text-neutral-500 dark:data-[state=active]:text-white data-[state=active]:text-black px-0\"\n              >\n                {command}\n              </TabsTrigger>\n            ))}\n          </div>\n\n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            className=\"size-6 rounded-sm -mr-2.5 hover:bg-neutral-300 dark:hover:bg-neutral-700 transition-colors flex items-center justify-center\"\n            onClick={() => {\n              if (isCopied) return;\n              navigator.clipboard\n                .writeText(commands[selectedCommand])\n                .then(() => {\n                  setIsCopied(true);\n                  setTimeout(() => {\n                    setIsCopied(false);\n                  }, 3000);\n                })\n                .catch((error) => {\n                  console.error('Error copying command', error);\n                });\n            }}\n          >\n            <AnimatePresence mode=\"wait\">\n              {isCopied ? (\n                <motion.div\n                  key=\"check\"\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  exit={{ scale: 0 }}\n                  transition={{ duration: 0.15 }}\n                >\n                  <CheckIcon className=\"size-3.5\" />\n                </motion.div>\n              ) : (\n                <motion.div\n                  key=\"copy\"\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  exit={{ scale: 0 }}\n                  transition={{ duration: 0.15 }}\n                >\n                  <CopyIcon className=\"size-3.5\" />\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </motion.button>\n        </TabsList>\n        <TabsContents className=\"rounded-b-lg dark:bg-neutral-900 dark:text-white bg-neutral-100 text-black\">\n          {Object.entries(highlightedCommands).map(([command, val]) => (\n            <TabsContent\n              key={command}\n              className=\"h-12 w-full text-sm flex items-center px-4 overflow-auto\"\n              value={command}\n            >\n              <div\n                className=\"[&>pre,_&_code]:!bg-transparent [&>pre,_&_code]:[background:transparent_!important] [&>pre,_&_code]:border-none [&_code]:!text-sm\"\n                dangerouslySetInnerHTML={{ __html: val }}\n              />\n            </TabsContent>\n          ))}\n        </TabsContents>\n      </Tabs>\n    );\n  },\n);\n\nInstallTabs.displayName = 'InstallTabs';\n\nexport { InstallTabs, type InstallTabsProps };",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/components/install-tabs/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/install-tabs',
  },
  'scroll-progress': {
    name: 'scroll-progress',
    description: 'Scroll progress component',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/components/scroll-progress/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/scroll-progress.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport {\n  motion,\n  useScroll,\n  useSpring,\n  type HTMLMotionProps,\n} from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ninterface ScrollProgressProps extends React.HTMLAttributes<HTMLDivElement> {\n  progressProps?: HTMLMotionProps<'div'>;\n}\n\nconst ScrollProgress = React.forwardRef<HTMLDivElement, ScrollProgressProps>(\n  ({ className, children, progressProps, ...props }, ref) => {\n    const containerRef = React.useRef<HTMLDivElement | null>(null);\n    React.useImperativeHandle(\n      ref,\n      () => containerRef.current as HTMLDivElement,\n    );\n\n    const { scrollYProgress } = useScroll(\n      children ? { container: containerRef } : undefined,\n    );\n\n    const scaleX = useSpring(scrollYProgress, {\n      stiffness: 250,\n      damping: 40,\n      bounce: 0,\n    });\n\n    return (\n      <>\n        <motion.div\n          {...progressProps}\n          style={{ scaleX }}\n          className={cn(\n            'fixed z-50 top-0 inset-x-0 h-1 bg-blue-500 origin-left',\n            progressProps?.className,\n          )}\n        />\n        {containerRef && (\n          <div\n            ref={containerRef}\n            className={cn('overflow-y-auto h-full', className)}\n            {...props}\n          >\n            {children}\n          </div>\n        )}\n      </>\n    );\n  },\n);\n\nScrollProgress.displayName = 'ScrollProgress';\n\nexport { ScrollProgress, type ScrollProgressProps };",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/components/scroll-progress/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/scroll-progress',
  },
  tabs: {
    name: 'tabs',
    description: 'Tabs component',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/components/tabs/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/tabs.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, type Transition } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ninterface TabsContextProps {\n  activeValue: string;\n  handleValueChange: (value: string) => void;\n  registerTrigger: (value: string, node: HTMLElement | null) => void;\n  getTrigger: (value: string) => HTMLElement | null;\n}\n\nconst TabsContext = React.createContext<TabsContextProps | undefined>(\n  undefined,\n);\n\ntype TabsProps =\n  | {\n      defaultValue?: string;\n      children: React.ReactNode;\n      className?: string;\n      value?: never;\n      onValueChange?: never;\n    }\n  | {\n      value: string;\n      onValueChange?: (value: string) => void;\n      children: React.ReactNode;\n      className?: string;\n      defaultValue?: never;\n    };\n\nconst Tabs = React.forwardRef<HTMLDivElement, TabsProps>(\n  (\n    { defaultValue, value, onValueChange, children, className, ...props },\n    forwardedRef,\n  ) => {\n    const [activeValue, setActiveValue] = React.useState(defaultValue);\n    const triggersRef = React.useRef(new Map<string, HTMLElement>());\n    const initialSet = React.useRef(false);\n    const isControlled = value !== undefined;\n\n    React.useEffect(() => {\n      if (\n        !isControlled &&\n        activeValue === undefined &&\n        triggersRef.current.size > 0 &&\n        !initialSet.current\n      ) {\n        const firstTab = Array.from(triggersRef.current.keys())[0];\n        setActiveValue(firstTab);\n        initialSet.current = true;\n      }\n    }, [activeValue, isControlled]);\n\n    const registerTrigger = (value: string, node: HTMLElement | null) => {\n      if (node) {\n        triggersRef.current.set(value, node);\n        if (!isControlled && activeValue === undefined && !initialSet.current) {\n          setActiveValue(value);\n          initialSet.current = true;\n        }\n      } else {\n        triggersRef.current.delete(value);\n      }\n    };\n\n    const getTrigger = (value: string): HTMLElement | null => {\n      return triggersRef.current.get(value) || null;\n    };\n\n    const handleValueChange = (val: string) => {\n      if (!isControlled) {\n        setActiveValue(val);\n      } else {\n        onValueChange?.(val);\n      }\n    };\n\n    const localRef = React.useRef<HTMLDivElement | null>(null);\n    React.useImperativeHandle(\n      forwardedRef,\n      () => localRef.current as HTMLDivElement,\n    );\n\n    return (\n      <TabsContext.Provider\n        value={{\n          activeValue: (value ?? activeValue)!,\n          handleValueChange,\n          registerTrigger,\n          getTrigger,\n        }}\n      >\n        <div\n          ref={localRef}\n          className={cn('flex flex-col gap-2', className)}\n          {...props}\n        >\n          {children}\n        </div>\n      </TabsContext.Provider>\n    );\n  },\n);\nTabs.displayName = 'Tabs';\n\ninterface TabsListProps {\n  children: React.ReactNode;\n  className?: string;\n  activeClassName?: string;\n  transition?: Transition;\n}\n\nconst TabsList = React.forwardRef<HTMLDivElement, TabsListProps>(\n  (\n    {\n      children,\n      className,\n      activeClassName,\n      transition = {\n        type: 'spring',\n        bounce: 0,\n        stiffness: 200,\n        damping: 25,\n      },\n    },\n    forwardedRef,\n  ) => {\n    const localRef = React.useRef<HTMLDivElement | null>(null);\n    const { activeValue, getTrigger } = React.useContext(TabsContext)!;\n    const [indicatorStyle, setIndicatorStyle] = React.useState({\n      left: 0,\n      top: 0,\n      width: 0,\n      height: 0,\n    });\n\n    const updateIndicator = React.useCallback(() => {\n      if (!localRef.current) return;\n\n      const trigger = getTrigger(activeValue);\n      if (!trigger) return;\n\n      const containerRect = localRef.current.getBoundingClientRect();\n      const triggerRect = trigger.getBoundingClientRect();\n\n      setIndicatorStyle({\n        left: triggerRect.left - containerRect.left,\n        top: triggerRect.top - containerRect.top,\n        width: triggerRect.width,\n        height: triggerRect.height,\n      });\n    }, [activeValue, getTrigger]);\n\n    React.useEffect(() => {\n      updateIndicator();\n      window.addEventListener('resize', updateIndicator);\n      return () => window.removeEventListener('resize', updateIndicator);\n    }, [updateIndicator, children]);\n\n    React.useImperativeHandle(\n      forwardedRef,\n      () => localRef.current as HTMLDivElement,\n    );\n\n    return (\n      <div ref={localRef} className=\"relative\">\n        <div\n          role=\"tablist\"\n          className={cn(\n            'bg-muted text-muted-foreground inline-flex h-10 w-fit items-center justify-center rounded-lg p-[4px]',\n            className,\n          )}\n        >\n          {children}\n        </div>\n        <motion.div\n          className={cn(\n            'absolute rounded-sm bg-background shadow-sm',\n            activeClassName,\n          )}\n          animate={{\n            left: indicatorStyle.left,\n            width: indicatorStyle.width,\n            top: indicatorStyle.top,\n            height: indicatorStyle.height,\n          }}\n          transition={transition}\n        />\n      </div>\n    );\n  },\n);\nTabsList.displayName = 'TabsList';\n\ninterface TabsTriggerProps {\n  value: string;\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst TabsTrigger = React.forwardRef<HTMLButtonElement, TabsTriggerProps>(\n  ({ value, children, className }, forwardedRef) => {\n    const { activeValue, handleValueChange, registerTrigger } =\n      React.useContext(TabsContext)!;\n\n    const localRef = React.useRef<HTMLButtonElement | null>(null);\n    React.useImperativeHandle(\n      forwardedRef,\n      () => localRef.current as HTMLButtonElement,\n    );\n\n    React.useEffect(() => {\n      registerTrigger(value, localRef.current);\n      return () => registerTrigger(value, null);\n    }, [value, registerTrigger]);\n\n    return (\n      <motion.button\n        role=\"tab\"\n        whileTap={{ scale: 0.95 }}\n        ref={localRef}\n        onClick={() => handleValueChange(value)}\n        data-state={activeValue === value ? 'active' : 'inactive'}\n        className={cn(\n          'inline-flex items-center h-full justify-center whitespace-nowrap rounded-sm px-2 py-1 text-sm font-medium ring-offset-background transition-transform focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:text-foreground z-10',\n          className,\n        )}\n      >\n        {children}\n      </motion.button>\n    );\n  },\n);\nTabsTrigger.displayName = 'TabsTrigger';\n\ninterface TabsContentsProps {\n  children: React.ReactNode;\n  className?: string;\n  transition?: Transition;\n}\n\nconst TabsContents = React.forwardRef<HTMLDivElement, TabsContentsProps>(\n  (\n    { children, className, transition = { duration: 0.4, ease: 'easeInOut' } },\n    forwardedRef,\n  ) => {\n    const { activeValue } = React.useContext(TabsContext)!;\n    const childrenArray = React.Children.toArray(children);\n    const activeIndex = childrenArray.findIndex(\n      (child): child is React.ReactElement<{ value: string }> =>\n        React.isValidElement(child) &&\n        typeof child.props === 'object' &&\n        child.props !== null &&\n        'value' in child.props &&\n        child.props.value === activeValue,\n    );\n\n    const localRef = React.useRef<HTMLDivElement | null>(null);\n    React.useImperativeHandle(\n      forwardedRef,\n      () => localRef.current as HTMLDivElement,\n    );\n\n    return (\n      <div ref={localRef} className={cn('overflow-hidden', className)}>\n        <motion.div\n          className=\"flex\"\n          animate={{ x: activeIndex * -100 + '%' }}\n          transition={transition}\n        >\n          {childrenArray.map((child, index) => (\n            <div key={index} className=\"w-full flex-shrink-0\">\n              {child}\n            </div>\n          ))}\n        </motion.div>\n      </div>\n    );\n  },\n);\nTabsContents.displayName = 'TabsContents';\n\ninterface TabsContentProps {\n  value: string;\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst TabsContent = React.forwardRef<HTMLDivElement, TabsContentProps>(\n  ({ children, className }, forwardedRef) => {\n    const localRef = React.useRef<HTMLDivElement | null>(null);\n    React.useImperativeHandle(\n      forwardedRef,\n      () => localRef.current as HTMLDivElement,\n    );\n\n    return (\n      <div role=\"tabpanel\" ref={localRef} className={className}>\n        {children}\n      </div>\n    );\n  },\n);\nTabsContent.displayName = 'TabsContent';\n\nexport {\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  TabsContents,\n  TabsContent,\n  type TabsProps,\n  type TabsListProps,\n  type TabsTriggerProps,\n  type TabsContentsProps,\n  type TabsContentProps,\n};",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/components/tabs/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/tabs',
  },
  'bubble-background-demo': {
    name: 'bubble-background-demo',
    description: 'Demo showing an animated bubble background.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/bubble-background'],
    files: [
      {
        path: 'registry/demo/backgrounds/bubble-background-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/bubble-background-demo.tsx',
        content:
          'import { BubbleBackground } from \'@/registry/backgrounds/bubble-background\';\n\nexport const BubbleBackgroundDemo = () => {\n  return (\n    <BubbleBackground\n      interactive\n      className="absolute inset-0 flex items-center justify-center rounded-xl"\n    >\n      <h1 className="text-3xl font-bold text-white z-10">Bubble Background</h1>\n    </BubbleBackground>\n  );\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/backgrounds/bubble-background-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/bubble-background-demo',
  },
  'gradient-background-demo': {
    name: 'gradient-background-demo',
    description: 'Demo showing an animated gradient background.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/gradient-background'],
    files: [
      {
        path: 'registry/demo/backgrounds/gradient-background-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/gradient-background-demo.tsx',
        content:
          'import { GradientBackground } from \'../../../backgrounds/gradient-background\';\n\nexport const GradientBackgroundDemo = () => {\n  return (\n    <GradientBackground className="absolute inset-0 flex items-center justify-center rounded-xl">\n      <h1 className="text-3xl font-bold text-white">Gradient Background</h1>\n    </GradientBackground>\n  );\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/backgrounds/gradient-background-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/gradient-background-demo',
  },
  'stars-background-demo': {
    name: 'stars-background-demo',
    description: 'Demo showing an animated stars background.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/stars-background'],
    files: [
      {
        path: 'registry/demo/backgrounds/stars-background-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/stars-background-demo.tsx',
        content:
          'import { StarsBackground } from \'@/registry/backgrounds/stars-background\';\n\nexport const StarsBackgroundDemo = () => {\n  return (\n    <StarsBackground className="absolute inset-0 flex items-center justify-center rounded-xl">\n      <h1 className="text-3xl font-bold text-white">Stars Background</h1>\n    </StarsBackground>\n  );\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/backgrounds/stars-background-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/stars-background-demo',
  },
  'flip-button-demo': {
    name: 'flip-button-demo',
    description: 'Demo showing an animated button with flip effect.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/flip-button'],
    files: [
      {
        path: 'registry/demo/buttons/flip-button-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/flip-button-demo.tsx',
        content:
          'import { FlipButton } from \'@/registry/buttons/flip-button\';\n\nexport const FlipButtonDemo = () => {\n  return <FlipButton frontText="Front Text" backText="Back Text" />;\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/buttons/flip-button-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/flip-button-demo',
  },
  'flip-button-from-demo': {
    name: 'flip-button-from-demo',
    description: 'Demo showing an animated button with flip effect.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/flip-button'],
    files: [
      {
        path: 'registry/demo/buttons/flip-button-from-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/flip-button-from-demo.tsx',
        content:
          'import { FlipButton } from \'@/registry/buttons/flip-button\';\n\nexport const FlipButtonFromDemo = () => {\n  return <FlipButton frontText="Front Text" backText="Back Text" from="left" />;\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/buttons/flip-button-from-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/flip-button-from-demo',
  },
  'liquid-button-demo': {
    name: 'liquid-button-demo',
    description: 'Demo showing an animated button with liquid effect.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/liquid-button'],
    files: [
      {
        path: 'registry/demo/buttons/liquid-button-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/liquid-button-demo.tsx',
        content:
          "import { LiquidButton } from '@/registry/buttons/liquid-button';\n\nexport const LiquidButtonDemo = () => {\n  return <LiquidButton>Liquid Button</LiquidButton>;\n};",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/buttons/liquid-button-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/liquid-button-demo',
  },
  'ripple-button-demo': {
    name: 'ripple-button-demo',
    description: 'Demo showing an animated button with ripple effect.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/ripple-button'],
    files: [
      {
        path: 'registry/demo/buttons/ripple-button-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/ripple-button-demo.tsx',
        content:
          "import { RippleButton } from '@/registry/buttons/ripple-button';\n\nexport const RippleButtonDemo = () => {\n  return <RippleButton>Ripple Button</RippleButton>;\n};",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/buttons/ripple-button-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/ripple-button-demo',
  },
  'cards-hover-demo': {
    name: 'cards-hover-demo',
    description: 'Demo showing an animated cards hover.',
    type: 'registry:ui',
    dependencies: ['lucide-react'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/cards-hover'],
    files: [
      {
        path: 'registry/demo/components/cards-hover-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/cards-hover-demo.tsx',
        content:
          '\'use client\';\n\nimport * as React from \'react\';\nimport { BringToFront, GitPullRequest } from \'lucide-react\';\nimport { CardsHover, CardHover } from \'@/registry/components/cards-hover\';\n\nconst CARDS = [\n  {\n    value: \'1\',\n    icon: BringToFront,\n    title: \'Animated components\',\n    description: \'Beautiful Motion-animated components for dynamic websites.\',\n  },\n  {\n    value: \'2\',\n    icon: GitPullRequest,\n    title: \'Open Source\',\n    description:\n      \'Install the components in your project and modify them as you wish.\',\n  },\n  {\n    value: \'3\',\n    icon: ({ className }: { className: string }) => (\n      <svg\n        xmlns="http://www.w3.org/2000/svg"\n        viewBox="0 0 256 256"\n        className={className}\n      >\n        <rect width="256" height="256" fill="none" />\n        <line\n          x1="208"\n          y1="128"\n          x2="128"\n          y2="208"\n          fill="none"\n          stroke="currentColor"\n          strokeLinecap="round"\n          strokeLinejoin="round"\n          strokeWidth="32"\n        />\n        <line\n          x1="192"\n          y1="40"\n          x2="40"\n          y2="192"\n          fill="none"\n          stroke="currentColor"\n          strokeLinecap="round"\n          strokeLinejoin="round"\n          strokeWidth="32"\n        />\n      </svg>\n    ),\n    title: \'Complementary to Shadcn UI\',\n    description:\n      \'The components are designed to be used with Shadcn UI components.\',\n  },\n  {\n    value: \'4\',\n    icon: ({ className }: { className: string }) => (\n      <svg viewBox="0 0 34 20" fill="currentColor" className={className}>\n        <path d="M17.183 0C12.6 0 9.737 2.291 8.59 6.873c1.719-2.29 3.723-3.15 6.014-2.577 1.307.326 2.242 1.274 3.275 2.324 1.685 1.71 3.635 3.689 7.894 3.689 4.582 0 7.445-2.291 8.591-6.872-1.718 2.29-3.723 3.15-6.013 2.576-1.308-.326-2.243-1.274-3.276-2.324C23.39 1.98 21.44 0 17.183 0ZM8.59 10.309C4.01 10.309 1.145 12.6 0 17.182c1.718-2.291 3.723-3.15 6.013-2.577 1.308.326 2.243 1.274 3.276 2.324 1.685 1.71 3.635 3.689 7.894 3.689 4.582 0 7.445-2.29 8.59-6.872-1.718 2.29-3.722 3.15-6.013 2.577-1.307-.327-2.242-1.276-3.276-2.325-1.684-1.71-3.634-3.689-7.893-3.689Z" />\n      </svg>\n    ),\n    title: \'Build with Tailwind CSS\',\n    description: \'The components are designed with Tailwind CSS.\',\n  },\n];\n\nexport const CardsHoverDemo = () => {\n  const [value, setValue] = React.useState<string | null>(null);\n\n  return (\n    <CardsHover\n      className="w-full lg:grid-cols-2"\n      value={value}\n      onValueChange={setValue}\n    >\n      {CARDS.map((card) => (\n        <CardHover\n          key={card.value}\n          value={card.value}\n          className="p-4 flex flex-col"\n        >\n          <div className="flex items-center justify-around size-10 rounded-lg bg-blue-500/10 mb-2">\n            <card.icon className="size-5 text-blue-500" />\n          </div>\n          <p className="text-base font-medium mb-1">{card.title}</p>\n          <p className="text-sm text-muted-foreground">{card.description}</p>\n        </CardHover>\n      ))}\n    </CardsHover>\n  );\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/components/cards-hover-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/cards-hover-demo',
  },
  'code-editor-demo': {
    name: 'code-editor-demo',
    description: 'Demo showing an animated code editor.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/code-editor'],
    files: [
      {
        path: 'registry/demo/components/code-editor-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/code-editor-demo.tsx',
        content:
          "import { CodeEditor } from '@/registry/components/code-editor';\n\nexport const CodeEditorDemo = () => {\n  return (\n    <CodeEditor\n      className=\"w-[650px] h-[510px]\"\n      code={`'use client';\n\nimport * as React from 'react';\n\ntype MyComponentProps = {\n  myProps: string;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nconst MyComponent = React.forwardRef<HTMLDivElement, MyComponentProps>(\n  ({ myProps, ...props }, ref) => {\n    return (\n      <div ref={ref} {...props}>\n        <p>My Component</p>\n      </div>\n    );\n  },\n);\nMyComponent.displayName = 'MyComponent';\n\nexport { MyComponent, type MyComponentProps };`}\n      lang=\"tsx\"\n      duration={15}\n      delay={0.5}\n    />\n  );\n};",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/components/code-editor-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/code-editor-demo',
  },
  'counter-demo': {
    name: 'counter-demo',
    description: 'Demo showing an animated counter.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/counter'],
    files: [
      {
        path: 'registry/demo/components/counter-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/counter-demo.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\n\nimport { Counter } from '@/registry/components/counter';\n\nexport const CounterDemo = () => {\n  const [number, setNumber] = React.useState(100);\n\n  return <Counter number={number} setNumber={setNumber} />;\n};",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/components/counter-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/counter-demo',
  },
  'install-tabs-demo': {
    name: 'install-tabs-demo',
    description: 'Demo showing an install tabs.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/install-tabs'],
    files: [
      {
        path: 'registry/demo/components/install-tabs-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/install-tabs-demo.tsx',
        content:
          'import { InstallTabs } from \'@/registry/components/install-tabs\';\n\nconst commands = {\n  npm: `npx shadcn@latest add "https://animate-ui.com/r/install-tabs"`,\n  pnpm: `pnpm dlx shadcn@latest add "https://animate-ui.com/r/install-tabs"`,\n  yarn: `npx shadcn@latest add "https://animate-ui.com/r/install-tabs"`,\n  bun: `bun x --bun shadcn@latest add "https://animate-ui.com/r/install-tabs"`,\n};\n\nexport const InstallTabsDemo = () => {\n  return (\n    <InstallTabs\n      defaultValue="pnpm"\n      className="max-w-[650px]"\n      commands={commands}\n    />\n  );\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/components/install-tabs-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/install-tabs-demo',
  },
  'scroll-progress-demo': {
    name: 'scroll-progress-demo',
    description: 'Demo showing a scroll progress.',
    type: 'registry:ui',
    dependencies: ['lucide-react', 'motion'],
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/scroll-progress'],
    files: [
      {
        path: 'registry/demo/components/scroll-progress-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/scroll-progress-demo.tsx',
        content:
          '\'use client\';\n\nimport * as React from \'react\';\nimport { ArrowDown } from \'lucide-react\';\nimport { motion } from \'motion/react\';\n\nimport { ScrollProgress } from \'@/registry/components/scroll-progress\';\n\nexport const ScrollProgressDemo = () => {\n  return (\n    <div className="absolute inset-0">\n      <div className="relative h-full w-full overflow-hidden rounded-xl">\n        <ScrollProgress progressProps={{ className: \'absolute\' }}>\n          <div className="size-full flex items-center justify-center dark:bg-neutral-950 bg-white">\n            <p className="flex items-center gap-2 font-medium">\n              Scroll down to see the progress bar{\' \'}\n              <motion.span\n                animate={{ y: [3, -3, 3] }}\n                transition={{\n                  duration: 1.25,\n                  repeat: Infinity,\n                  ease: \'easeInOut\',\n                  type: \'keyframes\',\n                }}\n              >\n                <ArrowDown className="size-5" />\n              </motion.span>\n            </p>\n          </div>\n          <div className="size-full dark:bg-neutral-900 bg-neutral-100" />\n          <div className="size-full dark:bg-neutral-950 bg-white" />\n          <div className="size-full dark:bg-neutral-900 bg-neutral-100" />\n          <div className="size-full dark:bg-neutral-950 bg-white" />\n        </ScrollProgress>\n      </div>\n    </div>\n  );\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/components/scroll-progress-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/scroll-progress-demo',
  },
  'tabs-demo': {
    name: 'tabs-demo',
    description: 'Demo showing an animated tabs.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/tabs',
      'label',
      'input',
      'button',
    ],
    files: [
      {
        path: 'registry/demo/components/tabs-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/tabs-demo.tsx',
        content:
          'import { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\nimport {\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  TabsContent,\n  TabsContents,\n} from \'@/registry/components/tabs\';\nimport { Label } from \'@/components/ui/label\';\n\nexport const TabsDemo = () => {\n  return (\n    <Tabs defaultValue="account" className="w-[400px] bg-muted rounded-lg">\n      <TabsList className="grid w-full grid-cols-2">\n        <TabsTrigger value="account">Account</TabsTrigger>\n        <TabsTrigger value="password">Password</TabsTrigger>\n      </TabsList>\n\n      <TabsContents className="mx-1 mb-1 -mt-2 rounded-sm h-full bg-background">\n        <TabsContent value="account" className="space-y-6 p-6">\n          <p className="text-sm text-muted-foreground">\n            Make changes to your account here. Click save when you\'re done.\n          </p>\n\n          <div className="space-y-3">\n            <div className="space-y-1">\n              <Label htmlFor="name">Name</Label>\n              <Input id="name" defaultValue="Pedro Duarte" />\n            </div>\n            <div className="space-y-1">\n              <Label htmlFor="username">Username</Label>\n              <Input id="username" defaultValue="@peduarte" />\n            </div>\n          </div>\n\n          <Button>Save changes</Button>\n        </TabsContent>\n        <TabsContent value="password" className="space-y-6 p-6">\n          <p className="text-sm text-muted-foreground">\n            Change your password here. After saving, you\'ll be logged out.\n          </p>\n          <div className="space-y-3">\n            <div className="space-y-1">\n              <Label htmlFor="current">Current password</Label>\n              <Input id="current" type="password" />\n            </div>\n            <div className="space-y-1">\n              <Label htmlFor="new">New password</Label>\n              <Input id="new" type="password" />\n            </div>\n            <div className="space-y-1">\n              <Label htmlFor="confirm">Confirm password</Label>\n              <Input id="confirm" type="password" />\n            </div>\n          </div>\n\n          <Button>Save password</Button>\n        </TabsContent>\n      </TabsContents>\n    </Tabs>\n  );\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/components/tabs-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/tabs-demo',
  },
  'radix-accordion-demo': {
    name: 'radix-accordion-demo',
    description: 'Demo showing an animated radix accordion.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/radix-accordion'],
    files: [
      {
        path: 'registry/demo/radix/radix-accordion-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/radix-accordion-demo.tsx',
        content:
          'import {\n  Accordion,\n  AccordionItem,\n  AccordionTrigger,\n  AccordionContent,\n} from \'@/registry/radix/radix-accordion\';\n\nexport const RadixAccordionDemo = () => {\n  return (\n    <Accordion\n      type="single"\n      defaultValue="item-1"\n      collapsible\n      className="w-[400px]"\n    >\n      <AccordionItem value="item-1">\n        <AccordionTrigger>What is Animate UI?</AccordionTrigger>\n        <AccordionContent>\n          Animate UI is an open-source distribution of React components built\n          with TypeScript, Tailwind CSS, and Motion.\n        </AccordionContent>\n      </AccordionItem>\n\n      <AccordionItem value="item-2">\n        <AccordionTrigger>\n          How is it different from other libraries?\n        </AccordionTrigger>\n        <AccordionContent>\n          Instead of installing via NPM, you copy and paste the components\n          directly. This gives you full control to modify or customize them as\n          needed.\n        </AccordionContent>\n      </AccordionItem>\n\n      <AccordionItem value="item-3">\n        <AccordionTrigger>Is Animate UI free to use?</AccordionTrigger>\n        <AccordionContent>\n          Absolutely! Animate UI is fully open-source. You can use, modify, and\n          adapt it to fit your needs.\n        </AccordionContent>\n      </AccordionItem>\n    </Accordion>\n  );\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/radix/radix-accordion-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/radix-accordion-demo',
  },
  'radix-checkbox-demo': {
    name: 'radix-checkbox-demo',
    description: 'Demo showing an animated radix checkbox.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/radix-checkbox', 'label'],
    files: [
      {
        path: 'registry/demo/radix/radix-checkbox-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/radix-checkbox-demo.tsx',
        content:
          'import { Label } from \'@/components/ui/label\';\nimport { Checkbox } from \'@/registry/radix/radix-checkbox\';\n\nexport const RadixCheckboxDemo = () => {\n  return (\n    <div className="flex items-center space-x-2">\n      <Checkbox defaultChecked id="terms" />\n      <Label htmlFor="terms">Accept terms and conditions</Label>\n    </div>\n  );\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/radix/radix-checkbox-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/radix-checkbox-demo',
  },
  'radix-collapsible-demo': {
    name: 'radix-collapsible-demo',
    description: 'Demo showing an animated radix collapsible.',
    type: 'registry:ui',
    dependencies: ['lucide-react'],
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/radix-collapsible',
      'button',
    ],
    files: [
      {
        path: 'registry/demo/radix/radix-collapsible-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/radix-collapsible-demo.tsx',
        content:
          'import { Button } from \'@/components/ui/button\';\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \'@/registry/radix/radix-collapsible\';\nimport { ChevronsUpDown } from \'lucide-react\';\n\nexport const RadixCollapsibleDemo = () => {\n  return (\n    <Collapsible className="w-[350px]">\n      <div className="space-y-2 mb-2">\n        <div className="flex items-center justify-between space-x-4">\n          <h4 className="text-sm font-semibold">\n            @peduarte starred 3 repositories\n          </h4>\n          <CollapsibleTrigger asChild>\n            <Button variant="outline" size="sm" className="w-9 p-0">\n              <ChevronsUpDown className="h-4 w-4" />\n              <span className="sr-only">Toggle</span>\n            </Button>\n          </CollapsibleTrigger>\n        </div>\n        <div className="rounded-md border px-4 py-3 font-mono text-sm">\n          @radix-ui/primitives\n        </div>\n      </div>\n      <CollapsibleContent className="space-y-2">\n        <div className="rounded-md border px-4 py-3 font-mono text-sm">\n          @radix-ui/colors\n        </div>\n        <div className="rounded-md border px-4 py-3 font-mono text-sm">\n          @stitches/react\n        </div>\n      </CollapsibleContent>\n    </Collapsible>\n  );\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/radix/radix-collapsible-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/radix-collapsible-demo',
  },
  'radix-dialog-demo': {
    name: 'radix-dialog-demo',
    description: 'Demo showing an animated radix dialog.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/radix-dialog', 'button'],
    files: [
      {
        path: 'registry/demo/radix/radix-dialog-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/radix-dialog-demo.tsx',
        content:
          'import { Button } from \'@/components/ui/button\';\nimport {\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n} from \'@/registry/radix/radix-dialog\';\n\nexport const RadixDialogDemo = () => {\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button variant="outline">Open Dialog</Button>\n      </DialogTrigger>\n      <DialogContent className="sm:max-w-[425px]">\n        <DialogHeader>\n          <DialogTitle>Terms of Service</DialogTitle>\n          <DialogDescription>\n            Please read the following terms of service carefully.\n          </DialogDescription>\n        </DialogHeader>\n        <div className="grid gap-4 py-4">\n          <p>\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam,\n            quos. Lorem ipsum dolor sit amet consectetur adipisicing elit.\n            Quisquam, quos.\n          </p>\n        </div>\n        <DialogFooter>\n          <Button variant="outline">Decline</Button>\n          <Button type="submit">Accept</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/radix/radix-dialog-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/radix-dialog-demo',
  },
  'radix-dialog-from-demo': {
    name: 'radix-dialog-from-demo',
    description: 'Demo showing an animated radix dialog.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/radix-dialog', 'button'],
    files: [
      {
        path: 'registry/demo/radix/radix-dialog-from-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/radix-dialog-from-demo.tsx',
        content:
          'import { Button } from \'@/components/ui/button\';\nimport {\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n} from \'@/registry/radix/radix-dialog\';\n\nexport const RadixDialogFromDemo = () => {\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button variant="outline">Open Dialog</Button>\n      </DialogTrigger>\n      <DialogContent className="sm:max-w-[425px]" from="left">\n        <DialogHeader>\n          <DialogTitle>Terms of Service</DialogTitle>\n          <DialogDescription>\n            Please read the following terms of service carefully.\n          </DialogDescription>\n        </DialogHeader>\n        <div className="grid gap-4 py-4">\n          <p>\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam,\n            quos. Lorem ipsum dolor sit amet consectetur adipisicing elit.\n            Quisquam, quos.\n          </p>\n        </div>\n        <DialogFooter>\n          <Button variant="outline">Decline</Button>\n          <Button type="submit">Accept</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/radix/radix-dialog-from-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/radix-dialog-from-demo',
  },
  'radix-hover-card-demo': {
    name: 'radix-hover-card-demo',
    description: 'Demo showing an animated radix hover card.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/radix-hover-card',
      'button',
    ],
    files: [
      {
        path: 'registry/demo/radix/radix-hover-card-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/radix-hover-card-demo.tsx',
        content:
          'import { Button } from \'@/components/ui/button\';\nimport {\n  HoverCard,\n  HoverCardTrigger,\n  HoverCardContent,\n} from \'@/registry/radix/radix-hover-card\';\n\nexport const RadixHoverCardDemo = () => {\n  return (\n    <HoverCard>\n      <HoverCardTrigger asChild>\n        <a\n          className="size-12 rounded-full overflow-hidden border"\n          href="https://twitter.com/animate_ui"\n          target="_blank"\n          rel="noreferrer noopener"\n        >\n          <img\n            src="https://pbs.twimg.com/profile_images/1904970066770214912/lYBctz26_400x400.jpg"\n            alt="Animate UI"\n          />\n        </a>\n      </HoverCardTrigger>\n      <HoverCardContent className="w-80">\n        <div className="flex flex-col gap-4">\n          <img\n            className="size-16 rounded-full overflow-hidden border"\n            src="https://pbs.twimg.com/profile_images/1904970066770214912/lYBctz26_400x400.jpg"\n            alt="Animate UI"\n          />\n          <div className="flex flex-col gap-4">\n            <div>\n              <div className="font-bold">Animate UI</div>\n              <div className="text-sm text-muted-foreground">@animate_ui</div>\n            </div>\n            <div className="text-sm text-muted-foreground">\n              A fully animated, open-source component distribution built with\n              React, TypeScript, Tailwind CSS, and Motion.\n            </div>\n            <div className="flex gap-4">\n              <div className="flex gap-1 text-sm items-center">\n                <div className="font-bold">0</div>{\' \'}\n                <div className="text-muted-foreground">Following</div>\n              </div>\n              <div className="flex gap-1 text-sm items-center">\n                <div className="font-bold">2,900</div>{\' \'}\n                <div className="text-muted-foreground">Followers</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </HoverCardContent>\n    </HoverCard>\n  );\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/radix/radix-hover-card-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/radix-hover-card-demo',
  },
  'radix-popover-demo': {
    name: 'radix-popover-demo',
    description: 'Demo showing an animated radix popover.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/radix-popover',
      'label',
      'button',
      'input',
    ],
    files: [
      {
        path: 'registry/demo/radix/radix-popover-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/radix-popover-demo.tsx',
        content:
          'import { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\nimport { Label } from \'@/components/ui/label\';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \'@/registry/radix/radix-popover\';\n\nexport function RadixPopoverDemo() {\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button variant="outline">Open popover</Button>\n      </PopoverTrigger>\n      <PopoverContent className="w-80">\n        <div className="grid gap-4">\n          <div className="space-y-2">\n            <h4 className="font-medium leading-none">Dimensions</h4>\n            <p className="text-sm text-muted-foreground">\n              Set the dimensions for the layer.\n            </p>\n          </div>\n          <div className="grid gap-2">\n            <div className="grid grid-cols-3 items-center gap-4">\n              <Label htmlFor="width">Width</Label>\n              <Input\n                id="width"\n                defaultValue="100%"\n                className="col-span-2 h-8"\n              />\n            </div>\n            <div className="grid grid-cols-3 items-center gap-4">\n              <Label htmlFor="maxWidth">Max. width</Label>\n              <Input\n                id="maxWidth"\n                defaultValue="300px"\n                className="col-span-2 h-8"\n              />\n            </div>\n            <div className="grid grid-cols-3 items-center gap-4">\n              <Label htmlFor="height">Height</Label>\n              <Input\n                id="height"\n                defaultValue="25px"\n                className="col-span-2 h-8"\n              />\n            </div>\n            <div className="grid grid-cols-3 items-center gap-4">\n              <Label htmlFor="maxHeight">Max. height</Label>\n              <Input\n                id="maxHeight"\n                defaultValue="none"\n                className="col-span-2 h-8"\n              />\n            </div>\n          </div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/radix/radix-popover-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/radix-popover-demo',
  },
  'radix-progress-demo': {
    name: 'radix-progress-demo',
    description: 'Demo showing an animated radix progress.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/radix-progress'],
    files: [
      {
        path: 'registry/demo/radix/radix-progress-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/radix-progress-demo.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { Progress } from '@/registry/radix/radix-progress';\n\nexport const RadixProgressDemo = () => {\n  const [progress, setProgress] = React.useState(0);\n\n  React.useEffect(() => {\n    const timer = setInterval(() => {\n      setProgress((prev) => {\n        if (prev >= 100) return 100;\n        return prev + 25;\n      });\n    }, 2000);\n    return () => clearInterval(timer);\n  }, []);\n\n  React.useEffect(() => {\n    if (progress >= 100) setTimeout(() => setProgress(0), 4000);\n  }, [progress]);\n\n  return <Progress value={progress} className=\"w-[300px]\" />;\n};",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/radix/radix-progress-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/radix-progress-demo',
  },
  'radix-radio-group-demo': {
    name: 'radix-radio-group-demo',
    description: 'Demo showing an animated radix radio group.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/radix-radio-group',
      'label',
    ],
    files: [
      {
        path: 'registry/demo/radix/radix-radio-group-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/radix-radio-group-demo.tsx',
        content:
          'import { Label } from \'@/components/ui/label\';\nimport { RadioGroup, RadioGroupItem } from \'@/registry/radix/radix-radio-group\';\n\nexport function RadioGroupDemo() {\n  return (\n    <RadioGroup defaultValue="default">\n      <div className="flex items-center space-x-2">\n        <RadioGroupItem value="default" id="r1" />\n        <Label htmlFor="r1">Default</Label>\n      </div>\n      <div className="flex items-center space-x-2">\n        <RadioGroupItem value="comfortable" id="r2" />\n        <Label htmlFor="r2">Comfortable</Label>\n      </div>\n      <div className="flex items-center space-x-2">\n        <RadioGroupItem value="compact" id="r3" />\n        <Label htmlFor="r3">Compact</Label>\n      </div>\n    </RadioGroup>\n  );\n}',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/radix/radix-radio-group-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/radix-radio-group-demo',
  },
  'radix-switch-demo': {
    name: 'radix-switch-demo',
    description: 'Demo showing an animated radix switch.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/radix-switch', 'label'],
    files: [
      {
        path: 'registry/demo/radix/radix-switch-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/radix-switch-demo.tsx',
        content:
          'import { Label } from \'@/components/ui/label\';\nimport { Switch } from \'@/registry/radix/radix-switch\';\n\nexport const RadixSwitchDemo = () => {\n  return (\n    <div className="flex items-center space-x-2">\n      <Label htmlFor="airplane-mode">Airplane mode</Label>\n      <Switch defaultChecked id="airplane-mode" />\n    </div>\n  );\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/radix/radix-switch-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/radix-switch-demo',
  },
  'radix-tabs-demo': {
    name: 'radix-tabs-demo',
    description: 'Demo showing an animated Radix UI tabs.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: [
      'https://animate-ui.com/r/radix-tabs',
      'label',
      'input',
      'button',
    ],
    files: [
      {
        path: 'registry/demo/radix/radix-tabs-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/radix-tabs-demo.tsx',
        content:
          'import { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\nimport {\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  TabsContent,\n  TabsContents,\n} from \'@/registry/radix/radix-tabs\';\nimport { Label } from \'@/components/ui/label\';\n\nexport const RadixTabsDemo = () => {\n  return (\n    <Tabs defaultValue="account" className="w-[400px] bg-muted rounded-lg">\n      <TabsList className="grid w-full grid-cols-2">\n        <TabsTrigger value="account">Account</TabsTrigger>\n        <TabsTrigger value="password">Password</TabsTrigger>\n      </TabsList>\n\n      <TabsContents className="mx-1 mb-1 -mt-2 rounded-sm h-full bg-background">\n        <TabsContent value="account" className="space-y-6 p-6">\n          <p className="text-sm text-muted-foreground">\n            Make changes to your account here. Click save when you\'re done.\n          </p>\n\n          <div className="space-y-3">\n            <div className="space-y-1">\n              <Label htmlFor="name">Name</Label>\n              <Input id="name" defaultValue="Pedro Duarte" />\n            </div>\n            <div className="space-y-1">\n              <Label htmlFor="username">Username</Label>\n              <Input id="username" defaultValue="@peduarte" />\n            </div>\n          </div>\n\n          <Button>Save changes</Button>\n        </TabsContent>\n        <TabsContent value="password" className="space-y-6 p-6">\n          <p className="text-sm text-muted-foreground">\n            Change your password here. After saving, you\'ll be logged out.\n          </p>\n          <div className="space-y-3">\n            <div className="space-y-1">\n              <Label htmlFor="current">Current password</Label>\n              <Input id="current" type="password" />\n            </div>\n            <div className="space-y-1">\n              <Label htmlFor="new">New password</Label>\n              <Input id="new" type="password" />\n            </div>\n            <div className="space-y-1">\n              <Label htmlFor="confirm">Confirm password</Label>\n              <Input id="confirm" type="password" />\n            </div>\n          </div>\n\n          <Button>Save password</Button>\n        </TabsContent>\n      </TabsContents>\n    </Tabs>\n  );\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/radix/radix-tabs-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/radix-tabs-demo',
  },
  'radix-tooltip-demo': {
    name: 'radix-tooltip-demo',
    description: 'Demo showing an animated radix tooltip.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/radix-tooltip'],
    files: [
      {
        path: 'registry/demo/radix/radix-tooltip-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/radix-tooltip-demo.tsx',
        content:
          "import { Button } from '@/components/ui/button';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/registry/radix/radix-tooltip';\n\nexport const RadixTooltipDemo = () => {\n  return (\n    <TooltipProvider>\n      <Tooltip defaultOpen>\n        <TooltipTrigger asChild>\n          <Button variant=\"outline\">Hover</Button>\n        </TooltipTrigger>\n        <TooltipContent>\n          <p>Add to library</p>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n};",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/radix/radix-tooltip-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/radix-tooltip-demo',
  },
  'counting-from-number-demo': {
    name: 'counting-from-number-demo',
    description:
      'Demo showing a counting number starting from a specific number.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/counting-number'],
    files: [
      {
        path: 'registry/demo/text/counting-from-number-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/counting-from-number-demo.tsx',
        content:
          'import { CountingNumber } from \'@/registry/text/counting-number\';\n\nexport const CountingFromNumberDemo = () => {\n  return (\n    <CountingNumber\n      number={0}\n      fromNumber={new Date().getFullYear()}\n      className="text-4xl"\n      startOnView\n    />\n  );\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/text/counting-from-number-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/counting-from-number-demo',
  },
  'counting-number-decimal-demo': {
    name: 'counting-number-decimal-demo',
    description: 'Demo showing a counting number with a decimal separator.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/counting-number'],
    files: [
      {
        path: 'registry/demo/text/counting-number-decimal-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/counting-number-decimal-demo.tsx',
        content:
          'import { CountingNumber } from \'@/registry/text/counting-number\';\n\nexport const CountingNumberDecimalDemo = () => {\n  return (\n    <CountingNumber\n      number={12345.67}\n      decimalPlaces={2}\n      decimalSeparator=","\n      className="text-4xl"\n      startOnView\n    />\n  );\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/text/counting-number-decimal-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/counting-number-decimal-demo',
  },
  'counting-number-demo': {
    name: 'counting-number-demo',
    description: 'Demo showing a counting number.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/counting-number'],
    files: [
      {
        path: 'registry/demo/text/counting-number-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/counting-number-demo.tsx',
        content:
          'import { CountingNumber } from \'@/registry/text/counting-number\';\n\nexport const CountingNumberDemo = () => {\n  return (\n    <CountingNumber number={new Date().getFullYear()} className="text-4xl" />\n  );\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/text/counting-number-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/counting-number-demo',
  },
  'gradient-text-demo': {
    name: 'gradient-text-demo',
    description: 'Demo showing an animated gradient text.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/gradient-text'],
    files: [
      {
        path: 'registry/demo/text/gradient-text-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/gradient-text-demo.tsx',
        content:
          'import { GradientText } from \'@/registry/text/gradient-text\';\n\nexport const GradientTextDemo = () => {\n  return <GradientText className="text-4xl font-bold" text="Gradient Text" />;\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/text/gradient-text-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/gradient-text-demo',
  },
  'highlight-text-demo': {
    name: 'highlight-text-demo',
    description: 'Demo showing an animated highlight text.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/highlight-text'],
    files: [
      {
        path: 'registry/demo/text/highlight-text-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/highlight-text-demo.tsx',
        content:
          'import { HighlightText } from \'@/registry/text/highlight-text\';\n\nexport const HighlightTextDemo = () => {\n  return (\n    <HighlightText className="text-4xl font-semibold" text="Highlight Text" />\n  );\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/text/highlight-text-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/highlight-text-demo',
  },
  'rolling-text-demo': {
    name: 'rolling-text-demo',
    description: 'Demo showing an animated rolling text.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/rolling-text'],
    files: [
      {
        path: 'registry/demo/text/rolling-text-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/rolling-text-demo.tsx',
        content:
          'import { RollingText } from \'@/registry/text/rolling-text\';\n\nexport const RollingTextDemo = () => {\n  return <RollingText className="text-4xl" text="Rolling Text" />;\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/text/rolling-text-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/rolling-text-demo',
  },
  'sliding-number-decimal-demo': {
    name: 'sliding-number-decimal-demo',
    description:
      'Demo showing an animated sliding number with a decimal separator.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/sliding-number'],
    files: [
      {
        path: 'registry/demo/text/sliding-number-decimal-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/sliding-number-decimal-demo.tsx',
        content:
          'import { SlidingNumber } from \'@/registry/text/sliding-number\';\n\nexport const SlidingNumberDecimalDemo = () => {\n  return (\n    <SlidingNumber\n      number={12345.67}\n      decimalSeparator=","\n      padStart\n      className="text-4xl"\n      startOnView\n    />\n  );\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/text/sliding-number-decimal-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/sliding-number-decimal-demo',
  },
  'sliding-number-demo': {
    name: 'sliding-number-demo',
    description: 'Demo showing an animated sliding number.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/sliding-number'],
    files: [
      {
        path: 'registry/demo/text/sliding-number-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/sliding-number-demo.tsx',
        content:
          'import { SlidingNumber } from \'@/registry/text/sliding-number\';\n\nexport const SlidingNumberDemo = () => {\n  return (\n    <SlidingNumber\n      number={new Date().getFullYear()}\n      padStart\n      className="text-4xl"\n    />\n  );\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/text/sliding-number-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/sliding-number-demo',
  },
  'typing-text-demo': {
    name: 'typing-text-demo',
    description: 'Demo showing an animated typing text.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/typing-text'],
    files: [
      {
        path: 'registry/demo/text/typing-text-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/typing-text-demo.tsx',
        content:
          'import { TypingText } from \'@/registry/text/typing-text\';\n\nexport const TypingTextDemo = () => {\n  return (\n    <TypingText\n      className="text-4xl"\n      text="Typing Text"\n      cursor\n      cursorClassName="h-9"\n    />\n  );\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/text/typing-text-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/typing-text-demo',
  },
  'writing-text-demo': {
    name: 'writing-text-demo',
    description: 'Demo showing an animated writing text.',
    type: 'registry:ui',
    dependencies: undefined,
    devDependencies: undefined,
    registryDependencies: ['https://animate-ui.com/r/writing-text'],
    files: [
      {
        path: 'registry/demo/text/writing-text-demo/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/writing-text-demo.tsx',
        content:
          'import { WritingText } from \'@/registry/text/writing-text\';\n\nexport const WritingTextDemo = () => {\n  return (\n    <WritingText\n      className="text-4xl"\n      text="Writing Text With Effect"\n      spacing={9}\n    />\n  );\n};',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/demo/text/writing-text-demo/index.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/writing-text-demo',
  },
  'radix-accordion': {
    name: 'radix-accordion',
    description: 'Radix UI accordion component',
    type: 'registry:ui',
    dependencies: ['motion', '@radix-ui/react-accordion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/radix/radix-accordion/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/radix-accordion.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport * as AccordionPrimitive from '@radix-ui/react-accordion';\nimport { ChevronDown } from 'lucide-react';\nimport { motion, AnimatePresence, type Transition } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ninterface AccordionItemContextValue {\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n}\n\nconst AccordionItemContext = React.createContext<\n  AccordionItemContextValue | undefined\n>(undefined);\n\ntype AccordionProps = React.ComponentPropsWithoutRef<\n  typeof AccordionPrimitive.Root\n>;\n\nconst Accordion = AccordionPrimitive.Root;\n\ntype AccordionItemProps = React.ComponentPropsWithoutRef<\n  typeof AccordionPrimitive.Item\n> & {\n  children: React.ReactNode;\n};\n\nconst AccordionItem = React.forwardRef<\n  React.ComponentRef<typeof AccordionPrimitive.Item>,\n  AccordionItemProps\n>(({ className, children, ...props }, ref) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  return (\n    <AccordionPrimitive.Item\n      ref={ref}\n      className={cn('border-b', className)}\n      {...props}\n    >\n      <AccordionItemContext.Provider value={{ isOpen, setIsOpen }}>\n        {children}\n      </AccordionItemContext.Provider>\n    </AccordionPrimitive.Item>\n  );\n});\nAccordionItem.displayName = 'AccordionItem';\n\ntype AccordionTriggerProps = React.ComponentPropsWithoutRef<\n  typeof AccordionPrimitive.Trigger\n> & {\n  transition?: Transition;\n};\n\nconst AccordionTrigger = React.forwardRef<\n  React.ComponentRef<typeof AccordionPrimitive.Trigger>,\n  AccordionTriggerProps\n>(\n  (\n    {\n      className,\n      children,\n      transition = { type: 'spring', stiffness: 150, damping: 17 },\n      ...props\n    },\n    ref,\n  ) => {\n    const triggerRef = React.useRef<HTMLButtonElement | null>(null);\n    const context = React.useContext(AccordionItemContext);\n\n    if (!context) {\n      throw new Error('AccordionTrigger must be used within an AccordionItem');\n    }\n\n    React.useEffect(() => {\n      const node = triggerRef.current;\n      if (!node) return;\n\n      const observer = new MutationObserver((mutationsList) => {\n        mutationsList.forEach((mutation) => {\n          if (mutation.attributeName === 'data-state') {\n            const currentState = node.getAttribute('data-state');\n            context.setIsOpen(currentState === 'open');\n          }\n        });\n      });\n      observer.observe(node, {\n        attributes: true,\n        attributeFilter: ['data-state'],\n      });\n      const initialState = node.getAttribute('data-state');\n      context.setIsOpen(initialState === 'open');\n      return () => {\n        observer.disconnect();\n      };\n    }, [context]);\n\n    return (\n      <AccordionPrimitive.Header className=\"flex\">\n        <AccordionPrimitive.Trigger\n          ref={(node) => {\n            triggerRef.current = node;\n            if (typeof ref === 'function') {\n              ref(node);\n            } else if (ref) {\n              (ref as React.RefObject<HTMLButtonElement | null>).current = node;\n            }\n          }}\n          className={cn(\n            'flex flex-1 items-center justify-between py-4 font-medium hover:underline',\n            className,\n          )}\n          {...props}\n        >\n          {children}\n          <motion.div\n            animate={{ rotate: context.isOpen ? 180 : 0 }}\n            transition={transition}\n          >\n            <ChevronDown className=\"size-5 shrink-0\" />\n          </motion.div>\n        </AccordionPrimitive.Trigger>\n      </AccordionPrimitive.Header>\n    );\n  },\n);\nAccordionTrigger.displayName = 'AccordionTrigger';\n\ntype AccordionContentProps = React.ComponentPropsWithoutRef<\n  typeof AccordionPrimitive.Content\n> & {\n  transition?: Transition;\n};\n\nconst AccordionContent = React.forwardRef<\n  React.ComponentRef<typeof AccordionPrimitive.Content>,\n  AccordionContentProps\n>(\n  (\n    {\n      className,\n      children,\n      transition = { type: 'spring', stiffness: 150, damping: 17 },\n      ...props\n    },\n    ref,\n  ) => {\n    const context = React.useContext(AccordionItemContext);\n\n    if (!context) {\n      throw new Error('AccordionContent must be used within an AccordionItem');\n    }\n\n    return (\n      <AnimatePresence>\n        {context.isOpen && (\n          <AccordionPrimitive.Content forceMount {...props}>\n            <motion.div\n              key=\"accordion-content\"\n              initial={{ height: 0, opacity: 0, '--mask-stop': '0%' }}\n              animate={{ height: 'auto', opacity: 1, '--mask-stop': '100%' }}\n              exit={{ height: 0, opacity: 0, '--mask-stop': '0%' }}\n              transition={transition}\n              style={{\n                maskImage:\n                  'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n                WebkitMaskImage:\n                  'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n              }}\n              className={cn('overflow-hidden text-sm', className)}\n              ref={ref}\n            >\n              <div className=\"pb-4 pt-0\">{children}</div>\n            </motion.div>\n          </AccordionPrimitive.Content>\n        )}\n      </AnimatePresence>\n    );\n  },\n);\nAccordionContent.displayName = 'AccordionContent';\n\nexport {\n  Accordion,\n  AccordionItem,\n  AccordionTrigger,\n  AccordionContent,\n  type AccordionProps,\n  type AccordionItemProps,\n  type AccordionTriggerProps,\n  type AccordionContentProps,\n};",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/radix/radix-accordion/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/radix-accordion',
  },
  'radix-checkbox': {
    name: 'radix-checkbox',
    description: 'Checkbox component',
    type: 'registry:ui',
    dependencies: ['motion', '@radix-ui/react-checkbox'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/radix/radix-checkbox/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/radix-checkbox.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport * as CheckboxPrimitive from '@radix-ui/react-checkbox';\nimport { motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ntype CheckboxProps = React.ComponentPropsWithoutRef<\n  typeof CheckboxPrimitive.Root\n>;\n\nconst Checkbox = React.forwardRef<\n  React.ComponentRef<typeof CheckboxPrimitive.Root>,\n  CheckboxProps\n>(({ className, ...props }, ref) => {\n  const buttonRef = React.useRef<HTMLButtonElement>(null);\n\n  React.useImperativeHandle(ref, () => buttonRef.current as HTMLButtonElement);\n\n  const [observedChecked, setObservedChecked] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!buttonRef.current) return;\n\n    const observer = new MutationObserver((mutationsList) => {\n      mutationsList.forEach((mutation) => {\n        if (mutation.attributeName === 'data-state') {\n          const currentState = buttonRef.current?.getAttribute('data-state');\n          setObservedChecked(currentState === 'checked');\n        }\n      });\n    });\n\n    observer.observe(buttonRef.current, {\n      attributes: true,\n      attributeFilter: ['data-state'],\n    });\n\n    const initialState = buttonRef.current.getAttribute('data-state');\n    setObservedChecked(initialState === 'checked');\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  const isChecked =\n    typeof props.checked !== 'undefined' ? props.checked : observedChecked;\n\n  return (\n    <CheckboxPrimitive.Root\n      ref={ref}\n      {...props}\n      className={cn(\n        'peer size-5 flex items-center justify-center shrink-0 rounded-sm bg-muted transition-colors duration-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',\n        className,\n      )}\n      asChild\n    >\n      <motion.button\n        ref={buttonRef}\n        whileTap={{ scale: 0.95 }}\n        whileHover={{ scale: 1.05 }}\n      >\n        <CheckboxPrimitive.Indicator forceMount asChild>\n          <motion.svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            strokeWidth=\"3.5\"\n            stroke=\"currentColor\"\n            className=\"size-3.5\"\n            initial=\"unchecked\"\n            animate={isChecked ? 'checked' : 'unchecked'}\n          >\n            <motion.path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              d=\"M4.5 12.75l6 6 9-13.5\"\n              variants={{\n                checked: {\n                  pathLength: 1,\n                  opacity: 1,\n                  transition: {\n                    duration: 0.2,\n                    delay: 0.2,\n                  },\n                },\n                unchecked: {\n                  pathLength: 0,\n                  opacity: 0,\n                  transition: {\n                    duration: 0.2,\n                  },\n                },\n              }}\n            />\n          </motion.svg>\n        </CheckboxPrimitive.Indicator>\n      </motion.button>\n    </CheckboxPrimitive.Root>\n  );\n});\n\nCheckbox.displayName = CheckboxPrimitive.Root.displayName;\n\nexport { Checkbox, type CheckboxProps };",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/radix/radix-checkbox/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/radix-checkbox',
  },
  'radix-collapsible': {
    name: 'radix-collapsible',
    description: 'Collapsible component',
    type: 'registry:ui',
    dependencies: ['motion', '@radix-ui/react-collapsible'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/radix/radix-collapsible/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/radix-collapsible.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport * as CollapsiblePrimitive from '@radix-ui/react-collapsible';\nimport { AnimatePresence, motion, type Transition } from 'motion/react';\n\ntype CollapsibleContextType = { isOpen: boolean };\nconst CollapsibleContext = React.createContext<CollapsibleContextType>({\n  isOpen: false,\n});\n\ntype CollapsibleProps = React.ComponentPropsWithoutRef<\n  typeof CollapsiblePrimitive.Root\n>;\nconst Collapsible: React.FC<CollapsibleProps> = ({ children, ...props }) => {\n  const [isOpen, setIsOpen] = React.useState(\n    props?.open ?? props?.defaultOpen ?? false,\n  );\n\n  const handleOpenChange = React.useCallback(\n    (open: boolean) => {\n      setIsOpen(open);\n      props.onOpenChange?.(open);\n    },\n    [props],\n  );\n\n  return (\n    <CollapsiblePrimitive.Root {...props} onOpenChange={handleOpenChange}>\n      <CollapsibleContext.Provider value={{ isOpen }}>\n        {children}\n      </CollapsibleContext.Provider>\n    </CollapsiblePrimitive.Root>\n  );\n};\n\ntype CollapsibleTriggerProps = React.ComponentPropsWithoutRef<\n  typeof CollapsiblePrimitive.Trigger\n>;\nconst CollapsibleTrigger = CollapsiblePrimitive.Trigger;\n\ntype CollapsibleContentProps = React.ComponentPropsWithoutRef<\n  typeof CollapsiblePrimitive.Content\n> & {\n  transition?: Transition;\n};\nconst CollapsibleContent = React.forwardRef<\n  React.ComponentRef<typeof CollapsiblePrimitive.Content>,\n  CollapsibleContentProps\n>(\n  (\n    {\n      className,\n      children,\n      transition = { type: 'spring', stiffness: 150, damping: 17 },\n      ...props\n    },\n    ref,\n  ) => {\n    const { isOpen } = React.useContext(CollapsibleContext);\n\n    return (\n      <AnimatePresence>\n        {isOpen && (\n          <CollapsiblePrimitive.Content asChild forceMount ref={ref} {...props}>\n            <motion.div\n              key=\"collapsible-content\"\n              layout\n              initial={{ opacity: 0, height: 0, overflow: 'hidden' }}\n              animate={{ opacity: 1, height: 'auto', overflow: 'hidden' }}\n              exit={{ opacity: 0, height: 0, overflow: 'hidden' }}\n              transition={transition}\n              className={className}\n            >\n              {children}\n            </motion.div>\n          </CollapsiblePrimitive.Content>\n        )}\n      </AnimatePresence>\n    );\n  },\n);\nCollapsibleContent.displayName = CollapsiblePrimitive.Content.displayName;\n\nexport {\n  Collapsible,\n  CollapsibleTrigger,\n  CollapsibleContent,\n  type CollapsibleProps,\n  type CollapsibleTriggerProps,\n  type CollapsibleContentProps,\n};",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/radix/radix-collapsible/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/radix-collapsible',
  },
  'radix-dialog': {
    name: 'radix-dialog',
    description: 'Dialog component',
    type: 'registry:ui',
    dependencies: ['motion', 'lucide-react', '@radix-ui/react-dialog'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/radix/radix-dialog/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/radix-dialog.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\nimport { X } from 'lucide-react';\nimport { AnimatePresence, motion, type Transition } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ntype DialogContextType = { isOpen: boolean };\nconst DialogContext = React.createContext<DialogContextType>({ isOpen: false });\n\ntype DialogProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Root>;\nconst Dialog: React.FC<DialogProps> = ({ children, ...props }) => {\n  const [isOpen, setIsOpen] = React.useState(\n    props?.open ?? props?.defaultOpen ?? false,\n  );\n\n  const handleOpenChange = React.useCallback(\n    (open: boolean) => {\n      setIsOpen(open);\n      props.onOpenChange?.(open);\n    },\n    [props],\n  );\n\n  return (\n    <DialogPrimitive.Root {...props} onOpenChange={handleOpenChange}>\n      <DialogContext.Provider value={{ isOpen }}>\n        {children}\n      </DialogContext.Provider>\n    </DialogPrimitive.Root>\n  );\n};\n\ntype DialogTriggerProps = React.ComponentPropsWithoutRef<\n  typeof DialogPrimitive.Trigger\n>;\nconst DialogTrigger = DialogPrimitive.Trigger;\n\ntype DialogPortalProps = React.ComponentPropsWithoutRef<\n  typeof DialogPrimitive.Portal\n>;\nconst DialogPortal = DialogPrimitive.Portal;\n\ntype DialogCloseProps = React.ComponentPropsWithoutRef<\n  typeof DialogPrimitive.Close\n>;\nconst DialogClose = DialogPrimitive.Close;\n\ntype DialogOverlayProps = React.ComponentPropsWithoutRef<\n  typeof DialogPrimitive.Overlay\n>;\nconst DialogOverlay = React.forwardRef<\n  React.ComponentRef<typeof DialogPrimitive.Overlay>,\n  DialogOverlayProps\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn('fixed inset-0 z-50 bg-black/80', className)}\n    {...props}\n  />\n));\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\n\ntype FlipDirection = 'top' | 'bottom' | 'left' | 'right';\n\ntype DialogContentProps = React.ComponentPropsWithoutRef<\n  typeof DialogPrimitive.Content\n> & {\n  from?: FlipDirection;\n  transition?: Transition;\n};\nconst DialogContent = React.forwardRef<\n  React.ComponentRef<typeof DialogPrimitive.Content>,\n  DialogContentProps\n>(\n  (\n    {\n      className,\n      children,\n      from = 'top',\n      transition = { type: 'spring', stiffness: 150, damping: 25 },\n      ...props\n    },\n    ref,\n  ) => {\n    const { isOpen } = React.useContext(DialogContext);\n\n    const initialRotation =\n      from === 'top' || from === 'left' ? '20deg' : '-20deg';\n    const isVertical = from === 'top' || from === 'bottom';\n    const rotateAxis = isVertical ? 'rotateX' : 'rotateY';\n\n    return (\n      <DialogPortal forceMount>\n        <AnimatePresence>\n          {isOpen && (\n            <>\n              <DialogOverlay asChild forceMount>\n                <motion.div\n                  key=\"dialog-overlay\"\n                  initial={{ opacity: 0, filter: 'blur(4px)' }}\n                  animate={{ opacity: 1, filter: 'blur(0px)' }}\n                  exit={{ opacity: 0, filter: 'blur(4px)' }}\n                  transition={{ duration: 0.3, ease: 'easeInOut' }}\n                />\n              </DialogOverlay>\n              <DialogPrimitive.Content asChild forceMount ref={ref} {...props}>\n                <motion.div\n                  key=\"dialog-content\"\n                  initial={{\n                    opacity: 0,\n                    filter: 'blur(4px)',\n                    transform: `perspective(500px) ${rotateAxis}(${initialRotation}) scale(0.8)`,\n                  }}\n                  animate={{\n                    opacity: 1,\n                    filter: 'blur(0px)',\n                    transform: `perspective(500px) ${rotateAxis}(0deg) scale(1)`,\n                  }}\n                  exit={{\n                    opacity: 0,\n                    filter: 'blur(4px)',\n                    transform: `perspective(500px) ${rotateAxis}(${initialRotation}) scale(0.8)`,\n                  }}\n                  transition={transition}\n                  className={cn(\n                    'fixed left-[50%] top-[50%] z-50 grid w-[calc(100%-2rem)] max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg rounded-xl',\n                    className,\n                  )}\n                >\n                  {children}\n                  <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n                    <X className=\"h-4 w-4\" />\n                    <span className=\"sr-only\">Close</span>\n                  </DialogPrimitive.Close>\n                </motion.div>\n              </DialogPrimitive.Content>\n            </>\n          )}\n        </AnimatePresence>\n      </DialogPortal>\n    );\n  },\n);\nDialogContent.displayName = DialogPrimitive.Content.displayName;\n\ntype DialogHeaderProps = React.HTMLAttributes<HTMLDivElement>;\nconst DialogHeader = React.forwardRef<HTMLDivElement, DialogHeaderProps>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(\n        'flex flex-col space-y-1.5 text-center sm:text-left',\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nDialogHeader.displayName = 'DialogHeader';\n\ntype DialogFooterProps = React.HTMLAttributes<HTMLDivElement>;\nconst DialogFooter = React.forwardRef<HTMLDivElement, DialogFooterProps>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(\n        'flex flex-col-reverse sm:flex-row sm:justify-end gap-2',\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nDialogFooter.displayName = 'DialogFooter';\n\ntype DialogTitleProps = React.ComponentPropsWithoutRef<\n  typeof DialogPrimitive.Title\n>;\n\nconst DialogTitle = React.forwardRef<\n  React.ComponentRef<typeof DialogPrimitive.Title>,\n  DialogTitleProps\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      'text-lg font-semibold leading-none tracking-tight',\n      className,\n    )}\n    {...props}\n  />\n));\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\n\ntype DialogDescriptionProps = React.ComponentPropsWithoutRef<\n  typeof DialogPrimitive.Description\n>;\nconst DialogDescription = React.forwardRef<\n  React.ComponentRef<typeof DialogPrimitive.Description>,\n  DialogDescriptionProps\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n));\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n  type DialogProps,\n  type DialogTriggerProps,\n  type DialogPortalProps,\n  type DialogCloseProps,\n  type DialogOverlayProps,\n  type DialogContentProps,\n  type DialogHeaderProps,\n  type DialogFooterProps,\n  type DialogTitleProps,\n  type DialogDescriptionProps,\n};",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/radix/radix-dialog/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/radix-dialog',
  },
  'radix-hover-card': {
    name: 'radix-hover-card',
    description: 'Hover Card component',
    type: 'registry:ui',
    dependencies: ['motion', '@radix-ui/react-hover-card'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/radix/radix-hover-card/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/radix-hover-card.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport * as HoverCardPrimitive from '@radix-ui/react-hover-card';\nimport { AnimatePresence, motion, type Transition } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\nconst HoverCardContext = React.createContext<{ isOpen: boolean }>({\n  isOpen: false,\n});\n\ntype HoverCardProps = React.ComponentPropsWithoutRef<\n  typeof HoverCardPrimitive.Root\n>;\n\nconst HoverCard: React.FC<HoverCardProps> = ({ children, ...props }) => {\n  const [isOpen, setIsOpen] = React.useState(\n    props?.open ?? props?.defaultOpen ?? false,\n  );\n\n  const handleOpenChange = React.useCallback(\n    (open: boolean) => {\n      setIsOpen(open);\n      props.onOpenChange?.(open);\n    },\n    [props],\n  );\n\n  return (\n    <HoverCardPrimitive.Root {...props} onOpenChange={handleOpenChange}>\n      <HoverCardContext.Provider value={{ isOpen }}>\n        {children}\n      </HoverCardContext.Provider>\n    </HoverCardPrimitive.Root>\n  );\n};\n\ntype HoverCardTriggerProps = React.ComponentPropsWithoutRef<\n  typeof HoverCardPrimitive.Trigger\n>;\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger;\n\ntype HoverCardContentProps = React.ComponentPropsWithoutRef<\n  typeof HoverCardPrimitive.Content\n> & {\n  transition?: Transition;\n};\n\nconst HoverCardContent = React.forwardRef<\n  React.ComponentRef<typeof HoverCardPrimitive.Content>,\n  HoverCardContentProps\n>(\n  (\n    {\n      className,\n      align = 'center',\n      sideOffset = 4,\n      transition = { type: 'spring', stiffness: 300, damping: 25 },\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isOpen } = React.useContext(HoverCardContext);\n\n    return (\n      <AnimatePresence>\n        {isOpen && (\n          <HoverCardPrimitive.Portal forceMount>\n            <HoverCardPrimitive.Content\n              forceMount\n              align={align}\n              sideOffset={sideOffset}\n              className=\"z-50\"\n              ref={ref}\n              {...props}\n            >\n              <motion.div\n                key=\"hover-card\"\n                initial={{ opacity: 0, scale: 0.5, y: 25 }}\n                animate={{ opacity: 1, scale: 1, y: 0 }}\n                exit={{ opacity: 0, scale: 0.5, y: 25 }}\n                transition={transition}\n                className={cn(\n                  'w-64 rounded-lg border bg-popover p-4 text-popover-foreground shadow-md outline-none',\n                  className,\n                )}\n              >\n                {children}\n              </motion.div>\n            </HoverCardPrimitive.Content>\n          </HoverCardPrimitive.Portal>\n        )}\n      </AnimatePresence>\n    );\n  },\n);\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName;\n\nexport {\n  HoverCard,\n  HoverCardTrigger,\n  HoverCardContent,\n  type HoverCardProps,\n  type HoverCardTriggerProps,\n  type HoverCardContentProps,\n};",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/radix/radix-hover-card/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/radix-hover-card',
  },
  'radix-popover': {
    name: 'radix-popover',
    description: 'Popover component',
    type: 'registry:ui',
    dependencies: ['motion', '@radix-ui/react-popover'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/radix/radix-popover/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/radix-popover.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport * as PopoverPrimitive from '@radix-ui/react-popover';\nimport { AnimatePresence, motion, type Transition } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\nconst PopoverContext = React.createContext<{ isOpen: boolean }>({\n  isOpen: false,\n});\n\ntype PopoverProps = React.ComponentPropsWithoutRef<\n  typeof PopoverPrimitive.Root\n>;\n\nconst Popover: React.FC<PopoverProps> = ({ children, ...props }) => {\n  const [isOpen, setIsOpen] = React.useState(\n    props?.open ?? props?.defaultOpen ?? false,\n  );\n\n  const handleOpenChange = React.useCallback(\n    (open: boolean) => {\n      setIsOpen(open);\n      props.onOpenChange?.(open);\n    },\n    [props],\n  );\n\n  return (\n    <PopoverPrimitive.Root {...props} onOpenChange={handleOpenChange}>\n      <PopoverContext.Provider value={{ isOpen }}>\n        {children}\n      </PopoverContext.Provider>\n    </PopoverPrimitive.Root>\n  );\n};\n\ntype PopoverTriggerProps = React.ComponentPropsWithoutRef<\n  typeof PopoverPrimitive.Trigger\n>;\n\nconst PopoverTrigger = PopoverPrimitive.Trigger;\n\ntype PopoverContentProps = React.ComponentPropsWithoutRef<\n  typeof PopoverPrimitive.Content\n> & {\n  transition?: Transition;\n};\n\nconst PopoverContent = React.forwardRef<\n  React.ComponentRef<typeof PopoverPrimitive.Content>,\n  PopoverContentProps\n>(\n  (\n    {\n      className,\n      align = 'center',\n      sideOffset = 4,\n      transition = { type: 'spring', stiffness: 300, damping: 25 },\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isOpen } = React.useContext(PopoverContext);\n\n    return (\n      <AnimatePresence>\n        {isOpen && (\n          <PopoverPrimitive.Portal forceMount>\n            <PopoverPrimitive.Content\n              forceMount\n              align={align}\n              sideOffset={sideOffset}\n              ref={ref}\n              className=\"z-50\"\n              {...props}\n            >\n              <motion.div\n                key=\"popover\"\n                initial={{ opacity: 0, scale: 0.5, y: 25 }}\n                animate={{ opacity: 1, scale: 1, y: 0 }}\n                exit={{ opacity: 0, scale: 0.5, y: 25 }}\n                transition={transition}\n                className={cn(\n                  'w-72 rounded-lg border bg-popover p-4 text-popover-foreground shadow-md outline-none',\n                  className,\n                )}\n              >\n                {children}\n              </motion.div>\n            </PopoverPrimitive.Content>\n          </PopoverPrimitive.Portal>\n        )}\n      </AnimatePresence>\n    );\n  },\n);\nPopoverContent.displayName = PopoverPrimitive.Content.displayName;\n\nexport {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  type PopoverProps,\n  type PopoverTriggerProps,\n  type PopoverContentProps,\n};",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/radix/radix-popover/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/radix-popover',
  },
  'radix-progress': {
    name: 'radix-progress',
    description: 'Progress component',
    type: 'registry:ui',
    dependencies: ['motion', '@radix-ui/react-progress'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/radix/radix-progress/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/radix-progress.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport * as ProgressPrimitive from '@radix-ui/react-progress';\nimport { motion, type Transition } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\nconst MotionProgressIndicator = motion.create(ProgressPrimitive.Indicator);\n\ntype ProgressProps = React.ComponentPropsWithoutRef<\n  typeof ProgressPrimitive.Root\n> & {\n  transition?: Transition;\n};\n\nconst Progress = React.forwardRef<\n  React.ComponentRef<typeof ProgressPrimitive.Root>,\n  ProgressProps\n>(\n  (\n    {\n      className,\n      value,\n      transition = { type: 'spring', stiffness: 100, damping: 30 },\n      ...props\n    },\n    ref,\n  ) => (\n    <ProgressPrimitive.Root\n      ref={ref}\n      className={cn(\n        'relative h-3 w-full overflow-hidden rounded-full bg-secondary',\n        className,\n      )}\n      {...props}\n    >\n      <MotionProgressIndicator\n        className=\"h-full w-full flex-1 bg-primary\"\n        animate={{\n          translateX: `-${100 - (value || 0)}%`,\n        }}\n        transition={transition}\n      />\n    </ProgressPrimitive.Root>\n  ),\n);\nProgress.displayName = ProgressPrimitive.Root.displayName;\n\nexport { Progress, type ProgressProps };",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/radix/radix-progress/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/radix-progress',
  },
  'radix-radio-group': {
    name: 'radix-radio-group',
    description: 'Radio Group component',
    type: 'registry:ui',
    dependencies: ['motion', 'lucide-react', '@radix-ui/react-radio-group'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/radix/radix-radio-group/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/radix-radio-group.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport * as RadioGroupPrimitive from '@radix-ui/react-radio-group';\nimport { Circle } from 'lucide-react';\nimport { AnimatePresence, motion, type Transition } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ntype RadioGroupProps = React.ComponentPropsWithoutRef<\n  typeof RadioGroupPrimitive.Root\n> & {\n  transition?: Transition;\n};\n\nconst RadioGroup = React.forwardRef<\n  React.ComponentRef<typeof RadioGroupPrimitive.Root>,\n  RadioGroupProps\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      ref={ref}\n      className={cn('grid gap-2.5', className)}\n      {...props}\n    />\n  );\n});\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName;\n\ntype RadioGroupIndicatorProps = React.ComponentPropsWithoutRef<\n  typeof RadioGroupPrimitive.Indicator\n> & {\n  transition: Transition;\n};\n\nconst RadioGroupIndicator = React.forwardRef<\n  React.ComponentRef<typeof RadioGroupPrimitive.Indicator>,\n  RadioGroupIndicatorProps\n>(({ className, transition, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Indicator\n      ref={ref}\n      className={cn('flex items-center justify-center', className)}\n      {...props}\n    >\n      <AnimatePresence>\n        <motion.div\n          key=\"radio-indicator\"\n          initial={{ opacity: 0, scale: 0 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0 }}\n          transition={transition}\n        >\n          <Circle className=\"size-3 fill-current text-current\" />\n        </motion.div>\n      </AnimatePresence>\n    </RadioGroupPrimitive.Indicator>\n  );\n});\nRadioGroupIndicator.displayName = RadioGroupPrimitive.Indicator.displayName;\n\ntype RadioGroupItemProps = React.ComponentPropsWithoutRef<\n  typeof RadioGroupPrimitive.Item\n> & {\n  transition?: Transition;\n};\n\nconst RadioGroupItem = React.forwardRef<\n  React.ComponentRef<typeof RadioGroupPrimitive.Item>,\n  RadioGroupItemProps\n>(\n  (\n    {\n      className,\n      transition = { type: 'spring', stiffness: 200, damping: 16 },\n      ...props\n    },\n    ref,\n  ) => {\n    return (\n      <RadioGroupPrimitive.Item ref={ref} asChild {...props}>\n        <motion.button\n          className={cn(\n            'aspect-square size-5 rounded-full flex items-center justify-center border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n            className,\n          )}\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n        >\n          <RadioGroupIndicator transition={transition} />\n        </motion.button>\n      </RadioGroupPrimitive.Item>\n    );\n  },\n);\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;\n\nexport {\n  RadioGroup,\n  RadioGroupItem,\n  type RadioGroupProps,\n  type RadioGroupItemProps,\n};",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/radix/radix-radio-group/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/radix-radio-group',
  },
  'radix-switch': {
    name: 'radix-switch',
    description: 'Radix UI switch component',
    type: 'registry:ui',
    dependencies: ['motion', '@radix-ui/react-switch'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/radix/radix-switch/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/radix-switch.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport * as SwitchPrimitives from '@radix-ui/react-switch';\nimport { motion, type HTMLMotionProps } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\nconst BASE_CONTAINER_WIDTH = 40;\nconst BASE_CONTAINER_HEIGHT = 24;\nconst BASE_MARGIN = 2.5;\nconst BASE_ICON_SIZE = BASE_CONTAINER_HEIGHT / 2;\nconst BASE_ICON_OFFSET = BASE_ICON_SIZE / 3;\n\nconst MotionSwitch = motion.create(SwitchPrimitives.Root);\nconst MotionThumb = motion.create(SwitchPrimitives.Thumb);\n\ntype SwitchProps = React.ComponentPropsWithoutRef<\n  typeof SwitchPrimitives.Root\n> &\n  HTMLMotionProps<'button'> & {\n    leftIcon?: React.ElementType;\n    rightIcon?: React.ElementType;\n    thumbIcon?: React.ElementType;\n    width?: number;\n    height?: number;\n    margin?: number;\n  };\n\nconst Switch = React.forwardRef<\n  React.ComponentRef<typeof SwitchPrimitives.Root>,\n  SwitchProps\n>(\n  (\n    {\n      className,\n      leftIcon: LeftIcon,\n      rightIcon: RightIcon,\n      thumbIcon: ThumbIcon,\n      width = BASE_CONTAINER_WIDTH,\n      height = BASE_CONTAINER_HEIGHT,\n      margin = BASE_MARGIN,\n      ...props\n    },\n    ref,\n  ) => {\n    const switchRef = React.useRef<HTMLButtonElement>(null);\n    React.useImperativeHandle(\n      ref,\n      () => switchRef.current as HTMLButtonElement,\n    );\n\n    const [isChecked, setIsChecked] = React.useState(false);\n\n    const marginSize = (BASE_MARGIN / BASE_CONTAINER_HEIGHT) * height;\n    const thumbSize = height - 2 * marginSize;\n    const checkedTranslateX = width - thumbSize - marginSize;\n    const uncheckedTranslateX = marginSize;\n\n    const tappedWidth = thumbSize + 3 * (height / BASE_CONTAINER_HEIGHT);\n    const tappedCheckedTranslateX = checkedTranslateX - marginSize;\n\n    const iconSize = (BASE_ICON_SIZE / BASE_CONTAINER_HEIGHT) * height;\n    const iconOffset = (BASE_ICON_OFFSET / BASE_CONTAINER_HEIGHT) * height;\n\n    React.useEffect(() => {\n      if (!switchRef.current) return;\n\n      if (props.checked !== undefined) {\n        setIsChecked(props.checked);\n      }\n\n      const observer = new MutationObserver((mutationsList) => {\n        mutationsList.forEach((mutation) => {\n          if (mutation.attributeName === 'data-state') {\n            const currentState = switchRef.current?.getAttribute('data-state');\n            setIsChecked(currentState === 'checked');\n          }\n        });\n      });\n\n      observer.observe(switchRef.current, {\n        attributes: true,\n        attributeFilter: ['data-state'],\n      });\n\n      const initialState = switchRef.current.getAttribute('data-state');\n      setIsChecked(initialState === 'checked');\n\n      return () => {\n        observer.disconnect();\n      };\n    }, [props.checked]);\n\n    const thumbVariants = React.useMemo(\n      () => ({\n        tap: {\n          width: tappedWidth + 'px',\n          translateX: isChecked\n            ? tappedCheckedTranslateX + 'px'\n            : uncheckedTranslateX + 'px',\n          transition: { duration: 0.1 },\n        },\n        checked: {\n          translateX: checkedTranslateX + 'px',\n          transition: { ease: 'circInOut' },\n        },\n        unchecked: {\n          translateX: uncheckedTranslateX + 'px',\n          transition: { ease: 'circInOut' },\n        },\n      }),\n      [\n        isChecked,\n        tappedWidth,\n        tappedCheckedTranslateX,\n        uncheckedTranslateX,\n        checkedTranslateX,\n      ],\n    );\n\n    return (\n      <MotionSwitch\n        ref={switchRef}\n        style={{ width: width + 'px', height: height + 'px' }}\n        className={cn(\n          'inline-flex items-center shrink-0 cursor-pointer bg-neutral-100 dark:bg-neutral-800 rounded-full relative data-[state=checked]:bg-neutral-950 dark:data-[state=checked]:bg-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50',\n          className,\n        )}\n        whileTap=\"tap\"\n        animate={isChecked ? 'checked' : 'unchecked'}\n        {...props}\n      >\n        {LeftIcon && (\n          <motion.div\n            animate={\n              isChecked ? { scale: 1, opacity: 1 } : { scale: 0, opacity: 0 }\n            }\n            transition={{ type: 'spring', bounce: 0 }}\n            className=\"absolute top-1/2 -translate-y-1/2 dark:text-neutral-500 text-neutral-400\"\n            style={{ left: iconOffset + 'px' }}\n          >\n            <LeftIcon\n              style={{ width: iconSize + 'px', height: iconSize + 'px' }}\n            />\n          </motion.div>\n        )}\n\n        {RightIcon && (\n          <motion.div\n            animate={\n              isChecked ? { scale: 0, opacity: 0 } : { scale: 1, opacity: 1 }\n            }\n            transition={{ type: 'spring', bounce: 0 }}\n            className=\"absolute top-1/2 -translate-y-1/2 dark:text-neutral-400 text-neutral-500\"\n            style={{ right: iconOffset + 'px' }}\n          >\n            <RightIcon\n              style={{ width: iconSize + 'px', height: iconSize + 'px' }}\n            />\n          </motion.div>\n        )}\n\n        <MotionThumb\n          initial={{ translateX: uncheckedTranslateX + 'px' }}\n          style={{\n            width: thumbSize + 'px',\n            height: thumbSize + 'px',\n          }}\n          className=\"bg-white dark:bg-neutral-950 text-neutral-500 dark:text-neutral-400 rounded-full shadow-sm flex items-center justify-center\"\n          variants={thumbVariants}\n        >\n          {ThumbIcon && (\n            <ThumbIcon\n              style={{ width: iconSize + 'px', height: iconSize + 'px' }}\n            />\n          )}\n        </MotionThumb>\n      </MotionSwitch>\n    );\n  },\n);\nSwitch.displayName = SwitchPrimitives.Root.displayName;\n\nexport { Switch, type SwitchProps };",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/radix/radix-switch/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/radix-switch',
  },
  'radix-tabs': {
    name: 'radix-tabs',
    description: 'Radix UI tabs component',
    type: 'registry:ui',
    dependencies: ['motion', '@radix-ui/react-tabs'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/radix/radix-tabs/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/radix-tabs.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport * as TabsPrimitive from '@radix-ui/react-tabs';\nimport { type HTMLMotionProps, type Transition, motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ntype TabsProps = React.ComponentProps<typeof TabsPrimitive.Root>;\n\nconst Tabs = React.forwardRef<\n  React.ComponentRef<typeof TabsPrimitive.Root>,\n  TabsProps\n>(({ className, ...props }, ref) => {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      ref={ref}\n      className={cn('flex flex-col gap-2', className)}\n      {...props}\n    />\n  );\n});\nTabs.displayName = 'Tabs';\n\ntype TabsListProps = React.ComponentProps<typeof TabsPrimitive.List> & {\n  activeClassName?: string;\n  transition?: Transition;\n};\n\nconst TabsList = React.forwardRef<HTMLDivElement, TabsListProps>(\n  (\n    {\n      className,\n      activeClassName,\n      transition = {\n        type: 'spring',\n        bounce: 0,\n        stiffness: 200,\n        damping: 25,\n      },\n      ...props\n    },\n    ref,\n  ) => {\n    const localRef = React.useRef<HTMLDivElement | null>(null);\n    React.useImperativeHandle(ref, () => localRef.current as HTMLDivElement);\n\n    const [indicatorStyle, setIndicatorStyle] = React.useState({\n      left: 0,\n      top: 0,\n      width: 0,\n      height: 0,\n    });\n\n    const updateIndicator = React.useCallback(() => {\n      if (!localRef.current) return;\n\n      const activeTab = localRef.current.querySelector<HTMLElement>(\n        '[data-state=\"active\"]',\n      );\n      if (!activeTab) return;\n\n      const activeRect = activeTab.getBoundingClientRect();\n      const tabsRect = localRef.current.getBoundingClientRect();\n\n      setIndicatorStyle({\n        left: activeRect.left - tabsRect.left,\n        top: activeRect.top - tabsRect.top,\n        width: activeRect.width,\n        height: activeRect.height,\n      });\n    }, []);\n\n    React.useEffect(() => {\n      updateIndicator();\n      window.addEventListener('resize', updateIndicator);\n      const observer = new MutationObserver(updateIndicator);\n\n      if (localRef.current) {\n        observer.observe(localRef.current, {\n          attributes: true,\n          childList: true,\n          subtree: true,\n        });\n      }\n\n      return () => {\n        window.removeEventListener('resize', updateIndicator);\n        observer.disconnect();\n      };\n    }, [updateIndicator]);\n\n    return (\n      <div className=\"relative\" ref={localRef}>\n        <TabsPrimitive.List\n          data-slot=\"tabs-list\"\n          className={cn(\n            'bg-muted text-muted-foreground inline-flex h-10 w-fit items-center justify-center rounded-lg p-[4px]',\n            className,\n          )}\n          {...props}\n        />\n        <motion.div\n          className={cn(\n            'absolute rounded-sm bg-background shadow-sm',\n            activeClassName,\n          )}\n          animate={{\n            left: indicatorStyle.left,\n            top: indicatorStyle.top,\n            width: indicatorStyle.width,\n            height: indicatorStyle.height,\n          }}\n          transition={transition}\n        />\n      </div>\n    );\n  },\n);\nTabsList.displayName = 'TabsList';\n\ntype TabsTriggerProps = React.ComponentProps<typeof TabsPrimitive.Trigger>;\n\nconst TabsTrigger = React.forwardRef<\n  React.ComponentRef<typeof TabsPrimitive.Trigger>,\n  TabsTriggerProps\n>(({ className, ...props }, ref) => {\n  return (\n    <TabsPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        'inline-flex items-center h-full justify-center whitespace-nowrap rounded-sm px-2 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:text-foreground z-10',\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nTabsTrigger.displayName = 'TabsTrigger';\n\ntype TabsContentProps = React.ComponentProps<typeof TabsPrimitive.Content> & {\n  transition?: Transition;\n};\n\nconst TabsContent = React.forwardRef<HTMLDivElement, TabsContentProps>(\n  (\n    {\n      className,\n      children,\n      transition = {\n        duration: 0.5,\n        ease: 'easeInOut',\n      },\n      ...props\n    },\n    ref,\n  ) => {\n    return (\n      <TabsPrimitive.Content\n        asChild\n        data-slot=\"tabs-content\"\n        className={cn('flex-1 outline-none', className)}\n        {...props}\n      >\n        <motion.div\n          ref={ref}\n          layout\n          initial={{ opacity: 0, filter: 'blur(4px)' }}\n          animate={{ opacity: 1, filter: 'blur(0px)' }}\n          exit={{ opacity: 0, filter: 'blur(4px)' }}\n          transition={transition}\n        >\n          {children}\n        </motion.div>\n      </TabsPrimitive.Content>\n    );\n  },\n);\nTabsContent.displayName = 'TabsContent';\n\ntype TabsContentsProps = {\n  children: React.ReactNode;\n  className?: string;\n  transition?: Transition;\n} & HTMLMotionProps<'div'>;\n\nconst TabsContents = React.forwardRef<HTMLDivElement, TabsContentsProps>(\n  (\n    {\n      children,\n      className,\n      transition = { type: 'spring', stiffness: 200, damping: 25 },\n    },\n    ref,\n  ) => {\n    const containerRef = React.useRef<HTMLDivElement | null>(null);\n    React.useImperativeHandle(\n      ref,\n      () => containerRef.current as HTMLDivElement,\n    );\n\n    const [height, setHeight] = React.useState(0);\n\n    React.useEffect(() => {\n      if (!containerRef.current) return;\n\n      const resizeObserver = new ResizeObserver((entries) => {\n        const newHeight = entries[0].contentRect.height;\n        requestAnimationFrame(() => {\n          setHeight(newHeight);\n        });\n      });\n\n      resizeObserver.observe(containerRef.current);\n\n      return () => {\n        resizeObserver.disconnect();\n      };\n    }, [children]);\n\n    React.useLayoutEffect(() => {\n      if (containerRef.current) {\n        const initialHeight =\n          containerRef.current.getBoundingClientRect().height;\n        setHeight(initialHeight);\n      }\n    }, [children]);\n\n    return (\n      <motion.div\n        layout\n        animate={{ height: height }}\n        transition={transition}\n        className={className}\n      >\n        <div ref={containerRef}>{children}</div>\n      </motion.div>\n    );\n  },\n);\nTabsContents.displayName = 'TabsContents';\n\nexport {\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  TabsContent,\n  TabsContents,\n  type TabsProps,\n  type TabsListProps,\n  type TabsTriggerProps,\n  type TabsContentProps,\n  type TabsContentsProps,\n};",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/radix/radix-tabs/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/radix-tabs',
  },
  'radix-tooltip': {
    name: 'radix-tooltip',
    description: 'Radix UI tooltip component',
    type: 'registry:ui',
    dependencies: ['motion', '@radix-ui/react-tooltip'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/radix/radix-tooltip/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/radix-tooltip.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip';\nimport { AnimatePresence, motion, type Transition } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ntype TooltipProviderProps = React.ComponentPropsWithoutRef<\n  typeof TooltipPrimitive.Provider\n>;\n\nconst TooltipProvider = TooltipPrimitive.Provider;\n\nconst TooltipContext = React.createContext<{ isOpen: boolean }>({\n  isOpen: false,\n});\n\ntype TooltipProps = React.ComponentPropsWithoutRef<\n  typeof TooltipPrimitive.Root\n>;\n\nconst Tooltip: React.FC<TooltipProps> = ({ children, ...props }) => {\n  const [isOpen, setIsOpen] = React.useState(\n    props?.open ?? props?.defaultOpen ?? false,\n  );\n\n  const handleOpenChange = React.useCallback(\n    (open: boolean) => {\n      setIsOpen(open);\n      props.onOpenChange?.(open);\n    },\n    [props],\n  );\n\n  return (\n    <TooltipContext.Provider value={{ isOpen }}>\n      <TooltipPrimitive.Root {...props} onOpenChange={handleOpenChange}>\n        {children}\n      </TooltipPrimitive.Root>\n    </TooltipContext.Provider>\n  );\n};\n\ntype TooltipTriggerProps = React.ComponentPropsWithoutRef<\n  typeof TooltipPrimitive.Trigger\n>;\n\nconst TooltipTrigger = TooltipPrimitive.Trigger;\n\ntype TooltipContentProps = React.ComponentPropsWithoutRef<\n  typeof TooltipPrimitive.Content\n> & {\n  transition?: Transition;\n};\n\nconst TooltipContent = React.forwardRef<\n  React.ComponentRef<typeof TooltipPrimitive.Content>,\n  TooltipContentProps\n>(\n  (\n    {\n      className,\n      sideOffset = 4,\n      transition = { type: 'spring', stiffness: 300, damping: 25 },\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isOpen } = React.useContext(TooltipContext);\n\n    return (\n      <AnimatePresence>\n        {isOpen && (\n          <TooltipPrimitive.Portal forceMount>\n            <TooltipPrimitive.Content\n              forceMount\n              sideOffset={sideOffset}\n              className=\"z-50\"\n              {...props}\n              ref={ref}\n            >\n              <motion.div\n                key=\"tooltip\"\n                initial={{ opacity: 0, scale: 0, y: 25 }}\n                animate={{ opacity: 1, scale: 1, y: 0 }}\n                exit={{ opacity: 0, scale: 0, y: 25 }}\n                transition={transition}\n                className={cn(\n                  'relative overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md',\n                  className,\n                )}\n              >\n                {children}\n              </motion.div>\n            </TooltipPrimitive.Content>\n          </TooltipPrimitive.Portal>\n        )}\n      </AnimatePresence>\n    );\n  },\n);\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\n\nexport {\n  Tooltip,\n  TooltipTrigger,\n  TooltipContent,\n  TooltipProvider,\n  type TooltipProps,\n  type TooltipTriggerProps,\n  type TooltipContentProps,\n  type TooltipProviderProps,\n};",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/radix/radix-tooltip/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/radix-tooltip',
  },
  'counting-number': {
    name: 'counting-number',
    description: 'Counting number component',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/text/counting-number/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/counting-number.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport {\n  type SpringOptions,\n  useInView,\n  useMotionValue,\n  useSpring,\n} from 'motion/react';\n\ninterface CountingNumberProps extends React.HTMLAttributes<HTMLSpanElement> {\n  number: number;\n  fromNumber?: number;\n  padStart?: boolean;\n  startOnView?: boolean;\n  decimalSeparator?: string;\n  transition?: SpringOptions;\n  decimalPlaces?: number;\n}\n\nconst CountingNumber = React.forwardRef<HTMLSpanElement, CountingNumberProps>(\n  (\n    {\n      number,\n      fromNumber = 0,\n      padStart = false,\n      startOnView = false,\n      decimalSeparator = '.',\n      transition = { stiffness: 90, damping: 50 },\n      decimalPlaces = 0,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const viewRef = React.useRef<HTMLSpanElement>(null);\n    React.useImperativeHandle(ref, () => viewRef.current as HTMLSpanElement);\n\n    const numberStr = number.toString();\n    const decimals =\n      typeof decimalPlaces === 'number'\n        ? decimalPlaces\n        : numberStr.includes('.')\n          ? numberStr.split('.')[1].length\n          : 0;\n\n    const motionVal = useMotionValue(fromNumber);\n    const springVal = useSpring(motionVal, transition);\n    const inView = useInView(viewRef, { once: true, margin: '0px' });\n\n    React.useEffect(() => {\n      if (!startOnView || inView) motionVal.set(number);\n    }, [inView, startOnView, number, motionVal]);\n\n    React.useEffect(() => {\n      const unsubscribe = springVal.on('change', (latest) => {\n        if (viewRef.current) {\n          let formatted =\n            decimals > 0\n              ? latest.toFixed(decimals)\n              : Math.round(latest).toString();\n\n          if (decimals > 0) {\n            formatted = formatted.replace('.', decimalSeparator);\n          }\n\n          if (padStart) {\n            const finalIntLength = Math.floor(Math.abs(number)).toString()\n              .length;\n            const [intPart, fracPart] = formatted.split(decimalSeparator);\n            const paddedInt = intPart.padStart(finalIntLength, '0');\n            formatted = fracPart\n              ? `${paddedInt}${decimalSeparator}${fracPart}`\n              : paddedInt;\n          }\n\n          viewRef.current.textContent = formatted;\n        }\n      });\n      return () => unsubscribe();\n    }, [springVal, decimals, padStart, number, decimalSeparator]);\n\n    const finalIntLength = Math.floor(Math.abs(number)).toString().length;\n    const initialText = padStart\n      ? '0'.padStart(finalIntLength, '0') +\n        (decimals > 0 ? decimalSeparator + '0'.repeat(decimals) : '')\n      : '0' + (decimals > 0 ? decimalSeparator + '0'.repeat(decimals) : '');\n\n    return (\n      <span ref={viewRef} className={className} {...props}>\n        {initialText}\n      </span>\n    );\n  },\n);\n\nexport { CountingNumber, type CountingNumberProps };",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/text/counting-number/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/counting-number',
  },
  'gradient-text': {
    name: 'gradient-text',
    description: 'Gradient text component',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/text/gradient-text/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/gradient-text.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, type Transition } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ninterface GradientTextProps extends React.HTMLAttributes<HTMLSpanElement> {\n  text: string;\n  gradient?: string;\n  neon?: boolean;\n  transition?: Transition;\n}\n\nconst GradientText = React.forwardRef<HTMLSpanElement, GradientTextProps>(\n  (\n    {\n      text,\n      className,\n      gradient = 'linear-gradient(90deg, #3b82f6 0%, #a855f7 20%, #ec4899 50%, #a855f7 80%, #3b82f6 100%)',\n      neon = false,\n      transition = { duration: 50, repeat: Infinity, ease: 'linear' },\n      ...props\n    },\n    ref,\n  ) => {\n    const baseStyle: React.CSSProperties = {\n      backgroundImage: gradient,\n    };\n\n    return (\n      <span\n        ref={ref}\n        className={cn('relative inline-block', className)}\n        {...props}\n      >\n        <motion.span\n          className=\"m-0 text-transparent bg-clip-text bg-[length:700%_100%] bg-[position:0%_0%]\"\n          style={baseStyle}\n          initial={{ backgroundPosition: '0% 0%' }}\n          animate={{ backgroundPosition: '500% 100%' }}\n          transition={transition}\n        >\n          {text}\n        </motion.span>\n\n        {neon && (\n          <motion.span\n            className=\"m-0 absolute top-0 left-0 text-transparent bg-clip-text blur-[8px] mix-blend-plus-lighter bg-[length:700%_100%] bg-[position:0%_0%]\"\n            style={baseStyle}\n            initial={{ backgroundPosition: '0% 0%' }}\n            animate={{ backgroundPosition: '500% 100%' }}\n            transition={transition}\n          >\n            {text}\n          </motion.span>\n        )}\n      </span>\n    );\n  },\n);\n\nGradientText.displayName = 'GradientText';\n\nexport { GradientText, type GradientTextProps };",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/text/gradient-text/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/gradient-text',
  },
  'highlight-text': {
    name: 'highlight-text',
    description: 'Highlight text component',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/text/highlight-text/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/highlight-text.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { type HTMLMotionProps, motion, type Transition } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ninterface HighlightTextProps extends HTMLMotionProps<'span'> {\n  text: string;\n  startOnView?: boolean;\n  transition?: Transition;\n}\n\nconst animation = { backgroundSize: '100% 100%' };\n\nconst HighlightText = React.forwardRef<HTMLSpanElement, HighlightTextProps>(\n  (\n    {\n      text,\n      className,\n      startOnView,\n      transition = { duration: 2, ease: 'easeInOut' },\n      ...props\n    },\n    ref,\n  ) => {\n    return (\n      <motion.span\n        ref={ref}\n        initial={{\n          backgroundSize: '0% 100%',\n        }}\n        {...(startOnView ? { whileInView: animation } : { animate: animation })}\n        transition={transition}\n        style={{\n          backgroundRepeat: 'no-repeat',\n          backgroundPosition: 'left center',\n          display: 'inline',\n        }}\n        className={cn(\n          `relative inline-block px-2 py-1 rounded-lg bg-gradient-to-r from-blue-300 via-purple-300 to-pink-300 dark:from-blue-500 dark:via-purple-500 dark:to-pink-500`,\n          className,\n        )}\n        {...props}\n      >\n        {text}\n      </motion.span>\n    );\n  },\n);\nHighlightText.displayName = 'HighlightText';\n\nexport { HighlightText, type HighlightTextProps };",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/text/highlight-text/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/highlight-text',
  },
  'rolling-text': {
    name: 'rolling-text',
    description: 'Rolling text component',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/text/rolling-text/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/rolling-text.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, type Transition } from 'motion/react';\n\nconst ENTRY_ANIMATION = {\n  initial: { rotateX: 0 },\n  animate: { rotateX: 90 },\n};\n\nconst EXIT_ANIMATION = {\n  initial: { rotateX: 90 },\n  animate: { rotateX: 0 },\n};\n\nconst formatCharacter = (char: string): string => {\n  return char === ' ' ? '\\u00A0' : char;\n};\n\ninterface RollingTextProps\n  extends Omit<React.HTMLAttributes<HTMLSpanElement>, 'children'> {\n  transition?: Transition;\n  startOnView?: boolean;\n  text: string;\n}\n\nconst RollingText = React.forwardRef<HTMLSpanElement, RollingTextProps>(\n  (\n    {\n      transition = { duration: 0.5, delay: 0.1, ease: 'easeOut' },\n      startOnView = false,\n      text,\n      ...props\n    },\n    ref,\n  ) => {\n    const characters = React.useMemo(() => text.split(''), [text]);\n\n    return (\n      <span {...props} ref={ref}>\n        {characters.map((char, idx) => (\n          <span\n            key={idx}\n            className=\"relative inline-block perspective-[9999999px] transform-3d w-auto\"\n            aria-hidden=\"true\"\n          >\n            <motion.span\n              className=\"absolute inline-block backface-hidden origin-[50%_25%]\"\n              initial={ENTRY_ANIMATION.initial}\n              animate={ENTRY_ANIMATION.animate}\n              {...(startOnView\n                ? { whileInView: ENTRY_ANIMATION.animate }\n                : { animate: ENTRY_ANIMATION.animate })}\n              transition={{\n                ...transition,\n                delay: idx * (transition?.delay ?? 0),\n              }}\n            >\n              {formatCharacter(char)}\n            </motion.span>\n            <motion.span\n              className=\"absolute inline-block backface-hidden origin-[50%_100%]\"\n              initial={EXIT_ANIMATION.initial}\n              {...(startOnView\n                ? { whileInView: EXIT_ANIMATION.animate }\n                : { animate: EXIT_ANIMATION.animate })}\n              transition={{\n                ...transition,\n                delay: idx * (transition?.delay ?? 0) + 0.3,\n              }}\n            >\n              {formatCharacter(char)}\n            </motion.span>\n            <span className=\"invisible\">{formatCharacter(char)}</span>\n          </span>\n        ))}\n\n        <span className=\"sr-only\">{text}</span>\n      </span>\n    );\n  },\n);\nRollingText.displayName = 'RollingText';\n\nexport { RollingText, type RollingTextProps };",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/text/rolling-text/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/rolling-text',
  },
  'sliding-number': {
    name: 'sliding-number',
    description: 'Sliding number component',
    type: 'registry:ui',
    dependencies: ['motion', 'react-use-measure'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/text/sliding-number/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/sliding-number.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport {\n  useSpring,\n  useTransform,\n  type MotionValue,\n  motion,\n  useInView,\n  type SpringOptions,\n} from 'motion/react';\nimport useMeasure from 'react-use-measure';\n\nimport { cn } from '@/lib/utils';\n\ninterface NumberProps {\n  prevValue: number;\n  value: number;\n  place: number;\n  transition: SpringOptions;\n}\n\nconst NumberRoller = ({ prevValue, value, place, transition }: NumberProps) => {\n  const startNumber = Math.floor(prevValue / place) % 10;\n  const targetNumber = Math.floor(value / place) % 10;\n  const animatedValue = useSpring(startNumber, transition);\n\n  React.useEffect(() => {\n    animatedValue.set(targetNumber);\n  }, [targetNumber, animatedValue]);\n\n  const [measureRef, { height }] = useMeasure();\n\n  return (\n    <div\n      ref={measureRef}\n      className=\"relative inline-block w-[1ch] overflow-x-visible overflow-y-clip leading-none tabular-nums\"\n    >\n      <div className=\"invisible\">0</div>\n      {Array.from({ length: 10 }, (_, i) => (\n        <NumberDisplay\n          key={i}\n          motionValue={animatedValue}\n          number={i}\n          height={height}\n          transition={transition}\n        />\n      ))}\n    </div>\n  );\n};\n\ninterface NumberDisplayProps {\n  motionValue: MotionValue<number>;\n  number: number;\n  height: number;\n  transition: SpringOptions;\n}\n\nconst NumberDisplay = ({\n  motionValue,\n  number,\n  height,\n  transition,\n}: NumberDisplayProps) => {\n  const y = useTransform(motionValue, (latest) => {\n    if (!height) return 0;\n    const currentNumber = latest % 10;\n    const offset = (10 + number - currentNumber) % 10;\n    let translateY = offset * height;\n    if (offset > 5) translateY -= 10 * height;\n    return translateY;\n  });\n\n  if (!height) {\n    return <span className=\"invisible absolute\">{number}</span>;\n  }\n\n  return (\n    <motion.span\n      style={{ y }}\n      className=\"absolute inset-0 flex items-center justify-center\"\n      transition={{ ...transition, type: 'spring' }}\n    >\n      {number}\n    </motion.span>\n  );\n};\n\ninterface SlidingNumberProps extends React.HTMLAttributes<HTMLSpanElement> {\n  number: number;\n  startOnView?: boolean;\n  padStart?: boolean;\n  decimalSeparator?: string;\n  transition?: SpringOptions;\n}\n\nconst SlidingNumber = React.forwardRef<HTMLSpanElement, SlidingNumberProps>(\n  (\n    {\n      number,\n      className,\n      startOnView = false,\n      padStart = false,\n      decimalSeparator = '.',\n      transition = {\n        stiffness: 200,\n        damping: 20,\n        mass: 0.4,\n      },\n      ...props\n    },\n    ref,\n  ) => {\n    const viewRef = React.useRef<HTMLSpanElement>(null);\n    const inView = useInView(viewRef, { once: true });\n    React.useImperativeHandle(ref, () => viewRef.current!);\n\n    const prevNumberRef = React.useRef<number>(0);\n\n    const effectiveNumber = React.useMemo(\n      () => (startOnView && !inView ? 0 : Math.abs(number)),\n      [number, startOnView, inView],\n    );\n\n    const numberStr = effectiveNumber.toString();\n    let [newIntStr] = numberStr.split('.');\n    const [, newDecStr] = numberStr.split('.');\n    newIntStr =\n      padStart && newIntStr.length === 1 ? '0' + newIntStr : newIntStr;\n\n    const prevStr = prevNumberRef.current.toString();\n    let [prevIntStr = ''] = prevStr.split('.');\n    const [, prevDecStr = ''] = prevStr.split('.');\n    prevIntStr =\n      padStart && prevIntStr.length === 1 ? '0' + prevIntStr : prevIntStr;\n\n    const adjustedPrevInt = React.useMemo(() => {\n      return prevIntStr.length > newIntStr.length\n        ? prevIntStr.slice(-newIntStr.length)\n        : prevIntStr.padStart(newIntStr.length, '0');\n    }, [prevIntStr, newIntStr]);\n\n    const adjustedPrevDec = React.useMemo(() => {\n      if (!newDecStr) return '';\n      return prevDecStr.length > newDecStr.length\n        ? prevDecStr.slice(0, newDecStr.length)\n        : prevDecStr.padEnd(newDecStr.length, '0');\n    }, [prevDecStr, newDecStr]);\n\n    React.useEffect(() => {\n      if (!startOnView || inView) {\n        prevNumberRef.current = effectiveNumber;\n      }\n    }, [effectiveNumber, inView, startOnView]);\n\n    const intDigitCount = newIntStr.length;\n    const intPlaces = React.useMemo(\n      () =>\n        Array.from({ length: intDigitCount }, (_, i) =>\n          Math.pow(10, intDigitCount - i - 1),\n        ),\n      [intDigitCount],\n    );\n    const decPlaces = React.useMemo(\n      () =>\n        newDecStr\n          ? Array.from({ length: newDecStr.length }, (_, i) =>\n              Math.pow(10, newDecStr.length - i - 1),\n            )\n          : [],\n      [newDecStr],\n    );\n\n    const newDecValue = newDecStr ? parseInt(newDecStr, 10) : 0;\n    const prevDecValue = adjustedPrevDec ? parseInt(adjustedPrevDec, 10) : 0;\n\n    return (\n      <span\n        ref={viewRef}\n        className={cn('flex items-center', className)}\n        {...props}\n      >\n        {!(startOnView && !inView) && number < 0 && (\n          <span className=\"mr-1\">-</span>\n        )}\n\n        {intPlaces.map((place) => (\n          <NumberRoller\n            key={`int-${place}`}\n            prevValue={parseInt(adjustedPrevInt, 10)}\n            value={parseInt(newIntStr, 10)}\n            place={place}\n            transition={transition}\n          />\n        ))}\n\n        {newDecStr && (\n          <>\n            <span>{decimalSeparator}</span>\n            {decPlaces.map((place) => (\n              <NumberRoller\n                key={`dec-${place}`}\n                prevValue={prevDecValue}\n                value={newDecValue}\n                place={place}\n                transition={transition}\n              />\n            ))}\n          </>\n        )}\n      </span>\n    );\n  },\n);\n\nSlidingNumber.displayName = 'SlidingNumber';\n\nexport { SlidingNumber, type SlidingNumberProps };",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/text/sliding-number/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/sliding-number',
  },
  'typing-text': {
    name: 'typing-text',
    description: 'Typing text component',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/text/typing-text/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/typing-text.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, useInView } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\nconst CursorBlinker = ({ className }: { className?: string }) => {\n  return (\n    <motion.span\n      variants={{\n        blinking: {\n          opacity: [0, 0, 1, 1],\n          transition: {\n            duration: 1,\n            repeat: Infinity,\n            repeatDelay: 0,\n            ease: 'linear',\n            times: [0, 0.5, 0.5, 1],\n          },\n        },\n      }}\n      animate=\"blinking\"\n      className={cn(\n        'inline-block h-5 w-[1px] translate-y-1 bg-black dark:bg-white',\n        className,\n      )}\n    />\n  );\n};\n\ninterface TypingTextProps\n  extends Omit<React.HTMLAttributes<HTMLSpanElement>, 'children'> {\n  duration?: number;\n  delay?: number;\n  startOnView?: boolean;\n  cursor?: boolean;\n  loop?: boolean;\n  holdDelay?: number;\n  text: string | string[];\n  cursorClassName?: string;\n}\n\nconst TypingText = React.forwardRef<HTMLSpanElement, TypingTextProps>(\n  (\n    {\n      className,\n      duration = 100,\n      delay = 0,\n      startOnView = false,\n      cursor = false,\n      loop = false,\n      holdDelay = 1000,\n      text,\n      cursorClassName,\n      ...props\n    },\n    ref,\n  ) => {\n    const viewRef = React.useRef<HTMLSpanElement>(null);\n    const inView = useInView(viewRef, { once: true });\n    React.useImperativeHandle(ref, () => viewRef.current!);\n\n    const [started, setStarted] = React.useState(false);\n    const [displayedText, setDisplayedText] = React.useState<string>('');\n\n    React.useEffect(() => {\n      if (startOnView) {\n        if (inView) {\n          const timeoutId = setTimeout(() => {\n            setStarted(true);\n          }, delay);\n          return () => clearTimeout(timeoutId);\n        }\n      } else {\n        const timeoutId = setTimeout(() => {\n          setStarted(true);\n        }, delay);\n        return () => clearTimeout(timeoutId);\n      }\n    }, [inView, startOnView, delay]);\n\n    React.useEffect(() => {\n      if (!started) return;\n      const timeoutIds: Array<ReturnType<typeof setTimeout>> = [];\n      const texts: string[] = typeof text === 'string' ? [text] : text;\n\n      const typeText = (str: string, onComplete: () => void) => {\n        let currentIndex = 0;\n        const type = () => {\n          if (currentIndex <= str.length) {\n            setDisplayedText(str.substring(0, currentIndex));\n            currentIndex++;\n            const id = setTimeout(type, duration);\n            timeoutIds.push(id);\n          } else {\n            onComplete();\n          }\n        };\n        type();\n      };\n\n      const eraseText = (str: string, onComplete: () => void) => {\n        let currentIndex = str.length;\n        const erase = () => {\n          if (currentIndex >= 0) {\n            setDisplayedText(str.substring(0, currentIndex));\n            currentIndex--;\n            const id = setTimeout(erase, duration);\n            timeoutIds.push(id);\n          } else {\n            onComplete();\n          }\n        };\n        erase();\n      };\n\n      const animateTexts = (index: number) => {\n        typeText(texts[index], () => {\n          const isLast = index === texts.length - 1;\n          if (isLast && !loop) {\n            return;\n          }\n          const id = setTimeout(() => {\n            eraseText(texts[index], () => {\n              const nextIndex = isLast ? 0 : index + 1;\n              animateTexts(nextIndex);\n            });\n          }, holdDelay);\n          timeoutIds.push(id);\n        });\n      };\n\n      animateTexts(0);\n\n      return () => {\n        timeoutIds.forEach(clearTimeout);\n      };\n    }, [text, duration, started, loop, holdDelay]);\n\n    return (\n      <span ref={viewRef} className={className} {...props}>\n        <motion.span>{displayedText}</motion.span>\n        {cursor && <CursorBlinker className={cursorClassName} />}\n      </span>\n    );\n  },\n);\nTypingText.displayName = 'TypingText';\n\nexport { TypingText, type TypingTextProps };",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/text/typing-text/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/typing-text',
  },
  'writing-text': {
    name: 'writing-text',
    description: 'Writing text component',
    type: 'registry:ui',
    dependencies: ['motion'],
    devDependencies: undefined,
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/text/writing-text/index.tsx',
        type: 'registry:ui',
        target: 'components/animate-ui/writing-text.tsx',
        content:
          "'use client';\n\nimport * as React from 'react';\nimport { motion, type Transition } from 'motion/react';\n\ninterface WritingTextProps\n  extends Omit<React.HTMLAttributes<HTMLSpanElement>, 'children'> {\n  transition?: Transition;\n  startOnView?: boolean;\n  spacing?: number | string;\n  text: string;\n}\n\nconst WritingText = React.forwardRef<HTMLSpanElement, WritingTextProps>(\n  (\n    {\n      startOnView = false,\n      spacing = 5,\n      text,\n      transition = { type: 'spring', bounce: 0, duration: 2, delay: 0.5 },\n      ...props\n    },\n    ref,\n  ) => {\n    const words = React.useMemo(() => text.split(' '), [text]);\n\n    return (\n      <span ref={ref} {...props}>\n        {words.map((word, index) => (\n          <motion.span\n            key={index}\n            className=\"inline-block will-change-transform will-change-opacity\"\n            style={{ marginRight: spacing }}\n            initial={{ opacity: 0, y: 10 }}\n            {...(startOnView\n              ? {\n                  whileInView: { opacity: 1, y: 0 },\n                }\n              : {\n                  animate: { opacity: 1, y: 0 },\n                })}\n            transition={{\n              ...transition,\n              delay: index * (transition?.delay ?? 0),\n            }}\n          >\n            {word}{' '}\n          </motion.span>\n        ))}\n      </span>\n    );\n  },\n);\nWritingText.displayName = 'WritingText';\n\nexport { WritingText, type WritingTextProps };",
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/text/writing-text/index.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    command: 'https://animate-ui.com/r/writing-text',
  },
};
