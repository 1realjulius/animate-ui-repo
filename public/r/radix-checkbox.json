{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "radix-checkbox",
  "type": "registry:ui",
  "title": "Checkbox",
  "description": "Checkbox component",
  "dependencies": [
    "motion",
    "@radix-ui/react-checkbox"
  ],
  "files": [
    {
      "path": "registry/radix/radix-checkbox/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport * as CheckboxPrimitive from '@radix-ui/react-checkbox';\nimport { motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ntype CheckboxProps = React.ComponentPropsWithoutRef<\n  typeof CheckboxPrimitive.Root\n>;\n\nconst Checkbox = React.forwardRef<\n  React.ComponentRef<typeof CheckboxPrimitive.Root>,\n  CheckboxProps\n>(({ className, ...props }, ref) => {\n  const buttonRef = React.useRef<HTMLButtonElement>(null);\n\n  React.useImperativeHandle(ref, () => buttonRef.current as HTMLButtonElement);\n\n  const [observedChecked, setObservedChecked] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!buttonRef.current) return;\n\n    const observer = new MutationObserver((mutationsList) => {\n      mutationsList.forEach((mutation) => {\n        if (mutation.attributeName === 'data-state') {\n          const currentState = buttonRef.current?.getAttribute('data-state');\n          setObservedChecked(currentState === 'checked');\n        }\n      });\n    });\n\n    observer.observe(buttonRef.current, {\n      attributes: true,\n      attributeFilter: ['data-state'],\n    });\n\n    const initialState = buttonRef.current.getAttribute('data-state');\n    setObservedChecked(initialState === 'checked');\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  const isChecked =\n    typeof props.checked !== 'undefined' ? props.checked : observedChecked;\n\n  return (\n    <CheckboxPrimitive.Root\n      ref={ref}\n      {...props}\n      className={cn(\n        'peer size-5 flex items-center justify-center shrink-0 rounded-sm bg-muted transition-colors duration-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',\n        className,\n      )}\n      asChild\n    >\n      <motion.button\n        ref={buttonRef}\n        whileTap={{ scale: 0.95 }}\n        whileHover={{ scale: 1.05 }}\n      >\n        <CheckboxPrimitive.Indicator forceMount asChild>\n          <motion.svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            strokeWidth=\"3.5\"\n            stroke=\"currentColor\"\n            className=\"size-3.5\"\n            initial=\"unchecked\"\n            animate={isChecked ? 'checked' : 'unchecked'}\n          >\n            <motion.path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              d=\"M4.5 12.75l6 6 9-13.5\"\n              variants={{\n                checked: {\n                  pathLength: 1,\n                  opacity: 1,\n                  transition: {\n                    duration: 0.2,\n                    delay: 0.2,\n                  },\n                },\n                unchecked: {\n                  pathLength: 0,\n                  opacity: 0,\n                  transition: {\n                    duration: 0.2,\n                  },\n                },\n              }}\n            />\n          </motion.svg>\n        </CheckboxPrimitive.Indicator>\n      </motion.button>\n    </CheckboxPrimitive.Root>\n  );\n});\n\nCheckbox.displayName = CheckboxPrimitive.Root.displayName;\n\nexport { Checkbox, type CheckboxProps };\n",
      "type": "registry:ui",
      "target": "components/animate-ui/radix-checkbox.tsx"
    }
  ]
}