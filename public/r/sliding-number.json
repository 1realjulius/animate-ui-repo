{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sliding-number",
  "type": "registry:ui",
  "title": "Sliding Number",
  "description": "Sliding number component",
  "dependencies": [
    "motion",
    "react-use-measure"
  ],
  "files": [
    {
      "path": "registry/text/sliding-number/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport {\n  useSpring,\n  useTransform,\n  type MotionValue,\n  motion,\n  useInView,\n} from 'motion/react';\nimport useMeasure from 'react-use-measure';\n\nimport { cn } from '@/lib/utils';\n\nconst TRANSITION = {\n  type: 'spring',\n  stiffness: 200,\n  damping: 20,\n  mass: 0.4,\n};\n\ninterface NumberProps {\n  prevValue: number;\n  value: number;\n  place: number;\n}\n\nconst NumberRoller = ({ prevValue, value, place }: NumberProps) => {\n  const startNumber = Math.floor(prevValue / place) % 10;\n  const targetNumber = Math.floor(value / place) % 10;\n  const animatedValue = useSpring(startNumber, TRANSITION);\n\n  React.useEffect(() => {\n    animatedValue.set(targetNumber);\n  }, [targetNumber, animatedValue]);\n\n  const [measureRef, { height }] = useMeasure();\n\n  return (\n    <div\n      ref={measureRef}\n      className=\"relative inline-block w-[1ch] overflow-x-visible overflow-y-clip leading-none tabular-nums\"\n    >\n      <div className=\"invisible\">0</div>\n      {Array.from({ length: 10 }, (_, i) => (\n        <NumberDisplay\n          key={i}\n          motionValue={animatedValue}\n          number={i}\n          height={height}\n        />\n      ))}\n    </div>\n  );\n};\n\ninterface NumberDisplayProps {\n  motionValue: MotionValue<number>;\n  number: number;\n  height: number;\n}\n\nconst NumberDisplay = ({ motionValue, number, height }: NumberDisplayProps) => {\n  const y = useTransform(motionValue, (latest) => {\n    if (!height) return 0;\n    const currentNumber = latest % 10;\n    const offset = (10 + number - currentNumber) % 10;\n    let translateY = offset * height;\n    if (offset > 5) translateY -= 10 * height;\n    return translateY;\n  });\n\n  if (!height) {\n    return <span className=\"invisible absolute\">{number}</span>;\n  }\n\n  return (\n    <motion.span\n      style={{ y }}\n      className=\"absolute inset-0 flex items-center justify-center\"\n      transition={TRANSITION}\n    >\n      {number}\n    </motion.span>\n  );\n};\n\ninterface SlidingNumberProps extends React.HTMLAttributes<HTMLSpanElement> {\n  number: number;\n  startOnView?: boolean;\n  padStart?: boolean;\n  decimalSeparator?: string;\n}\n\nconst SlidingNumber = React.forwardRef<HTMLSpanElement, SlidingNumberProps>(\n  (\n    {\n      number,\n      className,\n      startOnView = false,\n      padStart = false,\n      decimalSeparator = '.',\n      ...props\n    },\n    ref,\n  ) => {\n    const viewRef = React.useRef<HTMLSpanElement>(null);\n    const inView = useInView(viewRef, { once: true });\n    React.useImperativeHandle(ref, () => viewRef.current!);\n\n    const prevNumberRef = React.useRef<number>(0);\n\n    const effectiveNumber = React.useMemo(\n      () => (startOnView && !inView ? 0 : Math.abs(number)),\n      [number, startOnView, inView],\n    );\n\n    const numberStr = effectiveNumber.toString();\n    let [newIntStr] = numberStr.split('.');\n    const [, newDecStr] = numberStr.split('.');\n    newIntStr =\n      padStart && newIntStr.length === 1 ? '0' + newIntStr : newIntStr;\n\n    const prevStr = prevNumberRef.current.toString();\n    let [prevIntStr = ''] = prevStr.split('.');\n    const [, prevDecStr = ''] = prevStr.split('.');\n    prevIntStr =\n      padStart && prevIntStr.length === 1 ? '0' + prevIntStr : prevIntStr;\n\n    const adjustedPrevInt = React.useMemo(() => {\n      return prevIntStr.length > newIntStr.length\n        ? prevIntStr.slice(-newIntStr.length)\n        : prevIntStr.padStart(newIntStr.length, '0');\n    }, [prevIntStr, newIntStr]);\n\n    const adjustedPrevDec = React.useMemo(() => {\n      if (!newDecStr) return '';\n      return prevDecStr.length > newDecStr.length\n        ? prevDecStr.slice(0, newDecStr.length)\n        : prevDecStr.padEnd(newDecStr.length, '0');\n    }, [prevDecStr, newDecStr]);\n\n    React.useEffect(() => {\n      if (!startOnView || inView) {\n        prevNumberRef.current = effectiveNumber;\n      }\n    }, [effectiveNumber, inView, startOnView]);\n\n    const intDigitCount = newIntStr.length;\n    const intPlaces = React.useMemo(\n      () =>\n        Array.from({ length: intDigitCount }, (_, i) =>\n          Math.pow(10, intDigitCount - i - 1),\n        ),\n      [intDigitCount],\n    );\n    const decPlaces = React.useMemo(\n      () =>\n        newDecStr\n          ? Array.from({ length: newDecStr.length }, (_, i) =>\n              Math.pow(10, newDecStr.length - i - 1),\n            )\n          : [],\n      [newDecStr],\n    );\n\n    const newDecValue = newDecStr ? parseInt(newDecStr, 10) : 0;\n    const prevDecValue = adjustedPrevDec ? parseInt(adjustedPrevDec, 10) : 0;\n\n    return (\n      <span\n        ref={viewRef}\n        className={cn('flex items-center', className)}\n        {...props}\n      >\n        {!(startOnView && !inView) && number < 0 && (\n          <span className=\"mr-1\">-</span>\n        )}\n\n        {intPlaces.map((place) => (\n          <NumberRoller\n            key={`int-${place}`}\n            prevValue={parseInt(adjustedPrevInt, 10)}\n            value={parseInt(newIntStr, 10)}\n            place={place}\n          />\n        ))}\n\n        {newDecStr && (\n          <>\n            <span>{decimalSeparator}</span>\n            {decPlaces.map((place) => (\n              <NumberRoller\n                key={`dec-${place}`}\n                prevValue={prevDecValue}\n                value={newDecValue}\n                place={place}\n              />\n            ))}\n          </>\n        )}\n      </span>\n    );\n  },\n);\n\nSlidingNumber.displayName = 'SlidingNumber';\n\nexport { SlidingNumber, type SlidingNumberProps };\n",
      "type": "registry:ui",
      "target": "components/animate-ui/sliding-number.tsx"
    }
  ]
}