{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sliding-number",
  "type": "registry:ui",
  "title": "Sliding Number",
  "description": "Sliding number component",
  "dependencies": [
    "motion",
    "react-use-measure"
  ],
  "files": [
    {
      "path": "registry/text/sliding-number.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport {\n  useSpring,\n  useTransform,\n  type MotionValue,\n  motion,\n} from 'motion/react';\nimport useMeasure from 'react-use-measure';\nimport { cn } from '@/lib/utils';\n\nfunction useInView(\n  ref: React.RefObject<Element | null>,\n  options?: IntersectionObserverInit,\n): boolean {\n  const [inView, setInView] = React.useState(false);\n  React.useEffect(() => {\n    if (!ref.current) return;\n    const observer = new IntersectionObserver(\n      ([entry]) => setInView(entry.isIntersecting),\n      { threshold: 0.1, ...options },\n    );\n    observer.observe(ref.current);\n    return () => observer.disconnect();\n  }, [ref, options]);\n  return inView;\n}\n\ninterface DigitProps {\n  prevValue: number;\n  value: number;\n  place: number;\n  transition?: {\n    type: 'spring';\n    stiffness: number;\n    damping: number;\n    mass: number;\n  };\n}\n\nconst Digit = ({ prevValue, value, place, transition }: DigitProps) => {\n  const startDigit = Math.floor(prevValue / place) % 10;\n  const targetDigit = Math.floor(value / place) % 10;\n  const animatedValue = useSpring(startDigit, transition);\n  React.useEffect(() => {\n    animatedValue.set(targetDigit);\n  }, [targetDigit, animatedValue]);\n  return (\n    <div className=\"relative inline-block w-[1ch] overflow-x-visible overflow-y-clip leading-none tabular-nums\">\n      <div className=\"invisible\">0</div>\n      {Array.from({ length: 10 }, (_, i) => (\n        <AnimatedDigit\n          key={i}\n          motionValue={animatedValue}\n          digit={i}\n          transition={transition}\n        />\n      ))}\n    </div>\n  );\n};\n\ninterface AnimatedDigitProps {\n  motionValue: MotionValue<number>;\n  digit: number;\n  transition?: {\n    type: 'spring';\n    stiffness: number;\n    damping: number;\n    mass: number;\n  };\n}\n\nconst AnimatedDigit = ({\n  motionValue,\n  digit,\n  transition,\n}: AnimatedDigitProps) => {\n  const [ref, bounds] = useMeasure();\n  const y = useTransform(motionValue, (latest) => {\n    if (!bounds.height) return 0;\n    const currentDigit = latest % 10;\n    const offset = (10 + digit - currentDigit) % 10;\n    let translateY = offset * bounds.height;\n    if (offset > 5) translateY -= 10 * bounds.height;\n    return translateY;\n  });\n  if (!bounds.height)\n    return (\n      <span ref={ref} className=\"invisible absolute\">\n        {digit}\n      </span>\n    );\n  return (\n    <motion.span\n      ref={ref}\n      style={{ y }}\n      className=\"absolute inset-0 flex items-center justify-center\"\n      transition={transition}\n    >\n      {digit}\n    </motion.span>\n  );\n};\n\ninterface SlidingNumberProps extends React.HTMLAttributes<HTMLSpanElement> {\n  number: number;\n  stiffness?: number;\n  damping?: number;\n  mass?: number;\n  startOnView?: boolean;\n}\n\nconst SlidingNumber = ({\n  number,\n  className,\n  stiffness = 180,\n  damping = 20,\n  mass = 0.4,\n  startOnView = false,\n  ...props\n}: SlidingNumberProps) => {\n  const containerRef = React.useRef<HTMLSpanElement>(null);\n  const inView = useInView(containerRef);\n  const effectiveNumber = startOnView && !inView ? 0 : Math.abs(number);\n  const prevNumberRef = React.useRef<number>(0);\n  const newStr = effectiveNumber.toString();\n  const [newIntStr, newDecStr] = newStr.split('.');\n  const prevStr = prevNumberRef.current.toString();\n  const [prevIntStr = '', prevDecStr = ''] = prevStr.split('.');\n  const adjustedPrevInt =\n    prevIntStr.length > newIntStr.length\n      ? prevIntStr.slice(-newIntStr.length)\n      : prevIntStr.padStart(newIntStr.length, '0');\n  const adjustedPrevDec = newDecStr\n    ? prevDecStr.length > newDecStr.length\n      ? prevDecStr.slice(0, newDecStr.length)\n      : prevDecStr.padEnd(newDecStr.length, '0')\n    : '';\n  React.useEffect(() => {\n    if (!startOnView || inView) {\n      prevNumberRef.current = effectiveNumber;\n    }\n  }, [effectiveNumber, newStr, inView, startOnView]);\n  const intDigitCount = newIntStr.length;\n  const intPlaces = Array.from({ length: intDigitCount }, (_, i) =>\n    Math.pow(10, intDigitCount - i - 1),\n  );\n  const decPlaces = newDecStr\n    ? Array.from({ length: newDecStr.length }, (_, i) =>\n        Math.pow(10, newDecStr.length - i - 1),\n      )\n    : [];\n  const newDecValue = newDecStr ? parseInt(newDecStr, 10) : 0;\n  const prevDecValue = adjustedPrevDec ? parseInt(adjustedPrevDec, 10) : 0;\n\n  return (\n    <span\n      ref={containerRef}\n      className={cn('flex items-center', className)}\n      {...props}\n    >\n      {!(startOnView && !inView) && number < 0 && (\n        <span className=\"mr-1\">-</span>\n      )}\n      {intPlaces.map((place) => (\n        <Digit\n          key={`int-${place}`}\n          prevValue={parseInt(adjustedPrevInt, 10)}\n          value={parseInt(newIntStr, 10)}\n          place={place}\n          transition={{ type: 'spring', stiffness, damping, mass }}\n        />\n      ))}\n      {newDecStr && (\n        <>\n          <span>.</span>\n          {decPlaces.map((place) => (\n            <Digit\n              key={`dec-${place}`}\n              prevValue={prevDecValue}\n              value={newDecValue}\n              place={place}\n              transition={{ type: 'spring', stiffness, damping, mass }}\n            />\n          ))}\n        </>\n      )}\n    </span>\n  );\n};\n\nexport { SlidingNumber, type SlidingNumberProps };\n",
      "type": "registry:ui",
      "target": "components/animate-ui/sliding-number.tsx"
    }
  ]
}