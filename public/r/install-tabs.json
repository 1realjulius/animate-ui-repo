{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "install-tabs",
  "type": "registry:ui",
  "title": "Install Tabs",
  "description": "Install tabs component",
  "dependencies": [
    "motion",
    "shiki",
    "next-themes",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://animate-ui.com/r/tabs"
  ],
  "files": [
    {
      "path": "registry/components/install-tabs/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { useTheme } from 'next-themes';\nimport { AnimatePresence, motion } from 'motion/react';\nimport { CheckIcon, CopyIcon } from 'lucide-react';\n\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n  TabsContents,\n  type TabsProps,\n} from '@/components/animate-ui/tabs';\nimport { cn } from '@/lib/utils';\n\ntype InstallTabsProps = {\n  commands: Record<string, string>;\n  lang?: string;\n  themes?: {\n    light: string;\n    dark: string;\n  };\n} & Omit<TabsProps, 'children'>;\n\nconst InstallTabs = React.forwardRef<HTMLDivElement, InstallTabsProps>(\n  (\n    {\n      commands,\n      lang = 'bash',\n      themes = {\n        light: 'github-light',\n        dark: 'github-dark',\n      },\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const { resolvedTheme } = useTheme();\n\n    const [highlightedCommands, setHighlightedCommands] = React.useState<\n      Record<string, string>\n    >({});\n    const [isCopied, setIsCopied] = React.useState(false);\n\n    React.useEffect(() => {\n      async function loadHighlightedCode() {\n        try {\n          const { codeToHtml } = await import('shiki');\n          const newHighlightedCommands: Record<string, string> = {};\n\n          for (const [command, value] of Object.entries(commands)) {\n            const highlighted = await codeToHtml(value, {\n              lang,\n              themes: {\n                light: themes.light,\n                dark: themes.dark,\n              },\n              defaultColor: resolvedTheme === 'dark' ? 'dark' : 'light',\n            });\n\n            newHighlightedCommands[command] = highlighted;\n          }\n\n          setHighlightedCommands(newHighlightedCommands);\n        } catch (error) {\n          console.error('Error highlighting commands', error);\n          setHighlightedCommands(commands);\n        }\n      }\n      loadHighlightedCode();\n    }, [commands, resolvedTheme, lang, themes.light, themes.dark]);\n\n    return (\n      <Tabs\n        ref={ref}\n        className={cn(\n          'w-full gap-0 dark:bg-neutral-800 bg-neutral-200 rounded-lg border border-neutral-200 dark:border-neutral-800',\n          className,\n        )}\n        {...(props as TabsProps)}\n      >\n        <TabsList\n          className=\"w-full relative justify-between rounded-b-none h-9 dark:text-white text-black dark:bg-neutral-800 bg-neutral-200 py-0 px-4\"\n          activeClassName=\"rounded-none shadow-none bg-transparent after:content-[''] after:absolute after:inset-x-0 after:h-0.5 after:bottom-0 dark:after:bg-white after:bg-black after:rounded-t-full\"\n        >\n          <div className=\"flex gap-x-3 h-full\">\n            {Object.keys(highlightedCommands).map((command) => (\n              <TabsTrigger\n                key={command}\n                value={command}\n                className=\"dark:text-neutral-400 text-neutral-500 dark:data-[state=active]:text-white data-[state=active]:text-black px-0\"\n              >\n                {command}\n              </TabsTrigger>\n            ))}\n          </div>\n\n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            className=\"size-6 rounded-sm -mr-2.5 hover:bg-neutral-300 dark:hover:bg-neutral-700 transition-colors flex items-center justify-center\"\n            onClick={() => {\n              if (isCopied) return;\n              setIsCopied(true);\n              setTimeout(() => {\n                setIsCopied(false);\n              }, 3000);\n            }}\n          >\n            <AnimatePresence mode=\"wait\">\n              {isCopied ? (\n                <motion.div\n                  key=\"check\"\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  exit={{ scale: 0 }}\n                  transition={{ duration: 0.15 }}\n                >\n                  <CheckIcon className=\"size-3.5\" />\n                </motion.div>\n              ) : (\n                <motion.div\n                  key=\"copy\"\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  exit={{ scale: 0 }}\n                  transition={{ duration: 0.15 }}\n                >\n                  <CopyIcon className=\"size-3.5\" />\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </motion.button>\n        </TabsList>\n        <TabsContents className=\"rounded-b-lg dark:bg-neutral-900 dark:text-white bg-neutral-100 text-black\">\n          {Object.entries(highlightedCommands).map(([command, value]) => (\n            <TabsContent\n              key={command}\n              className=\"h-12 w-full text-sm flex items-center px-4 overflow-auto\"\n              value={command}\n            >\n              <div\n                className=\"[&>pre,_&_code]:!bg-transparent [&>pre,_&_code]:[background:transparent_!important] [&>pre,_&_code]:border-none [&_code]:!text-sm\"\n                dangerouslySetInnerHTML={{ __html: value }}\n              />\n            </TabsContent>\n          ))}\n        </TabsContents>\n      </Tabs>\n    );\n  },\n);\n\nInstallTabs.displayName = 'InstallTabs';\n\nexport { InstallTabs, type InstallTabsProps };\n",
      "type": "registry:ui",
      "target": "components/animate-ui/install-tabs.tsx"
    }
  ]
}