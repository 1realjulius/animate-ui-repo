{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "motion-highlight",
  "type": "registry:ui",
  "title": "Motion Highlight",
  "description": "Motion highlight component that displays the motion highlight effect.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/effects/motion-highlight/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { AnimatePresence, Transition, motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ninterface MotionHighlightContextType {\n  activeValue: string | null;\n  setActiveValue: (value: string | null) => void;\n  id: string;\n  hover: boolean;\n  className?: string;\n  transition?: Transition;\n  disabled?: boolean;\n}\n\nconst MotionHighlightContext = React.createContext<\n  MotionHighlightContextType | undefined\n>(undefined);\n\nconst useMotionHighlight = (): MotionHighlightContextType => {\n  const context = React.useContext(MotionHighlightContext);\n  if (!context) {\n    throw new Error(\n      'useMotionHighlight must be used within a MotionHighlightProvider',\n    );\n  }\n  return context;\n};\n\ninterface BaseMotionHighlightProps {\n  value?: string | null;\n  defaultValue?: string | null;\n  onValueChange?: (value: string | null) => void;\n  className?: string;\n  transition?: Transition;\n  hover?: boolean;\n  containerClassName?: string;\n  disabled?: boolean;\n}\n\ninterface ControlledMotionHighlightProps extends BaseMotionHighlightProps {\n  controlledItems: true;\n  children: React.ReactNode;\n}\n\ninterface UncontrolledMotionHighlightProps extends BaseMotionHighlightProps {\n  controlledItems?: false;\n  children: React.ReactElement | React.ReactElement[];\n}\n\ntype MotionHighlightProps =\n  | ControlledMotionHighlightProps\n  | UncontrolledMotionHighlightProps;\n\nfunction MotionHighlight(props: MotionHighlightProps) {\n  const {\n    children,\n    value,\n    defaultValue,\n    onValueChange,\n    className,\n    transition = { type: 'spring', stiffness: 200, damping: 25 },\n    hover = false,\n    controlledItems,\n    containerClassName,\n    disabled = false,\n  } = props;\n\n  const [activeValue, setActiveValue] = React.useState<string | null>(\n    value ?? defaultValue ?? null,\n  );\n  const id = React.useId();\n\n  const handleSetActiveId = React.useCallback(\n    (id: string | null) => {\n      setActiveValue(id);\n      onValueChange?.(id);\n    },\n    [onValueChange],\n  );\n\n  React.useEffect(() => {\n    if (value !== undefined) setActiveValue(value);\n    else if (defaultValue !== undefined) setActiveValue(defaultValue);\n  }, [value, defaultValue]);\n\n  return (\n    <MotionHighlightContext.Provider\n      value={{\n        activeValue,\n        setActiveValue: handleSetActiveId,\n        id,\n        hover,\n        className,\n        transition,\n        disabled,\n      }}\n    >\n      {controlledItems\n        ? children\n        : React.Children.map(children, (child, index) => (\n            <MotionHighlightItem key={index} className={containerClassName}>\n              {child}\n            </MotionHighlightItem>\n          ))}\n    </MotionHighlightContext.Provider>\n  );\n}\n\nMotionHighlight.displayName = 'MotionHighlight';\n\ninterface ExtendedChildProps extends React.HTMLAttributes<HTMLElement> {\n  id?: string;\n  'data-active'?: string;\n  'data-value'?: string;\n  'data-disabled'?: string;\n}\n\ninterface MotionHighlightItemProps {\n  children: React.ReactElement;\n  id?: string;\n  value?: string;\n  className?: string;\n  transition?: Transition;\n  activeClassName?: string;\n  disabled?: boolean;\n}\n\nconst MotionHighlightItem = ({\n  children,\n  id,\n  value,\n  className,\n  transition,\n  disabled = false,\n  activeClassName,\n}: MotionHighlightItemProps) => {\n  const itemId = React.useId();\n  const {\n    activeValue,\n    setActiveValue,\n    hover,\n    className: contextClassName,\n    transition: contextTransition,\n    id: contextId,\n    disabled: contextDisabled,\n  } = useMotionHighlight();\n\n  if (!React.isValidElement(children)) return children;\n  const element = children as React.ReactElement<ExtendedChildProps>;\n\n  const childValue =\n    id ?? value ?? element.props?.['data-value'] ?? element.props?.id ?? itemId;\n  const isActive = activeValue === childValue;\n  const isDisabled = disabled === undefined ? contextDisabled : disabled;\n\n  return (\n    <div\n      key={childValue}\n      className={cn('relative', className)}\n      data-active={isActive ? 'true' : 'false'}\n      data-value={childValue}\n      aria-selected={isActive}\n      data-disabled={isDisabled ? 'true' : 'false'}\n      {...(hover\n        ? {\n            onMouseEnter: () => setActiveValue(childValue),\n            onMouseLeave: () => setActiveValue(null),\n          }\n        : {\n            onClick: () => setActiveValue(childValue),\n          })}\n    >\n      <AnimatePresence>\n        {isActive && !isDisabled && (\n          <motion.div\n            layoutId={`transition-background-${contextId}`}\n            className={cn(\n              'absolute inset-0 bg-muted z-0',\n              contextClassName,\n              activeClassName,\n            )}\n            transition={transition ?? contextTransition}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            data-active={isActive ? 'true' : 'false'}\n            aria-selected={isActive}\n            data-disabled={isDisabled ? 'true' : 'false'}\n            data-value={childValue}\n          />\n        )}\n      </AnimatePresence>\n      {React.cloneElement(element, {\n        className: cn('relative z-[1]', element.props.className),\n        'data-active': isActive ? 'true' : 'false',\n        'aria-selected': isActive,\n        'data-disabled': isDisabled ? 'true' : 'false',\n        'data-value': childValue,\n      })}\n    </div>\n  );\n};\n\nexport {\n  MotionHighlight,\n  MotionHighlightItem,\n  useMotionHighlight,\n  type MotionHighlightProps,\n  type MotionHighlightItemProps,\n};\n",
      "type": "registry:ui",
      "target": "components/animate-ui/motion-highlight.tsx"
    }
  ]
}