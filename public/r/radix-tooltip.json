{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "radix-tooltip",
  "type": "registry:ui",
  "title": "Radix Tooltip",
  "description": "Radix UI tooltip component",
  "dependencies": [
    "motion",
    "@radix-ui/react-tooltip"
  ],
  "files": [
    {
      "path": "registry/radix/radix-tooltip/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip';\nimport { AnimatePresence, motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\nconst TooltipProvider = TooltipPrimitive.Provider;\n\nconst TooltipContext = React.createContext<{ isOpen: boolean }>({\n  isOpen: false,\n});\n\nconst Tooltip: React.FC<\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Root>\n> = ({ children, ...props }) => {\n  const [isOpen, setIsOpen] = React.useState(\n    props?.open ?? props?.defaultOpen ?? false,\n  );\n\n  const handleOpenChange = React.useCallback(\n    (open: boolean) => {\n      setIsOpen(open);\n      props.onOpenChange?.(open);\n    },\n    [props],\n  );\n\n  return (\n    <TooltipContext.Provider value={{ isOpen }}>\n      <TooltipPrimitive.Root {...props} onOpenChange={handleOpenChange}>\n        {children}\n      </TooltipPrimitive.Root>\n    </TooltipContext.Provider>\n  );\n};\n\nconst TooltipTrigger = TooltipPrimitive.Trigger;\n\nconst TooltipContent = React.forwardRef<\n  React.ComponentRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, children, ...props }, ref) => {\n  const { isOpen } = React.useContext(TooltipContext);\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <TooltipPrimitive.Portal forceMount>\n          <TooltipPrimitive.Content\n            forceMount\n            sideOffset={sideOffset}\n            className=\"z-50\"\n            {...props}\n            ref={ref}\n          >\n            <motion.div\n              key=\"tooltip\"\n              initial={{ opacity: 0, scale: 0, y: 25 }}\n              animate={{ opacity: 1, scale: 1, y: 0 }}\n              exit={{ opacity: 0, scale: 0, y: 25 }}\n              transition={{ type: 'spring', stiffness: 300, damping: 20 }}\n              className={cn(\n                'relative overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md',\n                className,\n              )}\n            >\n              {children}\n            </motion.div>\n          </TooltipPrimitive.Content>\n        </TooltipPrimitive.Portal>\n      )}\n    </AnimatePresence>\n  );\n});\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };\n",
      "type": "registry:ui",
      "target": "components/animate-ui/radix-tooltip.tsx"
    }
  ]
}