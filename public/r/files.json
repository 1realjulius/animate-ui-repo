{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "files",
  "type": "registry:ui",
  "title": "Files",
  "description": "Files component",
  "dependencies": [
    "motion",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://animate-ui.com/r/motion-highlight",
    "https://animate-ui.com/r/radix-accordion"
  ],
  "files": [
    {
      "path": "registry/components/files/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { AnimatePresence, motion } from 'motion/react';\nimport { FileIcon, FolderClosedIcon, FolderOpenIcon } from 'lucide-react';\n\nimport { cn } from '@/lib/utils';\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionItemProps,\n  AccordionTrigger,\n  AccordionTriggerProps,\n  useAccordionItem,\n} from '@/registry/radix/radix-accordion';\nimport {\n  MotionHighlight,\n  MotionHighlightItem,\n} from '@/registry/effects/motion-highlight';\n\ninterface FileButtonProps extends React.HTMLAttributes<HTMLDivElement> {\n  icons?: {\n    close: React.ElementType;\n    open: React.ElementType;\n  };\n  icon?: React.ElementType;\n  open?: boolean;\n}\n\nconst FileButton = React.forwardRef<HTMLDivElement, FileButtonProps>(\n  ({ children, className, icons: Icons, icon: Icon, open, ...props }, ref) => {\n    return (\n      <MotionHighlightItem className=\"size-full\">\n        <div\n          ref={ref}\n          className={cn(\n            'flex items-center gap-2 p-2 h-10 relative z-10 rounded-lg w-full cursor-default',\n            className,\n          )}\n          {...props}\n        >\n          {Icon ? (\n            <Icon className=\"size-4\" />\n          ) : (\n            Icons && (\n              <AnimatePresence mode=\"wait\">\n                <motion.span\n                  key={open ? 'open' : 'close'}\n                  initial={{ scale: 0.9 }}\n                  animate={{ scale: 1 }}\n                  exit={{ scale: 0.9 }}\n                  transition={{ duration: 0.15 }}\n                >\n                  {open ? (\n                    <Icons.open className=\"size-4\" />\n                  ) : (\n                    <Icons.close className=\"size-4\" />\n                  )}\n                </motion.span>\n              </AnimatePresence>\n            )\n          )}\n          <span className=\"text-sm block truncate\">{children}</span>\n        </div>\n      </MotionHighlightItem>\n    );\n  },\n);\nFileButton.displayName = 'FileButton';\n\ntype FilesProps = React.HTMLAttributes<HTMLDivElement> & {\n  children: React.ReactNode;\n  activeClassName?: string;\n  defaultOpen?: string[];\n  open?: string[];\n  onOpenChange?: (open: string[]) => void;\n};\n\nconst Files = React.forwardRef<HTMLDivElement, FilesProps>(\n  (\n    {\n      children,\n      className,\n      activeClassName,\n      defaultOpen,\n      open,\n      onOpenChange,\n      ...props\n    },\n    ref,\n  ) => {\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'relative size-full rounded-xl border bg-background overflow-auto',\n          className,\n        )}\n        {...props}\n      >\n        <MotionHighlight\n          controlledItems\n          mode=\"parent\"\n          hover\n          className={cn(\n            'bg-muted rounded-lg pointer-events-none',\n            activeClassName,\n          )}\n        >\n          <Accordion\n            type=\"multiple\"\n            className=\"p-2\"\n            defaultValue={defaultOpen}\n            value={open}\n            onValueChange={onOpenChange}\n          >\n            {children}\n          </Accordion>\n        </MotionHighlight>\n      </div>\n    );\n  },\n);\nFiles.displayName = 'Files';\n\ntype FolderTriggerProps = AccordionTriggerProps;\n\nconst FolderTrigger = React.forwardRef<HTMLButtonElement, FolderTriggerProps>(\n  ({ children, className, ...props }, ref) => {\n    const { isOpen } = useAccordionItem();\n\n    return (\n      <AccordionTrigger\n        ref={ref}\n        className=\"h-auto py-0 hover:no-underline font-normal relative z-10\"\n        {...props}\n        chevron={false}\n      >\n        <FileButton\n          open={isOpen}\n          icons={{ open: FolderOpenIcon, close: FolderClosedIcon }}\n          className={className}\n        >\n          {children}\n        </FileButton>\n      </AccordionTrigger>\n    );\n  },\n);\nFolderTrigger.displayName = 'FolderTrigger';\n\ntype FolderProps = Omit<\n  AccordionItemProps,\n  'value' | 'onValueChange' | 'defaultValue'\n> & {\n  name: string;\n  open?: string[];\n  onOpenChange?: (open: string[]) => void;\n  defaultOpen?: string[];\n};\n\nconst Folder = React.forwardRef<HTMLDivElement, FolderProps>(\n  (\n    { children, className, name, open, defaultOpen, onOpenChange, ...props },\n    ref,\n  ) => (\n    <AccordionItem\n      ref={ref}\n      value={name}\n      className=\"relative border-b-0\"\n      {...props}\n    >\n      <FolderTrigger className={className}>{name}</FolderTrigger>\n      <AccordionContent className=\"relative pb-0 !ml-7 before:absolute before:-left-3 before:inset-y-0 before:w-px before:h-full before:bg-border\">\n        <Accordion\n          type=\"multiple\"\n          defaultValue={defaultOpen}\n          value={open}\n          onValueChange={onOpenChange}\n        >\n          {children}\n        </Accordion>\n      </AccordionContent>\n    </AccordionItem>\n  ),\n);\nFolder.displayName = 'Folder';\n\ntype FileProps = Omit<React.HTMLAttributes<HTMLDivElement>, 'children'> & {\n  name: string;\n};\n\nconst File = React.forwardRef<HTMLDivElement, FileProps>(\n  ({ name, className, ...props }, ref) => (\n    <FileButton ref={ref} icon={FileIcon} className={className} {...props}>\n      {name}\n    </FileButton>\n  ),\n);\nFile.displayName = 'File';\n\nexport {\n  Files,\n  Folder,\n  File,\n  type FilesProps,\n  type FolderProps,\n  type FileProps,\n};\n",
      "type": "registry:ui",
      "target": "components/animate-ui/files.tsx"
    }
  ]
}