{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-in-view",
  "type": "registry:hook",
  "title": "Use In View",
  "description": "Custom hook to detect when an element is in view.",
  "files": [
    {
      "path": "registry/hooks/use-in-view.ts",
      "content": "'use client';\n\nimport * as React from 'react';\n\n/**\n * Custom hook to detect if an element is in the viewport using IntersectionObserver.\n * @param options - IntersectionObserver options (e.g., threshold, root, etc.)\n * @returns A tuple with a ref to attach to the element and a boolean indicating if the element is in view.\n */\nfunction useInView<T extends HTMLElement>(\n  options?: IntersectionObserverInit,\n): [React.RefObject<T | null>, boolean] {\n  const ref = React.useRef<T | null>(null);\n  const [inView, setInView] = React.useState(false);\n\n  React.useEffect(() => {\n    const element = ref.current;\n    if (!element) return;\n\n    const observer = new IntersectionObserver(([entry]) => {\n      setInView(entry.isIntersecting);\n    }, options);\n\n    observer.observe(element);\n\n    return () => {\n      observer.unobserve(element);\n      observer.disconnect();\n    };\n  }, [options]);\n\n  return [ref, inView];\n}\n\nexport { useInView };\n",
      "type": "registry:hook",
      "target": "hooks/use-in-view.ts"
    }
  ]
}