{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tabs",
  "type": "registry:ui",
  "title": "Tabs",
  "description": "Tabs component",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/components/tabs/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ninterface TabsContextProps {\n  activeValue: string;\n  handleValueChange: (value: string) => void;\n  registerTrigger: (value: string, node: HTMLElement | null) => void;\n  getTrigger: (value: string) => HTMLElement | null;\n}\n\nconst TabsContext = React.createContext<TabsContextProps | undefined>(\n  undefined,\n);\n\ntype TabsProps =\n  | {\n      defaultValue?: string;\n      children: React.ReactNode;\n      className?: string;\n      value?: never;\n      onValueChange?: never;\n    }\n  | {\n      value: string;\n      onValueChange?: (value: string) => void;\n      children: React.ReactNode;\n      className?: string;\n      defaultValue?: never;\n    };\n\nconst Tabs = React.forwardRef<HTMLDivElement, TabsProps>(\n  (\n    { defaultValue, value, onValueChange, children, className },\n    forwardedRef,\n  ) => {\n    const [activeValue, setActiveValue] = React.useState(defaultValue);\n    const triggersRef = React.useRef(new Map<string, HTMLElement>());\n\n    React.useEffect(() => {\n      if (activeValue === undefined && triggersRef.current.size > 0) {\n        const firstTab = Array.from(triggersRef.current.keys())[0];\n        setActiveValue(firstTab);\n      }\n    }, [activeValue]);\n\n    const registerTrigger = (value: string, node: HTMLElement | null) => {\n      if (node) {\n        triggersRef.current.set(value, node);\n      } else {\n        triggersRef.current.delete(value);\n      }\n    };\n\n    const getTrigger = (value: string): HTMLElement | null => {\n      return triggersRef.current.get(value) || null;\n    };\n\n    const handleValueChange = (val: string) => {\n      if (value === undefined) {\n        setActiveValue(val);\n      } else {\n        onValueChange?.(val);\n      }\n    };\n\n    const setRef = (node: HTMLDivElement | null) => {\n      if (forwardedRef) {\n        if (typeof forwardedRef === 'function') {\n          forwardedRef(node);\n        } else {\n          (forwardedRef as React.RefObject<HTMLDivElement | null>).current =\n            node;\n        }\n      }\n    };\n\n    return (\n      <TabsContext.Provider\n        value={{\n          activeValue: (value ?? activeValue)!,\n          handleValueChange,\n          registerTrigger,\n          getTrigger,\n        }}\n      >\n        <div ref={setRef} className={cn('flex flex-col gap-2', className)}>\n          {children}\n        </div>\n      </TabsContext.Provider>\n    );\n  },\n);\nTabs.displayName = 'Tabs';\n\ninterface TabsListProps {\n  children: React.ReactNode;\n  className?: string;\n  activeClassName?: string;\n}\n\nconst TabsList = React.forwardRef<HTMLDivElement, TabsListProps>(\n  ({ children, className, activeClassName }, forwardedRef) => {\n    const containerRef = React.useRef<HTMLDivElement>(null);\n    const { activeValue, getTrigger } = React.useContext(TabsContext)!;\n    const [indicatorStyle, setIndicatorStyle] = React.useState({\n      left: 0,\n      top: 0,\n      width: 0,\n      height: 0,\n    });\n\n    const updateIndicator = React.useCallback(() => {\n      if (!containerRef.current) return;\n\n      const trigger = getTrigger(activeValue);\n      if (!trigger) return;\n\n      const containerRect = containerRef.current.getBoundingClientRect();\n      const triggerRect = trigger.getBoundingClientRect();\n\n      setIndicatorStyle({\n        left: triggerRect.left - containerRect.left,\n        top: triggerRect.top - containerRect.top,\n        width: triggerRect.width,\n        height: triggerRect.height,\n      });\n    }, [activeValue, getTrigger]);\n\n    React.useEffect(() => {\n      updateIndicator();\n      window.addEventListener('resize', updateIndicator);\n      return () => window.removeEventListener('resize', updateIndicator);\n    }, [updateIndicator, children]);\n\n    const setRef = (node: HTMLDivElement | null) => {\n      containerRef.current = node;\n      if (forwardedRef) {\n        if (typeof forwardedRef === 'function') {\n          forwardedRef(node);\n        } else {\n          (forwardedRef as React.RefObject<HTMLDivElement | null>).current =\n            node;\n        }\n      }\n    };\n\n    return (\n      <div ref={setRef} className=\"relative\">\n        <div\n          role=\"tablist\"\n          className={cn(\n            'bg-muted text-muted-foreground inline-flex h-10 w-fit items-center justify-center rounded-lg p-[4px]',\n            className,\n          )}\n        >\n          {children}\n        </div>\n        <motion.div\n          className={cn(\n            'absolute rounded-sm bg-background shadow-sm',\n            activeClassName,\n          )}\n          animate={{\n            left: indicatorStyle.left,\n            width: indicatorStyle.width,\n            top: indicatorStyle.top,\n            height: indicatorStyle.height,\n          }}\n          transition={{\n            type: 'spring',\n            bounce: 0,\n            stiffness: 300,\n            damping: 30,\n          }}\n        />\n      </div>\n    );\n  },\n);\nTabsList.displayName = 'TabsList';\n\ninterface TabsTriggerProps {\n  value: string;\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst TabsTrigger = React.forwardRef<HTMLButtonElement, TabsTriggerProps>(\n  ({ value, children, className }, forwardedRef) => {\n    const { activeValue, handleValueChange, registerTrigger } =\n      React.useContext(TabsContext)!;\n\n    const setRef = (node: HTMLButtonElement | null) => {\n      registerTrigger(value, node);\n      if (forwardedRef) {\n        if (typeof forwardedRef === 'function') {\n          forwardedRef(node);\n        } else {\n          (forwardedRef as React.RefObject<HTMLButtonElement | null>).current =\n            node;\n        }\n      }\n    };\n\n    return (\n      <motion.button\n        role=\"tab\"\n        whileTap={{ scale: 0.95 }}\n        ref={setRef}\n        onClick={() => handleValueChange(value)}\n        data-state={activeValue === value ? 'active' : 'inactive'}\n        className={cn(\n          'inline-flex items-center h-full justify-center whitespace-nowrap rounded-sm px-2 py-1 text-sm font-medium ring-offset-background transition-transform focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:text-foreground z-10',\n          className,\n        )}\n      >\n        {children}\n      </motion.button>\n    );\n  },\n);\nTabsTrigger.displayName = 'TabsTrigger';\n\ninterface TabsContentsProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst TabsContents = React.forwardRef<HTMLDivElement, TabsContentsProps>(\n  ({ children, className }, forwardedRef) => {\n    const { activeValue } = React.useContext(TabsContext)!;\n    const childrenArray = React.Children.toArray(children);\n    const activeIndex = childrenArray.findIndex(\n      (child): child is React.ReactElement<{ value: string }> =>\n        React.isValidElement(child) &&\n        typeof child.props === 'object' &&\n        child.props !== null &&\n        'value' in child.props &&\n        child.props.value === activeValue,\n    );\n\n    const setRef = (node: HTMLDivElement | null) => {\n      if (forwardedRef) {\n        if (typeof forwardedRef === 'function') {\n          forwardedRef(node);\n        } else {\n          (forwardedRef as React.RefObject<HTMLDivElement | null>).current =\n            node;\n        }\n      }\n    };\n\n    return (\n      <div ref={setRef} className={cn('overflow-hidden', className)}>\n        <motion.div\n          className=\"flex\"\n          animate={{ x: activeIndex * -100 + '%' }}\n          transition={{ duration: 0.3, ease: 'easeInOut' }}\n        >\n          {childrenArray.map((child, index) => (\n            <div key={index} className=\"w-full flex-shrink-0\">\n              {child}\n            </div>\n          ))}\n        </motion.div>\n      </div>\n    );\n  },\n);\nTabsContents.displayName = 'TabsContents';\n\ninterface TabsContentProps {\n  value: string;\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst TabsContent = React.forwardRef<HTMLDivElement, TabsContentProps>(\n  ({ children, className }, forwardedRef) => {\n    return (\n      <div role=\"tabpanel\" ref={forwardedRef} className={className}>\n        {children}\n      </div>\n    );\n  },\n);\nTabsContent.displayName = 'TabsContent';\n\nexport {\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  TabsContents,\n  TabsContent,\n  type TabsProps,\n  type TabsListProps,\n  type TabsTriggerProps,\n  type TabsContentsProps,\n  type TabsContentProps,\n};\n",
      "type": "registry:ui",
      "target": "components/animate-ui/tabs.tsx"
    }
  ]
}