{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "radix-accordion",
  "type": "registry:ui",
  "title": "Radix Accordion",
  "description": "Radix UI accordion component",
  "dependencies": [
    "motion",
    "@radix-ui/react-accordion"
  ],
  "files": [
    {
      "path": "registry/radix/accordion.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport * as AccordionPrimitive from '@radix-ui/react-accordion';\nimport { ChevronDown } from 'lucide-react';\nimport { motion, AnimatePresence } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ninterface AccordionItemContextValue {\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n}\n\nconst AccordionItemContext = React.createContext<\n  AccordionItemContextValue | undefined\n>(undefined);\n\nconst Accordion = AccordionPrimitive.Root;\n\nconst AccordionItem = React.forwardRef<\n  React.ComponentRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item> & {\n    children: React.ReactNode;\n  }\n>(({ className, children, ...props }, ref) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  return (\n    <AccordionPrimitive.Item\n      ref={ref}\n      className={cn('border-b', className)}\n      {...props}\n    >\n      <AccordionItemContext.Provider value={{ isOpen, setIsOpen }}>\n        {children}\n      </AccordionItemContext.Provider>\n    </AccordionPrimitive.Item>\n  );\n});\nAccordionItem.displayName = 'AccordionItem';\n\nconst AccordionTrigger = React.forwardRef<\n  React.ComponentRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => {\n  const triggerRef = React.useRef<HTMLButtonElement | null>(null);\n  const context = React.useContext(AccordionItemContext);\n\n  if (!context) {\n    throw new Error('AccordionTrigger must be used within an AccordionItem');\n  }\n\n  React.useEffect(() => {\n    const node = triggerRef.current;\n    if (!node) return;\n\n    const observer = new MutationObserver((mutationsList) => {\n      mutationsList.forEach((mutation) => {\n        if (mutation.attributeName === 'data-state') {\n          const currentState = node.getAttribute('data-state');\n          context.setIsOpen(currentState === 'open');\n        }\n      });\n    });\n    observer.observe(node, {\n      attributes: true,\n      attributeFilter: ['data-state'],\n    });\n    const initialState = node.getAttribute('data-state');\n    context.setIsOpen(initialState === 'open');\n    return () => {\n      observer.disconnect();\n    };\n  }, [context]);\n\n  return (\n    <AccordionPrimitive.Header className=\"flex\">\n      <AccordionPrimitive.Trigger\n        ref={(node) => {\n          triggerRef.current = node;\n          if (typeof ref === 'function') {\n            ref(node);\n          } else if (ref) {\n            (ref as React.RefObject<HTMLButtonElement | null>).current = node;\n          }\n        }}\n        className={cn(\n          'flex flex-1 items-center justify-between py-4 font-medium hover:underline',\n          className,\n        )}\n        {...props}\n      >\n        {children}\n        <motion.div\n          animate={{ rotate: context.isOpen ? 180 : 0 }}\n          transition={{ type: 'spring', stiffness: 150, damping: 17 }}\n        >\n          <ChevronDown className=\"size-5 shrink-0\" />\n        </motion.div>\n      </AccordionPrimitive.Trigger>\n    </AccordionPrimitive.Header>\n  );\n});\nAccordionTrigger.displayName = 'AccordionTrigger';\n\nconst AccordionContent = React.forwardRef<\n  React.ComponentRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => {\n  const context = React.useContext(AccordionItemContext);\n\n  if (!context) {\n    throw new Error('AccordionContent must be used within an AccordionItem');\n  }\n\n  return (\n    <AnimatePresence>\n      {context.isOpen && (\n        <AccordionPrimitive.Content forceMount {...props}>\n          <motion.div\n            key=\"accordion-content\"\n            initial={{ height: 0, opacity: 0, '--mask-stop': '0%' }}\n            animate={{ height: 'auto', opacity: 1, '--mask-stop': '100%' }}\n            exit={{ height: 0, opacity: 0, '--mask-stop': '0%' }}\n            transition={{ type: 'spring', stiffness: 150, damping: 17 }}\n            style={{\n              maskImage:\n                'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n              WebkitMaskImage:\n                'linear-gradient(black var(--mask-stop), transparent var(--mask-stop))',\n            }}\n            className={cn('overflow-hidden text-sm', className)}\n            ref={ref}\n          >\n            <div className=\"pb-4 pt-0\">{children}</div>\n          </motion.div>\n        </AccordionPrimitive.Content>\n      )}\n    </AnimatePresence>\n  );\n});\nAccordionContent.displayName = 'AccordionContent';\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\n",
      "type": "registry:ui",
      "target": "components/animate-ui/radix-accordion.tsx"
    }
  ]
}