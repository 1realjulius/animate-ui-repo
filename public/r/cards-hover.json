{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cards-hover",
  "type": "registry:ui",
  "title": "Cards Hover",
  "description": "Cards hover component",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/components/cards-hover/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { AnimatePresence, motion, Transition } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\nconst EXIT_DELAY = 0.3;\n\ninterface CardsHoverContextValue {\n  activeValue: string | null;\n  setActiveValue: (value: string | null) => void;\n  scheduleReset: () => void;\n  clearReset: () => void;\n}\n\nconst CardsHoverContext = React.createContext<\n  CardsHoverContextValue | undefined\n>(undefined);\n\ninterface CardsHoverProps\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'value' | 'defaultValue'> {\n  value?: string | null;\n  defaultValue?: string | null;\n  onValueChange?: (value: string | null) => void;\n}\n\nconst CardsHover = React.forwardRef<HTMLDivElement, CardsHoverProps>(\n  ({ value, defaultValue, onValueChange, className, ...props }, ref) => {\n    const [activeValue, setActiveValueState] = React.useState<string | null>(\n      value ?? defaultValue ?? null,\n    );\n\n    const exitTimeoutRef = React.useRef<ReturnType<typeof setTimeout> | null>(\n      null,\n    );\n\n    const scheduleReset = React.useCallback(() => {\n      if (exitTimeoutRef.current) {\n        clearTimeout(exitTimeoutRef.current);\n      }\n      exitTimeoutRef.current = setTimeout(() => {\n        setActiveValueState(null);\n        exitTimeoutRef.current = null;\n        onValueChange?.(null);\n      }, EXIT_DELAY * 1000);\n    }, [onValueChange]);\n\n    const clearReset = React.useCallback(() => {\n      if (exitTimeoutRef.current) {\n        clearTimeout(exitTimeoutRef.current);\n        exitTimeoutRef.current = null;\n      }\n    }, []);\n\n    React.useEffect(() => {\n      return () => {\n        if (exitTimeoutRef.current) {\n          clearTimeout(exitTimeoutRef.current);\n        }\n      };\n    }, []);\n\n    React.useEffect(() => {\n      if (value !== undefined) {\n        setActiveValueState(value);\n      }\n    }, [value]);\n\n    const setActiveValue = (val: string | null) => {\n      clearReset();\n      setActiveValueState(val);\n      onValueChange?.(val);\n    };\n\n    const contextValue = {\n      activeValue,\n      setActiveValue,\n      scheduleReset,\n      clearReset,\n    };\n\n    return (\n      <CardsHoverContext.Provider value={contextValue}>\n        <div\n          ref={ref}\n          className={cn(\n            'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4',\n            className,\n          )}\n          {...props}\n        />\n      </CardsHoverContext.Provider>\n    );\n  },\n);\n\ninterface CardHoverProps extends React.HTMLAttributes<HTMLDivElement> {\n  value: string;\n  transition?: Transition;\n}\n\nconst CardHover = React.forwardRef<HTMLDivElement, CardHoverProps>(\n  (\n    {\n      value,\n      className,\n      transition = { type: 'spring', stiffness: 200, damping: 20 },\n      ...props\n    },\n    ref,\n  ) => {\n    const { activeValue, setActiveValue, scheduleReset, clearReset } =\n      React.useContext(CardsHoverContext)!;\n\n    const handleMouseEnter = (e: React.MouseEvent<HTMLDivElement>) => {\n      clearReset();\n      setActiveValue(value);\n      props.onMouseEnter?.(e);\n    };\n\n    const handleMouseLeave = (e: React.MouseEvent<HTMLDivElement>) => {\n      scheduleReset();\n      props.onMouseLeave?.(e);\n    };\n\n    return (\n      <div\n        key={value}\n        className=\"relative block h-full w-full\"\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n      >\n        <AnimatePresence>\n          {activeValue === value && (\n            <motion.div\n              className=\"absolute inset-0 h-full w-full bg-neutral-100 dark:bg-neutral-900 rounded-lg\"\n              layoutId=\"hoverBackground\"\n              initial={{ opacity: 0 }}\n              animate={{\n                opacity: 1,\n                transition,\n              }}\n              exit={{\n                opacity: 0,\n                transition: {\n                  ...transition,\n                  delay: EXIT_DELAY + (transition?.delay ?? 0),\n                },\n              }}\n            />\n          )}\n        </AnimatePresence>\n        <div\n          ref={ref}\n          className={cn(\n            'h-full w-full p-4 overflow-hidden rounded-lg border relative z-20',\n            className,\n          )}\n          {...props}\n        />\n      </div>\n    );\n  },\n);\n\nexport { CardsHover, CardHover };\n",
      "type": "registry:ui",
      "target": "components/animate-ui/cards-hover.tsx"
    }
  ]
}