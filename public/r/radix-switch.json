{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "radix-switch",
  "type": "registry:ui",
  "title": "Radix Switch",
  "description": "Radix UI switch component",
  "dependencies": [
    "motion",
    "@radix-ui/react-switch"
  ],
  "files": [
    {
      "path": "registry/radix/switch.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport * as SwitchPrimitives from '@radix-ui/react-switch';\nimport { motion, type HTMLMotionProps } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\nconst MotionSwitch = motion.create(SwitchPrimitives.Root);\nconst MotionThumb = motion.create(SwitchPrimitives.Thumb);\n\ntype SwitchProps = React.ComponentPropsWithoutRef<\n  typeof SwitchPrimitives.Root\n> &\n  HTMLMotionProps<'button'> & {\n    leftIcon?: React.ElementType;\n    rightIcon?: React.ElementType;\n    thumbIcon?: React.ElementType;\n  };\n\nconst Switch = React.forwardRef<\n  React.ComponentRef<typeof SwitchPrimitives.Root>,\n  SwitchProps\n>(\n  (\n    {\n      className,\n      leftIcon: LeftIcon,\n      rightIcon: RightIcon,\n      thumbIcon: ThumbIcon,\n      ...props\n    },\n    ref,\n  ) => {\n    const switchRef = React.useRef<HTMLButtonElement>(null);\n    React.useImperativeHandle(\n      ref,\n      () => switchRef.current as HTMLButtonElement,\n    );\n\n    const [isChecked, setIsChecked] = React.useState(false);\n\n    React.useEffect(() => {\n      if (!switchRef.current) return;\n\n      if (props.checked !== undefined) {\n        setIsChecked(props.checked);\n      }\n\n      const observer = new MutationObserver((mutationsList) => {\n        mutationsList.forEach((mutation) => {\n          if (mutation.attributeName === 'data-state') {\n            const currentState = switchRef.current?.getAttribute('data-state');\n            setIsChecked(currentState === 'checked');\n          }\n        });\n      });\n\n      observer.observe(switchRef.current, {\n        attributes: true,\n        attributeFilter: ['data-state'],\n      });\n\n      const initialState = switchRef.current.getAttribute('data-state');\n      setIsChecked(initialState === 'checked');\n\n      return () => {\n        observer.disconnect();\n      };\n    }, [props.checked]);\n\n    const thumbVariants = React.useMemo(\n      () => ({\n        tap: {\n          width: '25px',\n          translateX: isChecked ? '20px' : '3px',\n          transition: { duration: 0.1 },\n        },\n        checked: {\n          translateX: '23px',\n          transition: { ease: 'circInOut' },\n        },\n        unchecked: {\n          translateX: '3px',\n          transition: { ease: 'circInOut' },\n        },\n      }),\n      [isChecked],\n    );\n\n    return (\n      <MotionSwitch\n        ref={switchRef}\n        className={cn(\n          'inline-flex items-center h-7 w-12 shrink-0 cursor-pointer bg-neutral-100 dark:bg-neutral-800 rounded-full relative data-[state=checked]:bg-neutral-950 dark:data-[state=checked]:bg-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50',\n          className,\n        )}\n        whileTap=\"tap\"\n        animate={isChecked ? 'checked' : 'unchecked'}\n        {...props}\n      >\n        {LeftIcon && (\n          <motion.div\n            animate={\n              isChecked ? { scale: 1, opacity: 1 } : { scale: 0, opacity: 0 }\n            }\n            transition={{ type: 'spring', bounce: 0 }}\n            className=\"absolute top-1/2 -translate-y-1/2 left-1.5 dark:text-neutral-500 text-neutral-400\"\n          >\n            <LeftIcon className=\"size-[14px]\" />\n          </motion.div>\n        )}\n\n        {RightIcon && (\n          <motion.div\n            animate={\n              isChecked ? { scale: 0, opacity: 0 } : { scale: 1, opacity: 1 }\n            }\n            transition={{ type: 'spring', bounce: 0 }}\n            className=\"absolute top-1/2 -translate-y-1/2 right-1.5 dark:text-neutral-400 text-neutral-500\"\n          >\n            <RightIcon className=\"size-[14px]\" />\n          </motion.div>\n        )}\n\n        <MotionThumb\n          initial={{ translateX: '2px' }}\n          className=\"size-[22px] bg-white dark:bg-neutral-950 text-neutral-500 dark:text-neutral-400 rounded-full shadow-sm flex items-center justify-center\"\n          variants={thumbVariants}\n        >\n          {ThumbIcon && <ThumbIcon className=\"size-[14px]\" />}\n        </MotionThumb>\n      </MotionSwitch>\n    );\n  },\n);\nSwitch.displayName = SwitchPrimitives.Root.displayName;\n\nexport { Switch, type SwitchProps };\n",
      "type": "registry:ui",
      "target": "components/animate-ui/radix-switch.tsx"
    }
  ]
}