{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "radix-tabs",
  "type": "registry:ui",
  "title": "Radix Tabs",
  "description": "Radix UI tabs component",
  "dependencies": [
    "motion",
    "@radix-ui/react-tabs"
  ],
  "files": [
    {
      "path": "registry/radix/radix-tabs/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport * as TabsPrimitive from '@radix-ui/react-tabs';\nimport { type HTMLMotionProps, type Transition, motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ntype TabsProps = React.ComponentProps<typeof TabsPrimitive.Root>;\n\nconst Tabs = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Root>,\n  TabsProps\n>(({ className, ...props }, ref) => {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      ref={ref}\n      className={cn('flex flex-col gap-2', className)}\n      {...props}\n    />\n  );\n});\nTabs.displayName = 'Tabs';\n\ntype TabsListProps = React.ComponentProps<typeof TabsPrimitive.List> & {\n  activeClassName?: string;\n  transition?: Transition;\n};\n\nconst TabsList = React.forwardRef<HTMLDivElement, TabsListProps>(\n  (\n    {\n      className,\n      activeClassName,\n      transition = {\n        type: 'spring',\n        bounce: 0,\n        stiffness: 200,\n        damping: 25,\n      },\n      ...props\n    },\n    ref,\n  ) => {\n    const localRef = React.useRef<HTMLDivElement | null>(null);\n    React.useImperativeHandle(ref, () => localRef.current as HTMLDivElement);\n\n    const [indicatorStyle, setIndicatorStyle] = React.useState({\n      left: 0,\n      top: 0,\n      width: 0,\n      height: 0,\n    });\n\n    const updateIndicator = React.useCallback(() => {\n      if (!localRef.current) return;\n\n      const activeTab = localRef.current.querySelector<HTMLElement>(\n        '[data-state=\"active\"]',\n      );\n      if (!activeTab) return;\n\n      const activeRect = activeTab.getBoundingClientRect();\n      const tabsRect = localRef.current.getBoundingClientRect();\n\n      setIndicatorStyle({\n        left: activeRect.left - tabsRect.left,\n        top: activeRect.top - tabsRect.top,\n        width: activeRect.width,\n        height: activeRect.height,\n      });\n    }, []);\n\n    React.useEffect(() => {\n      updateIndicator();\n      window.addEventListener('resize', updateIndicator);\n      const observer = new MutationObserver(updateIndicator);\n\n      if (localRef.current) {\n        observer.observe(localRef.current, {\n          attributes: true,\n          childList: true,\n          subtree: true,\n        });\n      }\n\n      return () => {\n        window.removeEventListener('resize', updateIndicator);\n        observer.disconnect();\n      };\n    }, [updateIndicator]);\n\n    return (\n      <div className=\"relative\" ref={localRef}>\n        <TabsPrimitive.List\n          data-slot=\"tabs-list\"\n          className={cn(\n            'bg-muted text-muted-foreground inline-flex h-10 w-fit items-center justify-center rounded-lg p-[4px]',\n            className,\n          )}\n          {...props}\n        />\n        <motion.div\n          className={cn(\n            'absolute rounded-sm bg-background shadow-sm',\n            activeClassName,\n          )}\n          animate={{\n            left: indicatorStyle.left,\n            top: indicatorStyle.top,\n            width: indicatorStyle.width,\n            height: indicatorStyle.height,\n          }}\n          transition={transition}\n        />\n      </div>\n    );\n  },\n);\nTabsList.displayName = 'TabsList';\n\ntype TabsTriggerProps = React.ComponentProps<typeof TabsPrimitive.Trigger>;\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  TabsTriggerProps\n>(({ className, ...props }, ref) => {\n  return (\n    <TabsPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        'inline-flex items-center h-full justify-center whitespace-nowrap rounded-sm px-2 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:text-foreground z-[1]',\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nTabsTrigger.displayName = 'TabsTrigger';\n\ntype TabsContentProps = React.ComponentProps<typeof TabsPrimitive.Content> & {\n  transition?: Transition;\n};\n\nconst TabsContent = React.forwardRef<HTMLDivElement, TabsContentProps>(\n  (\n    {\n      className,\n      children,\n      transition = {\n        duration: 0.5,\n        ease: 'easeInOut',\n      },\n      ...props\n    },\n    ref,\n  ) => {\n    return (\n      <TabsPrimitive.Content\n        asChild\n        data-slot=\"tabs-content\"\n        className={cn('flex-1 outline-none', className)}\n        {...props}\n      >\n        <motion.div\n          ref={ref}\n          layout\n          initial={{ opacity: 0, filter: 'blur(4px)' }}\n          animate={{ opacity: 1, filter: 'blur(0px)' }}\n          exit={{ opacity: 0, filter: 'blur(4px)' }}\n          transition={transition}\n        >\n          {children}\n        </motion.div>\n      </TabsPrimitive.Content>\n    );\n  },\n);\nTabsContent.displayName = 'TabsContent';\n\ntype TabsContentsProps = {\n  children: React.ReactNode;\n  className?: string;\n  transition?: Transition;\n} & HTMLMotionProps<'div'>;\n\nconst TabsContents = React.forwardRef<HTMLDivElement, TabsContentsProps>(\n  (\n    {\n      children,\n      className,\n      transition = { type: 'spring', stiffness: 200, damping: 25 },\n    },\n    ref,\n  ) => {\n    const containerRef = React.useRef<HTMLDivElement | null>(null);\n    React.useImperativeHandle(\n      ref,\n      () => containerRef.current as HTMLDivElement,\n    );\n\n    const [height, setHeight] = React.useState(0);\n\n    React.useEffect(() => {\n      if (!containerRef.current) return;\n\n      const resizeObserver = new ResizeObserver((entries) => {\n        const newHeight = entries[0].contentRect.height;\n        requestAnimationFrame(() => {\n          setHeight(newHeight);\n        });\n      });\n\n      resizeObserver.observe(containerRef.current);\n\n      return () => {\n        resizeObserver.disconnect();\n      };\n    }, [children]);\n\n    React.useLayoutEffect(() => {\n      if (containerRef.current) {\n        const initialHeight =\n          containerRef.current.getBoundingClientRect().height;\n        setHeight(initialHeight);\n      }\n    }, [children]);\n\n    return (\n      <motion.div\n        layout\n        animate={{ height: height }}\n        transition={transition}\n        className={className}\n      >\n        <div ref={containerRef}>{children}</div>\n      </motion.div>\n    );\n  },\n);\nTabsContents.displayName = 'TabsContents';\n\nexport {\n  Tabs,\n  TabsList,\n  TabsTrigger,\n  TabsContent,\n  TabsContents,\n  type TabsProps,\n  type TabsListProps,\n  type TabsTriggerProps,\n  type TabsContentProps,\n  type TabsContentsProps,\n};\n",
      "type": "registry:ui",
      "target": "components/animate-ui/radix-tabs.tsx"
    }
  ]
}