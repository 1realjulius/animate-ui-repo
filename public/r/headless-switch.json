{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "headless-switch",
  "type": "registry:ui",
  "title": "Headless Switch",
  "description": "Headless UI switch component",
  "dependencies": [
    "@headlessui/react",
    "motion"
  ],
  "files": [
    {
      "path": "registry/headless/headless-switch/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { Switch as SwitchPrimitive } from '@headlessui/react';\nimport { motion } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ntype SwitchProps = React.ComponentPropsWithoutRef<\n  typeof SwitchPrimitive<typeof motion.button>\n> & {\n  leftIcon?: React.ElementType;\n  rightIcon?: React.ElementType;\n  thumbIcon?: React.ElementType;\n  onCheckedChange?: (checked: boolean) => void;\n};\n\nconst Switch = React.forwardRef<HTMLButtonElement, SwitchProps>(\n  (\n    {\n      className,\n      leftIcon: LeftIcon,\n      rightIcon: RightIcon,\n      thumbIcon: ThumbIcon,\n      onChange,\n      as = motion.button,\n      ...props\n    },\n    ref,\n  ) => {\n    const [isChecked, setIsChecked] = React.useState(\n      props.checked ?? props.defaultChecked ?? false,\n    );\n    const [isTapped, setIsTapped] = React.useState(false);\n\n    React.useEffect(() => {\n      setIsChecked(props.checked ?? props.defaultChecked ?? false);\n    }, [props.checked, props.defaultChecked]);\n\n    const handleChange = React.useCallback(\n      (checked: boolean) => {\n        setIsChecked(checked);\n        onChange?.(checked);\n      },\n      [onChange],\n    );\n\n    return (\n      <SwitchPrimitive\n        checked={isChecked}\n        onChange={handleChange}\n        ref={ref}\n        className={cn(\n          'relative flex p-[3px] h-6 w-10 shrink-0 cursor-pointer items-center rounded-full transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[checked]:bg-primary bg-input data-[checked]:justify-end justify-start',\n          className,\n        )}\n        as={as}\n        whileTap=\"tap\"\n        initial={false}\n        onTapStart={() => setIsTapped(true)}\n        onTapCancel={() => setIsTapped(false)}\n        onTap={() => setIsTapped(false)}\n        {...props}\n      >\n        {LeftIcon && (\n          <motion.div\n            animate={\n              isChecked ? { scale: 1, opacity: 1 } : { scale: 0, opacity: 0 }\n            }\n            transition={{ type: 'spring', bounce: 0 }}\n            className=\"absolute left-1 top-1/2 -translate-y-1/2 dark:text-neutral-500 text-neutral-400\"\n          >\n            <LeftIcon className=\"size-3\" />\n          </motion.div>\n        )}\n\n        {RightIcon && (\n          <motion.div\n            animate={\n              isChecked ? { scale: 0, opacity: 0 } : { scale: 1, opacity: 1 }\n            }\n            transition={{ type: 'spring', bounce: 0 }}\n            className=\"absolute right-1 top-1/2 -translate-y-1/2 dark:text-neutral-400 text-neutral-500\"\n          >\n            <RightIcon className=\"size-3\" />\n          </motion.div>\n        )}\n\n        <motion.span\n          whileTap=\"tab\"\n          className={cn(\n            'relative z-[1] flex items-center justify-center rounded-full bg-background shadow-lg ring-0 dark:text-neutral-400 text-neutral-500',\n          )}\n          layout\n          transition={{ type: 'spring', stiffness: 300, damping: 25 }}\n          style={{\n            width: 18,\n            height: 18,\n          }}\n          animate={\n            isTapped\n              ? { width: 21, transition: { duration: 0.1 } }\n              : { width: 18, transition: { duration: 0.1 } }\n          }\n        >\n          {ThumbIcon && <ThumbIcon className=\"size-3\" />}\n        </motion.span>\n      </SwitchPrimitive>\n    );\n  },\n);\n\nSwitch.displayName = 'Switch';\n\nexport { Switch, type SwitchProps };\n",
      "type": "registry:ui",
      "target": "components/animate-ui/headless-switch.tsx"
    }
  ]
}