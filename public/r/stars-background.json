{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "stars-background",
  "type": "registry:ui",
  "title": "Stars Background",
  "description": "Stars background component",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/backgrounds/stars-background/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport {\n  motion,\n  useMotionValue,\n  useSpring,\n  type SpringOptions,\n} from 'motion/react';\n\nimport { cn } from '@/lib/utils';\n\ninterface StarLayerProps {\n  count: number;\n  size: number;\n  duration: number;\n}\n\nconst StarLayer = ({ count, size, duration }: StarLayerProps) => {\n  const boxShadow = React.useMemo(() => {\n    const shadows: string[] = [];\n    for (let i = 0; i < count; i++) {\n      const x = Math.floor(Math.random() * 4000) - 2000;\n      const y = Math.floor(Math.random() * 4000) - 2000;\n      shadows.push(`${x}px ${y}px #FFF`);\n    }\n    return shadows.join(', ');\n  }, [count]);\n\n  return (\n    <motion.div\n      animate={{ y: [0, -2000] }}\n      transition={{ repeat: Infinity, duration: duration, ease: 'linear' }}\n      className=\"absolute top-0 left-0 w-full h-[2000px]\"\n    >\n      <div\n        className=\"absolute bg-transparent rounded-full\"\n        style={{\n          width: `${size}px`,\n          height: `${size}px`,\n          boxShadow: boxShadow,\n        }}\n      />\n      <div\n        className=\"absolute bg-transparent rounded-full top-[2000px]\"\n        style={{\n          width: `${size}px`,\n          height: `${size}px`,\n          boxShadow: boxShadow,\n        }}\n      />\n    </motion.div>\n  );\n};\n\ninterface StarsBackgroundProps extends React.HTMLAttributes<HTMLDivElement> {\n  factor?: number;\n  speed?: number;\n  transition?: SpringOptions;\n}\n\nconst StarsBackground = React.forwardRef<HTMLDivElement, StarsBackgroundProps>(\n  (\n    {\n      children,\n      className,\n      factor = 0.05,\n      speed = 50,\n      transition = { stiffness: 50, damping: 20 },\n      ...props\n    },\n    ref,\n  ) => {\n    const offsetX = useMotionValue(1);\n    const offsetY = useMotionValue(1);\n\n    const springX = useSpring(offsetX, transition);\n    const springY = useSpring(offsetY, transition);\n\n    const handleMouseMove = React.useCallback(\n      (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        const centerX = window.innerWidth / 2;\n        const centerY = window.innerHeight / 2;\n        const newOffsetX = -(e.clientX - centerX) * factor;\n        const newOffsetY = -(e.clientY - centerY) * factor;\n        offsetX.set(newOffsetX);\n        offsetY.set(newOffsetY);\n      },\n      [offsetX, offsetY, factor],\n    );\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'relative overflow-hidden bg-[radial-gradient(ellipse_at_bottom,_#262626_0%,_#000_100%)]',\n          className,\n        )}\n        onMouseMove={handleMouseMove}\n        {...props}\n      >\n        <motion.div style={{ x: springX, y: springY }}>\n          <StarLayer count={1000} size={1} duration={speed} />\n          <StarLayer count={400} size={2} duration={speed * 2} />\n          <StarLayer count={200} size={3} duration={speed * 3} />\n        </motion.div>\n        {children}\n      </div>\n    );\n  },\n);\n\nStarsBackground.displayName = 'StarsBackground';\n\nexport { StarsBackground, type StarsBackgroundProps };\n",
      "type": "registry:ui",
      "target": "components/animate-ui/stars-background.tsx"
    }
  ]
}