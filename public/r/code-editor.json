{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-editor",
  "type": "registry:ui",
  "title": "Code Editor",
  "description": "Code editor component",
  "dependencies": [
    "motion",
    "react-syntax-highlighter"
  ],
  "devDependencies": [
    "@types/react-syntax-highlighter"
  ],
  "registryDependencies": [
    "https://animate-ui.com/r/copy-button"
  ],
  "files": [
    {
      "path": "registry/components/code-editor/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { motion, useInView } from 'motion/react';\n\nimport { cn } from '@/lib/utils';\nimport { CopyButton } from '@/components/animate-ui/copy-button';\n\ninterface CodeEditorProps extends React.HTMLAttributes<HTMLDivElement> {\n  code: string;\n  lang: string; // \"javascript\", \"tsx\", etc.\n  theme?: string; // \"vsc-dark-plus\", \"atom-dark\", etc.\n  duration?: number;\n  delay?: number;\n  showLineNumbers?: boolean;\n  header?: boolean;\n  cursor?: boolean;\n  startOnView?: boolean;\n  copyButton?: boolean;\n}\n\nconst CodeEditor = React.forwardRef<HTMLDivElement, CodeEditorProps>(\n  (\n    {\n      code,\n      lang,\n      theme = 'atom-dark',\n      duration = 5,\n      delay = 0,\n      className,\n      showLineNumbers = false,\n      header = true,\n      cursor = false,\n      startOnView = false,\n      copyButton = false,\n      ...props\n    },\n    ref,\n  ) => {\n    const editorRef = React.useRef<HTMLDivElement>(null);\n    const [visibleCode, setVisibleCode] = React.useState('');\n    const [importsReady, setImportsReady] = React.useState(false);\n    const [highlighterTheme, setHighlighterTheme] = React.useState<\n      Record<string, React.CSSProperties>\n    >({});\n    const [isDone, setIsDone] = React.useState(false);\n\n    const inView = useInView(editorRef, { once: true });\n\n    React.useEffect(() => {\n      const loadLanguageAndTheme = async () => {\n        try {\n          const themeMod = await import(\n            `react-syntax-highlighter/dist/esm/styles/prism/${theme}`\n          );\n          setHighlighterTheme(themeMod.default);\n          const mod = await import(\n            `react-syntax-highlighter/dist/esm/languages/prism/${lang}`\n          );\n          SyntaxHighlighter.registerLanguage(lang, mod.default);\n          setHighlighterTheme(themeMod.default);\n          setImportsReady(true);\n        } catch (e) {\n          console.error(`Language \"${lang}\" could not be loaded.`, e);\n        }\n      };\n\n      loadLanguageAndTheme();\n    }, [lang, theme]);\n\n    React.useEffect(() => {\n      if (!importsReady || !code.length) return;\n      if (startOnView && !inView) return;\n\n      const characters = Array.from(code);\n      let index = 0;\n      const totalDuration = duration * 1000;\n      const interval = totalDuration / characters.length;\n      let intervalId: NodeJS.Timeout;\n\n      const timeout = setTimeout(() => {\n        intervalId = setInterval(() => {\n          if (index < characters.length) {\n            setVisibleCode((prev) => {\n              const currentIndex = index;\n              index += 1;\n              return prev + characters[currentIndex];\n            });\n            editorRef.current?.scrollTo({\n              top: editorRef.current?.scrollHeight,\n              behavior: 'smooth',\n            });\n          } else {\n            clearInterval(intervalId);\n            setIsDone(true);\n          }\n        }, interval);\n      }, delay * 1000);\n\n      return () => {\n        clearTimeout(timeout);\n        clearInterval(intervalId);\n      };\n    }, [code, duration, delay, importsReady, startOnView, inView]);\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          'bg-neutral-900 w-[600px] h-[400px] border border-neutral-800 text-white overflow-hidden flex flex-col rounded-xl',\n          className,\n        )}\n        {...props}\n      >\n        {header && (\n          <div className=\"flex flex-row items-center justify-between gap-y-2 h-11 pl-4 pr-2 border-b border-neutral-800\">\n            <div className=\"flex flex-row gap-x-2\">\n              <div className=\"size-2.5 rounded-full bg-red-500\"></div>\n              <div className=\"size-2.5 rounded-full bg-yellow-500\"></div>\n              <div className=\"size-2.5 rounded-full bg-green-500\"></div>\n            </div>\n\n            {copyButton && (\n              <CopyButton\n                content={code}\n                size=\"sm\"\n                className=\"size-7 [&_svg]:size-3.5 bg-transparent hover:bg-neutral-800 text-white\"\n              />\n            )}\n          </div>\n        )}\n        <div\n          ref={editorRef}\n          className=\"size-full text-sm p-4 font-mono relative overflow-auto flex-1\"\n        >\n          {importsReady && (\n            <SyntaxHighlighter\n              showLineNumbers={showLineNumbers}\n              lineNumberStyle={{\n                minWidth: `${2 + String(code.split('\\n').length).length}ch`,\n              }}\n              codeTagProps={{ className: 'bg-transparent' }}\n              wrapLines\n              language={lang}\n              style={highlighterTheme}\n              customStyle={{\n                background: 'transparent',\n                padding: 0,\n                margin: 0,\n                border: 'none',\n                overflow: 'unset',\n              }}\n              CodeTag={(props) => (\n                <code {...props}>\n                  {props.children}\n                  {cursor && !isDone && (\n                    <motion.span\n                      className=\"inline-block w-[1ch] -translate-px\"\n                      initial={{ opacity: 1 }}\n                      animate={{ opacity: [1, 0] }}\n                      transition={{ duration: 0.7, repeat: Infinity }}\n                    >\n                      |\n                    </motion.span>\n                  )}\n                </code>\n              )}\n            >\n              {visibleCode}\n            </SyntaxHighlighter>\n          )}\n        </div>\n      </div>\n    );\n  },\n);\n\nCodeEditor.displayName = 'CodeEditor';\n\nexport { CodeEditor, type CodeEditorProps };\n",
      "type": "registry:ui",
      "target": "components/animate-ui/code-editor.tsx"
    }
  ]
}