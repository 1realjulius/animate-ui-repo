{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "copy-button",
  "type": "registry:ui",
  "title": "Copy Button",
  "description": "A copy button component",
  "dependencies": [
    "motion",
    "lucide-react",
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "registry/buttons/copy-button/index.tsx",
      "content": "'use client';\n\nimport * as React from 'react';\nimport { AnimatePresence, HTMLMotionProps, motion } from 'motion/react';\nimport { CheckIcon, CopyIcon } from 'lucide-react';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center cursor-pointer rounded-md transition-colors disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        muted: 'bg-muted text-muted-foreground',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n      },\n      size: {\n        default: 'size-8 rounded-lg [&_svg]:size-4',\n        sm: 'size-6 [&_svg]:size-3',\n        md: 'size-10 rounded-lg [&_svg]:size-5',\n        lg: 'size-12 rounded-xl [&_svg]:size-6',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  },\n);\n\ninterface CopyButtonProps\n  extends Omit<HTMLMotionProps<'button'>, 'children'>,\n    VariantProps<typeof buttonVariants> {\n  content: string;\n  delay?: number;\n}\n\nconst CopyButton = React.forwardRef<HTMLButtonElement, CopyButtonProps>(\n  ({ content, className, size, variant, delay = 3000, ...props }, ref) => {\n    const [isCopied, setIsCopied] = React.useState(false);\n    const Icon = isCopied ? CheckIcon : CopyIcon;\n\n    const handleCopy = React.useCallback(() => {\n      if (isCopied) return;\n      navigator.clipboard\n        .writeText(content)\n        .then(() => {\n          setIsCopied(true);\n          setTimeout(() => setIsCopied(false), delay);\n        })\n        .catch((error) => {\n          console.error('Error copying command', error);\n        });\n    }, [isCopied, content, delay]);\n\n    return (\n      <motion.button\n        whileHover={{ scale: 1.05 }}\n        whileTap={{ scale: 0.95 }}\n        className={cn(buttonVariants({ variant, size }), className)}\n        onClick={handleCopy}\n        {...props}\n        ref={ref}\n      >\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={isCopied ? 'check' : 'copy'}\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            exit={{ scale: 0 }}\n            transition={{ duration: 0.15 }}\n          >\n            <Icon />\n          </motion.div>\n        </AnimatePresence>\n      </motion.button>\n    );\n  },\n);\n\nCopyButton.displayName = 'CopyButton';\n\nexport { CopyButton, buttonVariants, type CopyButtonProps };\n",
      "type": "registry:ui",
      "target": "components/animate-ui/copy-button.tsx"
    }
  ]
}