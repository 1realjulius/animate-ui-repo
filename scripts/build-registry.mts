import { exec } from 'child_process';
import { promises as fs } from 'fs';
import path from 'path';
import { rimraf } from 'rimraf';
import { registryItemSchema, type Registry } from 'shadcn/registry';
import { z } from 'zod';
import registryItems from '../registry.json';

const registry = {
  name: 'Animate UI',
  homepage: 'https://animate-ui.com',
  items: z.array(registryItemSchema).parse([...registryItems.items]),
} satisfies Registry;

async function buildRegistryIndex() {
  let index = `/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const index: Record<string, any> = {`;

  // Remove duplicates: only keep the last item with a given name
  const uniqueItemsMap = new Map<string, (typeof registry.items)[0]>();
  for (const item of registry.items) {
    if (uniqueItemsMap.has(item.name)) {
      console.warn(
        `Duplicate item name detected: ${item.name}. Overwriting previous entry.`,
      );
    }
    uniqueItemsMap.set(item.name, item);
  }

  // Process only unique items
  for (const item of uniqueItemsMap.values()) {
    // Skip items without files
    if (!item.files) continue;

    console.log('Processing item:', item.name);
    // Define the component path from the first file if exists
    const componentPath = item.files[0]?.path ? `@/${item.files[0].path}` : '';

    // Read files and add content preserving newlines
    const filesWithContent = await Promise.all(
      item.files.map(async (file) => {
        const filePath = typeof file === 'string' ? file : file.path;
        const resolvedFilePath = path.resolve(filePath);

        try {
          // Read the file content (preserving newlines)
          const content = await fs.readFile(resolvedFilePath, 'utf-8');
          const processedContent = content.trim(); // Trim leading/trailing spaces
          return {
            path: filePath,
            type: file.type || 'unknown',
            target: file.target || '',
            content: processedContent, // Keep original formatting (newlines will be \n in JSON)
          };
        } catch (error) {
          console.error(`Error reading file ${filePath}:`, error);
          return {
            path: filePath,
            type: file.type || 'unknown',
            target: file.target || '',
            content: '',
          };
        }
      }),
    );

    index += `
  "${item.name}": {
    name: ${JSON.stringify(item.name)},
    description: ${JSON.stringify(item.description ?? '')},
    type: "${item.type}",
    dependencies: ${JSON.stringify(item.dependencies)},
    registryDependencies: ${JSON.stringify(item.registryDependencies)},
    files: ${JSON.stringify(filesWithContent, null, 2)},
    component: ${
      componentPath
        ? `React.lazy(async () => {
      const mod = await import("${componentPath}")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    })`
        : 'null'
    },
    command: 'https://animate-ui.com/r/${item.name}',
    meta: ${JSON.stringify(item.meta)},
  },`;
  }

  index += `
  }`;

  // Remove the previous registry index file and write the new one.
  rimraf.sync(path.join(process.cwd(), '__registry__/index.tsx'));
  await fs.writeFile(path.join(process.cwd(), '__registry__/index.tsx'), index);
}

async function buildRegistry() {
  // 1. Build the registry
  await new Promise((resolve, reject) => {
    const process = exec(
      `pnpm dlx shadcn build registry.json --output ./public/r/`,
    );

    process.on('exit', (code) => {
      if (code === 0) {
        resolve(undefined);
      } else {
        reject(new Error(`Process exited with code ${code}`));
      }
    });
  });

  // 2. Replace `@/registry/animate-ui/` with `@/components/animate-ui/` in all files
  const files = await fs.readdir(path.join(process.cwd(), 'public/r'));

  await Promise.all(
    files.map(async (file) => {
      const content = await fs.readFile(
        path.join(process.cwd(), 'public/r', file),
        'utf-8',
      );

      const registryItem = JSON.parse(content);

      // Replace `@/registry/animate-ui/` in files
      registryItem.files = registryItem.files?.map((file) => {
        if (file.content?.includes('@/registry/animate-ui')) {
          file.content = file.content?.replaceAll(
            '@/registry/animate-ui',
            '@/components/animate-ui',
          );
        }
        return file;
      });

      // Write the file back
      await fs.writeFile(
        path.join(process.cwd(), 'public/r', file),
        JSON.stringify(registryItem, null, 2),
      );
    }),
  );
}

try {
  console.log('üóÇÔ∏è Building registry/__index__.tsx...');
  await buildRegistryIndex();
  console.log('üèóÔ∏è Building registry...');
  await buildRegistry();
} catch (error) {
  console.error(error);
  process.exit(1);
}
